<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我是新手程序员，想找一个地方记录自己在技术上的成长和生活上的点滴。 现在主要是跟随迪哥做iOS的开发。 我的jekyll还在搭建过程当中！我会逐渐将我的jekyll美化起来的。
</description>
    <link>judi0713.github.io/</link>
    <atom:link href="judi0713.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Jun 2015 22:51:00 +0800</pubDate>
    <lastBuildDate>Mon, 29 Jun 2015 22:51:00 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>给萌萌哒的子渔酱</title>
        <description>&lt;p&gt;写点什么吧。&lt;/p&gt;

&lt;p&gt;不知道为什么一想到老大都会想到萌萌哒的子渔酱。&lt;/p&gt;

&lt;p&gt;对于老大的称呼总有很多，老大是华哥喊起来的，我们就跟着喊了。子渔是老大的笔名。当然还有喊识颖的，这是迪哥喊的。也有喊颖姐的，这是雨叔。&lt;/p&gt;

&lt;p&gt;第一次遇见老大当然是报道的时候了，白色的衣服，扎辫子。&lt;/p&gt;

&lt;p&gt;后来再见就是班里第一次自我介绍的时候，粉色衣服。&lt;/p&gt;

&lt;p&gt;再后来就慢慢熟起来了。&lt;/p&gt;

&lt;p&gt;大一的时候总有很多时间，没事喊着老大出来一起。班级第一次聚会了，篮球赛了，还有班级聚餐了，还有一帮人在寝室吃东西啃兔头。大二的时候就少了。&lt;/p&gt;

&lt;p&gt;还记得大一给老大录的生日视频，那是唯一送老大的东西吧。&lt;/p&gt;

&lt;p&gt;对老大的印象就是女神…那不完全，还有女汉子。&lt;/p&gt;

&lt;p&gt;前几天骑车去工作室的时候走路上看到老大回寝室。穿着毕业衫斜刘海长发飘飘，哇塞，真的，是女神！&lt;/p&gt;

&lt;p&gt;之前看老大打球的时候，那真是一点都不女神了…&lt;/p&gt;

&lt;p&gt;一个人同时兼有两种截然相反的属性也是不容易的吧。&lt;/p&gt;

&lt;p&gt;老大的感觉，真的是一个很有文化气息的妹子，改变了我对科大女生的看法。&lt;/p&gt;

&lt;p&gt;老大会穿着汉服到处逛悠，也会写出看不懂的文字发到空间。&lt;/p&gt;

&lt;p&gt;我总会想，老大的境界到底有多高，很高。&lt;/p&gt;

&lt;p&gt;你会很愿意和老大交流你遇到的问题，她会给你很好的意见，你也会很得到的很好的解答。&lt;/p&gt;

&lt;p&gt;以前觉得老大很厉害，什么都会，会自己搭一个网站会去绿盟实习。老大现在也很厉害，总能在和老大的交流上学到很多东西。以前总想，我要好好努力要成为像老大那样，什么都会。现在觉得，至少，搭个网站什么的已经不是很难了。但是要想像老大一样有很深的文化的底蕴，很高的境界，还是很难的。像老大那样可以把每件事情考虑的很好，想的很仔细，想的很明白想的很开还是很难的。&lt;/p&gt;

&lt;p&gt;至少，这两年和老大学到了很多东西。我曾经想像老大一样当上导生，去带一个班级。看样子是没机会了。这是后话。&lt;/p&gt;

&lt;p&gt;晚上聚餐，一群人和老大合了影，依然问了老大很多问题。&lt;/p&gt;

&lt;p&gt;很快啊，这两年。一瞬间就过完了。曾经偶像般存在的老大，现在依旧偶像般的存在。多了更多女神的感觉。和老大在一起大学生活的两年，至此，也算基本上画上了句号。&lt;/p&gt;

&lt;p&gt;也许过了一段时间之后，老大会发来消息，问问我们最近怎么样。我们也会反过去问问老大怎么样。希望我们都可以很好。&lt;/p&gt;

&lt;p&gt;上海，请你照顾好我们最爱最爱的老大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-1.JPG&quot; alt=&quot;班级合影&quot; /&gt;
班级合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-2.JPG&quot; alt=&quot;我和老大&quot; /&gt;
我和老大&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 06:35:00 +0800</pubDate>
        <link>judi0713.github.io/life/2015/06/30/to-my-dear.html</link>
        <guid isPermaLink="true">judi0713.github.io/life/2015/06/30/to-my-dear.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>ReactiveCocoa在UIView上的运用</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近项目非常繁忙…上星期本来想把和block内存管理有关的东西看一下再写一个有关block的博客的后来有关block内存管理的博客都找好了没时间实战也就没出。
写了有两周的项目，因为很多原因所以这近两周一直在写界面，但是在写界面的时候用到了ReactiveCocoa的东西，也是因为实践了所以写篇博客分享出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;ReactiveCocoa（下文统称为RAC）&lt;/code&gt;，具体我就不介绍了，可以去我的博客里那篇还没填完坑的  &lt;a href=&quot;http://walkginkgo.com/ios/2015/05/03/ios-mvvm-1.html&quot;&gt;mvvm开发模式&lt;/a&gt;  文章看一下。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;个人以为，RAC可以以信号的方式来触发各种动作，从而让代码更加精炼。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下面上代码吧。&lt;/h2&gt;

&lt;h2 id=&quot;uibutton&quot;&gt;&lt;code&gt;在UIButton上的使用&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                            &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这里，对uibutton添加了一个rac_signalForControlEvents的方式，就不用利用addtarget的方式来再写一个方法来进行对uibutton添加点击事件了。&lt;/p&gt;

&lt;h2 id=&quot;uialertview&quot;&gt;&lt;code&gt;在UIAlertView的使用&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;bp&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;选择图片上传&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cancelButtonTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;取消&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;otherButtonTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;拍照上传&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;从相册选择&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rac_buttonClickedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseFromCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseFromAlbum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这两个是&lt;a href=&quot;http://limboy.me/&quot;&gt;limeboy&lt;/a&gt;在博客里提到的。因为有了RAC，所以我这次放弃使用blockskit和alertview的Categories。&lt;/p&gt;

&lt;p&gt;下面两个是我利用RAC的方式写的代码。&lt;/p&gt;

&lt;h2 id=&quot;uitextfield&quot;&gt;&lt;code&gt;在UITextfield的使用&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;第一个是我封装了一个安卓风格的输入框，就是下面一条线，当选择这个框的时候，线会加粗变黑。
我把中间的两句核心代码贴出来。self是因为我继承了一个textfield先进行功能添加和封装。所以self就是代指一个textfield了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidBegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blackColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其实这两句是可以用addtarget的方式来添加的，但是我选择了用RAC的方式，更为简单也更为容易理解。当textfield被选中的时候，下面的borderline会变成黑色，当结束选择的时候，变成灰色。(其实当选择的时候borderline应该还要加粗)。&lt;/p&gt;

&lt;h2 id=&quot;uipagecontrol&quot;&gt;&lt;code&gt;监控UIPagecontrol改变&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;还有一个地方我利用到了RAC。因为我现在需要实现一个功能，图片轮播的时候，当图片切换，我需要相应的刷新下面的一个列表。因为我们的图片轮播是用到的一个开源控件，我实在是能力有限不知道怎么进一步修改这个控件来进一步封装从而实现新的功能，我就利用了RAC。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;refreshSlideContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码将pageControl和它的currentPage属性相绑定，当currentPage改变的时候就会触发下面的函数。然后我传了一个currentPage的参数进去，从而下面的列表可以进一步更新。但是开始加载的时候会调用3次…我不知道我哪个地方写坑了我还在寻找。各位见谅…&lt;/p&gt;

&lt;p&gt;上面的几个代码片段就是我这两周在写纯界面的时候用到的一些和RAC有关的东西，因为本身就是写纯界面，所以没用到很多，也很简单，没有其他的功能。刚刚在查limeboy博客的时候看到NotificationCenter也可以利用RAC的方式写，我抽时间也会尝试，因为项目里没用到，所以就不贴代码了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BTW：最近有一大波考试，博客更新程度会大大降低…后面可能会一直做项目，等积累一部分才会继续写了。多谢各位的支持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;Limboy &lt;a href=&quot;http://limboy.me/ios/2013/12/27/reactivecocoa-2.html&quot;&gt;说说ReactiveCocoa 2&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 30 May 2015 04:02:33 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/05/30/rac_uiview.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/05/30/rac_uiview.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Block 我所理解的回调</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;h2 id=&quot;section&quot;&gt;废话&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发iOS距离一年还有四个月。block的文章看了很多。也在项目中使用了，但是使用率很低，仅限于最最简单的界面传值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我最近处于一个深度学习和补作业做实验的阶段(重点是补作业和做实验)，而且经历了两个项目现在对于OC的理解又更进了一步。于是抽时间把之前下载的关于block的视频又翻出来看了一下。有一些感受写出来，以便CM和PLUSUB以后的iOSer可以很快的学习到关于block的使用。以后这样的文章都会在标题加一个FOR CM AND PLUSUB。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;概述&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;block就是闭包，可以用来回调。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;再简单一点，指向函数的指针。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我现在只会简单的使用block，下午写了个demo利用block封装了afnetworking然后在另一个界面调用afnetworking的请求。当然不复杂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;上代码吧，不然再废话都解释不清楚什么是block。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part1-block&quot;&gt;&lt;em&gt;part1 block的简单定义&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;我现在定义一个简单的block。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;---%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;11111&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Outputs:---11111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以这么理解，我定义了一个返回值为void类型的block。void后面跟了一个函数，但是这个函数函数名是以^开头的，需要用括号包起来，参数也需要用括号包起来。参数可以是一个int类型，可以是一个NSString类型，还可以是一个函数！可以是多个参数还可以是一个函数。当然如果是int类型的block就需要return一个返回值了。&lt;/p&gt;

&lt;p&gt;然后我们开始对这个void类型的函数进行定义。就是令它等于一个“^+参数”然后里面像定义一个函数一样就行了。
在调用这个block的时候就直接就myBlock加参数就可以了。&lt;/p&gt;

&lt;p&gt;我们可以打断点来看一下整个block的执行顺序。我在代码后面加了标示。&lt;/p&gt;

&lt;p&gt;执行顺序是1 3 2，可以看到myBlock没有按照程序执行的顺序来调用而是在调用之后执行了2的代码。这个例子可能不那么明显，但是可以开始初步理解回调。&lt;/p&gt;

&lt;h2 id=&quot;part2-block&quot;&gt;&lt;em&gt;part2 传参block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;下面把难度加大一点，我们把block当参数传。然后看一个block的例子。
首先来回顾一个c语言里伟大的typedef，我们开头会利用typedef定义一个block。如果不利用typedef定义一个block，那么函数传参的时候会写很多代码。一会我会详述。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//typedef定义一个block&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;-----%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testBlock:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mBlock&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果开始没有用typedef定义的话，此处的函数变为- (void)testBlock:(void(^)(NSString *str))myblock&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//简单的说格式就是 “返回值 + (^) + 参数 + 名字”&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;1111&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Outputs:-----1111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码中，我们写了一个testBlock的函数，将我们的tblock作为参数传到了testBlock函数里面，然后再testBlock里用mBlock调用了我们所写的MyBlock这个函数。&lt;/p&gt;

&lt;p&gt;打断点看一下整体的运行流程，2 3 1。这里可以更加明显理解“回调”的含义。&lt;/p&gt;

&lt;h2 id=&quot;part3-buttonblock&quot;&gt;&lt;em&gt;part3 点击button触发block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;经历了上面两个part基本上应该对block有个简单的理解。下面再加一点难度，用按钮触发一个回调来改变按钮的颜色。&lt;/p&gt;

&lt;p&gt;不多解释，直接上代码。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testfunc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testBlock:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;myBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;part4-afnetwork&quot;&gt;&lt;em&gt;part4 利用回调分离afnetwork的请求&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;直接上代码了。&lt;/p&gt;

&lt;p&gt;TestNetworkViewController是afnetwork使用的地方。
TestViewController是我们需要调用网络请求的地方。
SearchModel是一个model，我用来解析数据的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//  TestNetworkViewController.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//TestNetworkViewController.m&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestNetworkViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getmodel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;http://xxx.xx.xxx.xx:xxxx/app/search_haosou&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;JSON: %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MTLJSONAdapter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;modelOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fromJSONDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Error: %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  TestViewController.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestNetworkViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do any additional setup after loading the view.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setTitleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;首先还是得说一下我这里只是演示了最最简单的block使用，因为作为一个iOS开发者不会block，那么有一大半的代码是看不懂的，在后面理解RAC的时候也会出现很大的问题。所以这里我只是做了简单的说明，至于在block里为什么不能调用self，自从segmentfault上有人问过之后我答错之后现在也算是理解了一部分了，但是牵扯到了内存回收的问题，我还需要一段时间来消化。消化完之后会继续写博客的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;总之，block非常的有用，初期写block非常的难过，但是难过过了也就慢慢会喜欢上block的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;post-credits-scene&quot;&gt;post-credits scene&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近实在是忙的不可开交，一星期两场考试四个实验。还欠了人jobdeer.com一篇博客还没写，人送的书都没时间看。抽时间还要补起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近博客的更新频率也是大大降低…唉。都是泪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;先写到这了。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 May 2015 04:02:33 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/05/30/my-understand-about-block.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/05/30/my-understand-about-block.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>iOS开发模式MVVM 1理解开发模式(占坑，未写完)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一些废话&lt;/h2&gt;
&lt;p&gt;距离下一个项目大概还有一个星期的时间，除去各种实验和上课还有期中考试的复习，加上一部分设计的任务，剩下的能学习的时间实在是少之又少。
五一三天看了三场球看了两场跑男，其他时间基本上都泡在电脑前研究了MVVM的开发模式。昨天看了一下午实在是没有任何起色，今天算是到了说好的五一两篇博客的DDL了。决定还是写点东西。&lt;/p&gt;

&lt;h2 id=&quot;racmvcmvvm&quot;&gt;RAC、MVC和MVVM&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RAC(ReactiveCocoa)&lt;/code&gt;里的东西实在是有点多，RAC本身就不好理解，这么几天，说RAC是FRP的思想。我倒是没有发现里面和函数式编程有关的东西（可能是我水平太低而且没有深入理解RAC和Haskell），但是响应式的编程方式确实有了一定的理解。我理解的响应式，就是这边动作出现更换，视图和其他的对应连接的东西也会随之改变。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MVC(Model View Controller)&lt;/code&gt;是Apple官方也给出的开发模式，但是实际开发中，View和Controller很多时候是绑定在一起的。我在之前的iOS开发小记中提到过对于model层的理解。在我的第一个项目里，甚至连网络请求也是写在Controller里的，这就导致了Controller里包含了大量的代码，从视图到网络请求。我在后期维护和添加内容的时候，变得非常非常的困难。
所以这就有我们开发模式逐渐改变的第一步，迪哥利用RAC将网络层单独分离出来的写法。而且我们不断的将控件抽象出来，减少Controller中的代码。虽然代码量增加，但是后期的维护会简单不少。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MVVM(Model ViewModel Model)&lt;/code&gt;是RAC出现后提出的iOS开发新模式，分离出一个ViewModel。View层中除了View，还有Controller。&lt;/p&gt;

&lt;h2 id=&quot;mvcmvvm&quot;&gt;MVC和MVVM的比较&lt;/h2&gt;
&lt;p&gt;其实我想贴图，但是资料太多，我还是先第一步用语言来解释我自身的理解。
MVC中，Controller是核心，Controller对View进行操作，Controller也对Model进行操作。但是View和Model是不相互进行通信。
MVVM中，我理解的ViewModel是一个过渡的层，首先Model层获取数据，在ViewModel里对Model层进行操作，操作出一个View出来，然后直接在View层显示。这就节省了Controller中View的代码。&lt;/p&gt;

&lt;h2 id=&quot;mvvm&quot;&gt;简单的MVVM实现&lt;/h2&gt;
&lt;p&gt;占坑，不是不写，实在是没有可以贴出来看的代码。而且只是大概理解了里面的传值方式，MVVM模式不贴代码实在是没有什么可写的。
明日下午敲几个代码然后接着更。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 06:04:12 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/05/04/ios-mvvm-1.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/05/04/ios-mvvm-1.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>利用XAMPP在Ubuntu下搭建渗透测试平台DVWA</title>
        <description>&lt;p&gt;很早以前在freebuf上看到一篇文章。&lt;a href=&quot;http://www.freebuf.com/tools/4708.html&quot;&gt;十大渗透测试演练系统&lt;/a&gt;。也给很多人推荐过。个人感觉刚开始做安全，不像我们做应用，很难找到实践的地方。所以这十个渗透系统在初期可能显得很有用。&lt;/p&gt;

&lt;p&gt;DVWA是freebuf上提到的第一个。因为最近得知一个朋友在学习web安全这一块，就想起来上次我尝试搭DVWA失败了，这次就正好就重新尝试搭建一下顺便出个博客，希望能给朋友和其他想学习安全的朋友提供一点点点帮助。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外，这次的博客命令部分我可能采用markdown的语法模式，这样方便拷贝代码。所以有的地方就不再像以前那样截图了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;用到的东西&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dvwa.co.uk/&quot;&gt;DVWA&lt;/a&gt;是用PHP+Mysql编写的一套用于常规WEB漏洞教学和检测的WEB脆弱性测试程序。包含了SQL注入、XSS、盲注等常见的一些安全漏洞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apachefriends.org/zh_cn/index.html&quot;&gt;XAMPP&lt;/a&gt;，XAMPP是完全免费且易于安装的Apache发行版，其中包含MySQL、PHP和Perl。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-1.png&quot; alt=&quot;use-xampp-build-dvwa-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我把上面两个文件放在桌面了，DVWA我是解压好了的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;整个搭建过程&lt;/h2&gt;
&lt;p&gt;实际上如果利用XAMPP的话整个过程非常简单，我一开始搭建的时候没有使用XAMPP，走了很多弯路。后来才发现DVWA给的官方文档就是建议用XAMPP。我建议就是开一台虚拟机，然后专门运行XAMPP就可以。&lt;/p&gt;

&lt;p&gt;进入桌面之后
&lt;code&gt;sudo ./xampp-linux-x64-5.6.8-0-installer.run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记得要用sudo，因为是要安装在系统文件里的。&lt;/p&gt;

&lt;p&gt;![use-xampp-build-dvwa-3](\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-3.png
不停的next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-4.png&quot; alt=&quot;use-xampp-build-dvwa-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-5.png&quot; alt=&quot;use-xampp-build-dvwa-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会弹出很多页面，还有一个可视化的对话框，看着点。都不是很重要。
会有一个这个，点中文。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-6.png&quot; alt=&quot;use-xampp-build-dvwa-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在浏览器输入&lt;code&gt;http://127.0.0.1/&lt;/code&gt;也会进入这个页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-7.png&quot; alt=&quot;use-xampp-build-dvwa-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们点击右面的安全。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-8.png&quot; alt=&quot;use-xampp-build-dvwa-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到很多问题，安装下面说的我们一步一步解决，运行&lt;code&gt;sudo /opt/lamp/xampp security&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-9.png&quot; alt=&quot;use-xampp-build-dvwa-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前的终端会有这个，不管它，ctrl+c它然后我们运行上面的命令，记得要加sudo。&lt;/p&gt;

&lt;p&gt;跟着说明一步一步设置密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-10.png&quot; alt=&quot;use-xampp-build-dvwa-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的mysql没有运行，所以不能查看安全性，运行mysql。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo /opt/lamp/xampp start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-11.png&quot; alt=&quot;use-xampp-build-dvwa-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个命令是运行所有的环境，单独运行的时候要进入xampp的安装环境单独启动。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo /opt/lamp/xampp security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-12.png&quot; alt=&quot;use-xampp-build-dvwa-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这下mysql的密码也设置Ok了~
这时候在进入之前的web页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-13.png&quot; alt=&quot;use-xampp-build-dvwa-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们的xampp的环境已经基本上配置好了。下面要配置DVWA了。
我们要将DVWA的目录文件改个简单的名字，我改成了dvwa，然后放到/opt/lamp/htdocs目录下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mv /home/cd/Desktop/dvwa/ /opt/lampp/htdocs/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这时候我们在网址栏输入&lt;code&gt;127.0.0.1/dvwa&lt;/code&gt;已经有显示了。
显示的是&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-15.png&quot; alt=&quot;use-xampp-build-dvwa-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明我们没有连接数据库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-16.png&quot; alt=&quot;use-xampp-build-dvwa-16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击红线部分，会出现下面的字。
这时候我们要进入mysql设置DVWA的数据库。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/opt/lampp/bin/mysql -us root -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create database dvwa;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-17.png&quot; alt=&quot;use-xampp-build-dvwa-17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果直接运行mysql会显示没有相关的软件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-18.png&quot; alt=&quot;use-xampp-build-dvwa-18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后修改DVWA的配置文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim config.inc.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-19.png&quot; alt=&quot;use-xampp-build-dvwa-19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改db_password为刚刚设置的mysql的root密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-20.png&quot; alt=&quot;use-xampp-build-dvwa-20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后再进入&lt;code&gt;http://127.0.0.1/dvwa/setup.php&lt;/code&gt; create database&lt;/p&gt;

&lt;p&gt;然后把虚拟机的网络设置成桥接模式就可以进行局域网的访问了。&lt;/p&gt;

&lt;p&gt;记得如果ubuntu关机或者重启需要重新启动xampp的所有服务然后新建数据库。&lt;/p&gt;

&lt;p&gt;如果没错的话，按照之前我的博客里的远程ssh访问的方式，可以让全校都访问到这个网站。至此，搭建DVWA基本是结束。这样就有了一个渗透测试的平台了。&lt;/p&gt;

&lt;p&gt;好了，我是在linux环境下搭建的，我在网上看到了ubuntu server环境还有windows环境的教程。欢迎你们尝试在windows下和ubuntu server下搭建这个测试平台。如果还有问题可以留言和我交流。&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 03:33:42 +0800</pubDate>
        <link>judi0713.github.io/xampp/2015/05/02/use-xampp-build-dvwa.html</link>
        <guid isPermaLink="true">judi0713.github.io/xampp/2015/05/02/use-xampp-build-dvwa.html</guid>
        
        
        <category>xampp</category>
        
      </item>
    
      <item>
        <title>iOS近期开发小结Ⅱ</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;距离上次写博客有一段时间了。几次提笔想写都觉得没什么可写的，好玩的东西没倒腾，iOS又学的不彻底。最近把iOS又看了一段时间，而且基本上是把主要精力放在了iOS的基础知识学习上。这篇博客就写写在做最近这个app的时候一些小结。没有太多干货的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;因为最近钟徐琦智能搜索已经上线了各大安卓市场，我就想帮他上一个iOS版本然后借此机会熟悉一些iOS开发的新模式和一些新的开源组件。现在基本上算是完成了整个应用。也在近期准备上线了，有想法做出来之后开源出来，开源到我的github和coding。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;下面就是大概小结一下做这个应用的整个过程和最近看到的一些新的东西。&lt;/h3&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.网络层的分离&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS开发官方给出的开发模式是mvc模式，但是至少对我个人来说，我view和controller搞不清楚怎么划分，像coding开源的他们的应用，基本是view层就是cell。我在做的时候view曾也只有cell的存在。&lt;/p&gt;

&lt;p&gt;迪哥在做他的上一个项目的时候，利用rac，将网络层单独分离出来。这是我在做智能搜索里最大的变化。这样不算是完整的mvvm模式，但是已经初步有了mvvm模式的雏形。我下一步的计划是继续研究mvvm的模式。虽然mvvm是利用更多的代码来进行整个程序的操作，但是将网络层单独分离确实减少了代码的后期维护难度。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.cell和tableview的分离&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以前对于一个列表的操作总是在一个view里操作。所有的cell里，只是进行数据的加载和界面的布局，这样会导致viewcontroller里代码的冗余和不好管理。&lt;/p&gt;

&lt;p&gt;我在这次的app中，使用了block和通知的方式，在cell里修改tableview的界面。说句实话，这样的方式看上去代码量增多了，实际上代码量是减少的，而且更便于后期的维护。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.三种界面传值的方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS中有三种界面传值的方式，delegate，notice和block。我在这个app中，利用了notice和block。&lt;/p&gt;

&lt;p&gt;简单的说一下我个人对这三种方式的理解。&lt;/p&gt;

&lt;p&gt;我第一个接触的方法是delegate，delegate的代码量多，但是思路清晰。&lt;/p&gt;

&lt;p&gt;第二个是这次运用到的block，block相比较delegate来说，是自己研究出来的，代码量个人觉得相比较delegate来说，简单一些，但是说句实话，到现在为止我都没研究出来block到底是个什么，回调实在是让我觉得是iOS开发里最难理解的部分了。不过现在至少可以简单的使用了。&lt;/p&gt;

&lt;p&gt;第三是notice，notice写起来简单，而且全局性强。到现在为止我没有发现notice的不好之处在哪，不仅可以传值，还可以用来调用函数。&lt;/p&gt;

&lt;p&gt;在后面的开发中，我可能会尽量多的使用block和notice，逐渐摒弃利用delegate传值的方式，但是不是说以后就不用delegate了。我觉得delegate在更大程度上是在我们自定义控件的时候会大量使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.利用masonry进行纯代码布局&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在一开始是想尝试纯代码布局的，但是因为都用xib所以我大量的使用纯代码布局。
这次尝试了纯代码布局和手写的约束。&lt;/p&gt;

&lt;p&gt;没什么感觉…除了适配上更方便了其他暂时没有什么感觉。&lt;/p&gt;

&lt;p&gt;我在后期开发中，会采用xib混合纯代码的方式进行界面的布局，因为利用xib在某种程度上会加快开发的进度。在某些复杂的界面，我会考虑纯代码的布局。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5.利用blockskit简化代理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Blockskit是我这次用到的一个第三方库。简单的说，它是以block的方式封装了代理。这样就不用所有代理都实现，直接用回调的方式就可以了。&lt;/p&gt;

&lt;p&gt;个人的感觉是这种方法在写alert的代理的时候非常之方便。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;6.利用mantle进行model层的解析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mantle是一款可以将json数据自动匹配到model层的开源组件，但是我觉得mantle的使用比我想象中要复杂一点。但是这种解析model的方式很好的防止了model层代码的冗余。唱吧是采用的mantle对model层进行的解析。&lt;/p&gt;

&lt;p&gt;后期可能我会尝试使用mj的mjextension来进行model层的解析。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;7.fmdb建立本地数据库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这学期也算是学了数据库了所以不能再有理由不去建立本地数据库了。&lt;/p&gt;

&lt;p&gt;因为在智能搜索中，我需要将用户收藏的新闻存储在本地，方便使用人下次使用。&lt;/p&gt;

&lt;p&gt;本着熟悉sql语句的想法我开始使用fmdb建立本地数据库。我看的fmdb的demo是唐巧开源在他github上的fmdb使用代码和在我第一个项目中迪哥写的代码。&lt;/p&gt;

&lt;p&gt;Fmdb在使用的时候是需要写sql语句，这确实对我一个挑战，不过在两份代码的协助下我基本上完成了建立本地数据库和插入数据和查找数据删除数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其实建立本地数据库没有我想象中那么难，但是人嘛，总是不想跨过那第一步。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我深刻的感受到了像qq微信这种应用是做了大量的本地数据存储的，这是一项很庞大的工程，后面还是需要将sql语句好好的在项目中再实践以下。对我来说，可能数据库这种课考个八九十没那么重要，但是我得熟悉它的用法，如果我能很好的使用，那60分我也能接受。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;8.对model层的理解&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说句实话，我到现在都不知道model层是干啥的，但是在建立本地数据库的时候我对model层的理解又更加的不同了。&lt;/p&gt;

&lt;p&gt;一开始model层对我来说，就是进行json数据的解析。但是在从本地数据库获取信息解析的时候，我发现model的作用不仅是解析json数据，model层更是像一个大集合里的集合。它就像把一群人的共同属性抽象出来成为一个普遍的人，然后一群人里存储了不同属性的普通人。有点解释的抽象了。举个例子，{[1,2],[2,4],[4,8]},在这里，我把[2^n,2^(n+1)]可以当作一个model，然后在集合里存储了很多这种model。&lt;/p&gt;

&lt;p&gt;这样是很方便的，这种方式很大程度上代码的可读性变高，而且节约了很多不必要的代码。相当于抽象出了一个类。&lt;/p&gt;

&lt;p&gt;只是个人对model层做了那么久iOS开发的理解，暂时的理解。可能还不够准确，但是现在仿佛逐渐有了一个model层的概念，不再像以前那样，model层就是单纯的解析json数据。&lt;/p&gt;

&lt;p&gt;因为只用了大概两周的时间，有很多东西熟悉的还不是很彻底，但是总某种程度上来说已经将一些基础的东西进行了整理和复习。
各种英文官方文档看的我是欲哭无泪。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下一步的学习重点在以下几点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进一步的熟悉rac和研究mvvm模式的代码。&lt;/p&gt;

&lt;p&gt;Masonry自动布局更复杂的情况。&lt;/p&gt;

&lt;p&gt;Sql语句的更进一步使用。&lt;/p&gt;

&lt;p&gt;还需要我自己去更多探索的是mjextension和blockskit。&lt;/p&gt;

&lt;p&gt;另外还有想法看一些开源的代码和博客。不仅是开源控件的代码，还有开源的项目的代码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外，最近还在segmentfault上答题了，到不是为了找工作啥的，就像迪哥说的，这是一个很好的总结以前学过的东西的方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;希望我亲爱的姐姐一直幸福。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他没做什么了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;欢迎给我留言我们互相交流。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;以上。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 01:16:24 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/04/21/ios-sumup-2.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/04/21/ios-sumup-2.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Jekyll问题解答和iOS开发小结Ⅰ</title>
        <description>&lt;p&gt;从这篇开始起，会写两到三篇iOS方面的文章。可能是一些感受，可能是一些干货，欢迎你的阅读。&lt;/p&gt;

&lt;p&gt;今天这篇博客主要分两个部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一部分是对之前Jekyll博客搭建中未解释清楚的地方重新解释一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二部分是iOS开发的一个总结和iOS后期学习的一个安排。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;第一部分 Jekyll搭建博客中的问题解答&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;因为好友许总最近在看我的博客然后进行Jekyll环境的搭建遇到了一些问题。我在此做一个解答。&lt;/p&gt;

&lt;h3 id=&quot;ruby-gemjekylltime-out&quot;&gt;第一个问题是用ruby gem下载Jekyll时存在time out，及超时无法下载的情况。&lt;/h3&gt;

&lt;p&gt;这个问题主要是因为“ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了”&lt;a href=&quot;http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/&quot;&gt;（摘自唐巧的博客）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以我们只要在命令行下更换ruby的源就可以了。具体的点击巧大的博客进去看一下就可以了。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;第二个问题是上传代码的问题。&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://walkginkgo.com/git/2015/03/07/git-easyuse.html&quot;&gt;命令行git简单使用&lt;/a&gt;具体的操作可以参考这篇博客。另外解释一下这篇博客里少写的一些内容。&lt;/p&gt;

&lt;p&gt;git上传代码是需要你的身份的，所以下面两个命令是需要提前输入的。&lt;/p&gt;

&lt;p&gt;git config –global user.name “Your Name”&lt;/p&gt;

&lt;p&gt;git config –global user.email “you@email.com”&lt;/p&gt;

&lt;p&gt;git上传代码时候首先要先git clone下来，比如clone下来的文件夹叫做test。然后你在这个目录的上层目录运用jekyll new test，就会在你clone的目录下面创建jekyll了。然后就可以上传了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果后面对我的博客里的一些东西不明白的可以直接留言，或者联系我我会把我的qq或者微信给你。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ios&quot;&gt;第二部分 iOS开发小结Ⅰ&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;part--ios&quot;&gt;Part Ⅰ iOS开发总结&lt;/h3&gt;

&lt;p&gt;说着讲着做iOS开发也有快到半年了。从去年的九月份到现在的三月份，去了中间的寒假，差不多也就半年了。&lt;/p&gt;

&lt;p&gt;这半年来有苦也有乐，除了技术上的提升之外。更多的是收获了一群很好的亦师亦友的朋友。&lt;/p&gt;

&lt;p&gt;昨天迪哥和我说了一下之前代码里存在的思路和方法上的问题之后，他说我可以写几篇博客了。想想确实也该写写陪伴我那么久的iOS开发了。&lt;/p&gt;

&lt;p&gt;首先谈一点个人的感受。&lt;/p&gt;

&lt;p&gt;因为我们的开发用了cocoapods做的程序的依赖管理。所以对于github的感受颇深。我之所以开始写博客，很大程度上是因为github这个”开源大社区“。我水平有限，不能很好的为这个大社区贡献我的issue或者发起一个大的项目。所以我现在决定开始写博客，来分享我在成长过程中的点点滴滴，希望我的分享可以帮到别人。&lt;/p&gt;

&lt;p&gt;可能我iOS开发的目标就是有朝一日可以像巧大或者MJ那样可以开源一个或者几个start过百过千的项目。&lt;/p&gt;

&lt;h3 id=&quot;ios-1&quot;&gt;下面是最近做项目过程中获得的一些东西。我会分块来叙述，因为iOS这个系列会出不止一篇文章。所以这一篇现大概叙述。&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 对于面向对象的理解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我在刚使用object-c时的时候，只具备c基础，了解简单的面向对象的概念。对于继承重写这些东西理解不是很清楚。而且在第一个项目的时候几乎没有用到面向对象，但是确实在使用oc的过程中，包括和他们做安卓的交流过程中，对于面向对象的理解更加深刻了。&lt;/p&gt;

&lt;p&gt;在第二个项目中，在迪哥的指导下。对于具有相同属性的button进行继承。大大简化了管理的成本和代码量。&lt;/p&gt;

&lt;p&gt;包括在使用巧大的YTK进行网络请求时，对于有相同参数的api进行继承和重写，这样只需要重写url就可以了，节省了很多代码。&lt;/p&gt;

&lt;p&gt;因为对于oc语言的理解还不是很深刻，具体点是对c++不够熟悉，所以对于公有私有的概念不是很清楚。包括在oc中。但是现在可以简单的将一个属性暴露出来然后通过另一个界面传参的方式进行操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 函数的封装。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;简单的说，以前用一个函数用了就用了，甚至在所有界面里都写那一个函数，这样是极其不合理的。&lt;/p&gt;

&lt;p&gt;在第二个项目中，我开始进行简单的函数封装，这样简化了很多代码。比如我在设置图片背景色的时候，进行了封装，只留了一个颜色的接口。这样每次调用的时候只需要一个函数就可以对图片的背景进行上色。&lt;/p&gt;

&lt;p&gt;毅哥和我说，如果一个函数用了两次以上，那么就可以对这个函数进行封装了。&lt;/p&gt;

&lt;p&gt;后期又封装了label根据文字宽度自适应高度函数的封装等等。学会函数的封装很大程度上减少了代码量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 界面传参。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是昨天迪哥和我说的很重要的一个问题。&lt;/p&gt;

&lt;p&gt;开发程序就必然会在两个界面之间进行参数的传递。&lt;/p&gt;

&lt;p&gt;举个例子，现在有A,B两个界面。我每次都想尽可能多的把B界面里的东西由A界面传进去，这样A界面就会有很多代码。但实际上这样是有问题的。&lt;/p&gt;

&lt;p&gt;这样会造成B界面会有很多冗余的代码，正确的是应该传最少的参数获取最多的东西。这是后期开发中需要重视的一部分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 宏定义的使用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在第一个项目中，其实已经用到了宏定义，但是宏定义没有很好的使用。&lt;/p&gt;

&lt;p&gt;在第二个项目中，逐步将色彩，url等等放在了宏定义中。&lt;/p&gt;

&lt;p&gt;宏定义会很大程度上方便项目的管理。所以后面还是要对宏定义做一些更好的优化，增加一些其他的东西。方便后期的开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 界面的分离和开源组件的使用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;举个简单的例子来说明这个问题。&lt;/p&gt;

&lt;p&gt;在一个有上部tabbar的地方，我是用了一个tableview来不停的重绘cell。这是极其不合理的。&lt;/p&gt;

&lt;p&gt;应该将这几个部分分为不同的tableview来写，虽然这样会增加代码量，但是这样方便后期的管理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 屏幕适配。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一点对于iOS开发者永远是一个头疼的问题。&lt;/p&gt;

&lt;p&gt;因为后期我们可能采用纯代码开发，减少xib的使用。所以不对xib进行赘述。&lt;/p&gt;

&lt;p&gt;毅哥对我函数的封装提出了一个问题，就是我在封装控件的时候，总是喜欢将尺寸固定。后期我在封装的时候要更多的注意center属性和屏幕尺寸，还有就是留出尺寸的接口来方便屏幕适配。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 基本概念的理解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实在刚开始的时候我无法理解nsmutablearray和nsarray有什么区别。直到毅哥和我解释两者区别之后。&lt;/p&gt;

&lt;p&gt;这对我在做第二个项目的时候提供了很多方便。&lt;/p&gt;

&lt;p&gt;因为本身oc里的变量属性比较多。所以后期还需要对这些基本的变量进行一个熟悉，方便后期使用。&lt;/p&gt;

&lt;p&gt;因为苹果现在要求支持64位操作系统，所以对于变量的取值范围更加的规范起来，这是后期需要注意的一个地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. 界面通信。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为iOS开发的时候经常需要界面传参，所以对于delegate或者block需要有一个更好的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. 命名。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我之所以写这点是为了表达我下次做项目一定好好起变量名字。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他存在的问题我就留着自己消化不发出来了。因为后期的项目可能会采用很多其他的开源组件，会解决很多我现在开发存在的问题。包括json数据解析等等。会逐渐将这些问题和解决方法依次叙述出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part--ios-1&quot;&gt;Part Ⅱ iOS开发后期学习安排&lt;/h2&gt;
&lt;p&gt;现在对于什么是编程，怎么做开发有了大概的概念了，一个好的程序员得写十万行代码，我估计我现在也就千行出头没多少。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;后期iOS开发的学习安排大概集中于以下几点。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.fmdb进行本地数据库的建立。这是寒假安排任务的时候就安排了的。&lt;/p&gt;

&lt;p&gt;2.delegate和block的使用，主要是block的使用。&lt;/p&gt;

&lt;p&gt;3.还需要大量阅读别人开源的代码还有迪哥的代码。这是作为一个初学者提升很好的一个办法，而且我现在基本上具备看懂别人开源代码的能力了。最近任务量不是很繁重，所以更多的需要学习。&lt;/p&gt;

&lt;p&gt;4.RAC的理解和使用。不详细叙述。&lt;/p&gt;

&lt;p&gt;5.对于之前用到的函数再次封装，对于能重复使用的函数要接着用。&lt;/p&gt;

&lt;p&gt;6.整理之前用到的方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大概就想到这些，后期重点还是阅读迪哥写的代码，自己尝试写一些东西。后面会有一段时间时间比较充裕，是一个重新回顾，学新东西，然后提升的好阶段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;基本内容就是这些，谢谢你的阅读，有什么问题尽管留言。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 19:39:16 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/03/22/ios-sumup-1.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/03/22/ios-sumup-1.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>用安卓和iPhone操作你的linux（需要校园wifi环境）</title>
        <description>&lt;h2 id=&quot;g&quot;&gt;写在2015.3.15   由于3G网络不能访问推迟发布&lt;/h2&gt;

&lt;p&gt;首先，很对不起。我博客都已经写好了，但是发现手机数据请求没法ssh。所以推迟了发布。&lt;/p&gt;

&lt;p&gt;具体为什么手机数据网络无法ssh我明天上课会问一下计算机网络的老师。&lt;/p&gt;

&lt;h2 id=&quot;g-1&quot;&gt;写在2015.3.17   3G网络不能访问的原因分析&lt;/h2&gt;
&lt;p&gt;计算机网络的老师没有回邮件，但是不想推迟发布了博客了。&lt;/p&gt;

&lt;p&gt;博客原文中很多地方写到可以用3G网络ssh，事实证明现在在寝室这样做是是不可能访问的的。3G网络是肯定可以ssh的，我后期会想其他办法来实现用3G网络远程访问。&lt;/p&gt;

&lt;h3 id=&quot;g-2&quot;&gt;3G网络无法访问的原因&lt;/h3&gt;

&lt;p&gt;昨天在写邮件的时候发哥给我分析了一下数据网络不能请求的原因。我觉得是这个问题，所以我就先写出来了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先先感谢发哥。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;简单的说，寝室路由器和手机3G不在一个大的网络下。&lt;/p&gt;

&lt;p&gt;我们的寝室路由器上面还有很多个路由器，我们只是那个路由器的一个分支，没有最终接入外网，在校园网访问应该是没有问题的。在那个最终介入整个外网的路由器上绑定我的端口号才可以。而我们的3G网络最终是接入整个大的互联网的。&lt;/p&gt;

&lt;p&gt;所以，需要搞定最上层的路由器找学校给我开一个端口，这样在教学楼用3G就可以访问了。但是这是不现实的。&lt;/p&gt;

&lt;p&gt;信安一班的同志们很抱歉，说好周日发博客教大家用的但是因为出了问题现在才发布。&lt;/p&gt;

&lt;p&gt;今天早上大概又想了一个可以远程访问的办法，我实现之后会发博客的。&lt;/p&gt;

&lt;p&gt;下面是14号的正文。当时写的，我将题目修改了，原文题目加了一个教学楼，其他内容我就不做修改了。因为除了不能在教室3G网络访问其他都是对的可以实现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果你还有什么疑问，欢迎留言，每条都会看。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;写在2015.3.14   博客正文&lt;/h2&gt;

&lt;h2 id=&quot;section-1&quot;&gt;起因：&lt;/h2&gt;

&lt;p&gt;因为学校开了unix操作系统的课。所以最近很多同学选了unix课或者去蹭unix课，使得unix突然变的十分火热。到处都在装虚拟机vmware。本来说写一篇文章简述怎么安装虚拟机的，但是觉得实在没有什么可写的，百度一下就差不多了。&lt;/p&gt;

&lt;p&gt;因为最近看到到处在装虚拟机觉得得玩点其他的，之后就想起来原来熊大大和bingo他们教我远程ssh访问ubuntu，于是就想倒腾了一下ssh。百度了一下发现安卓手机上也有可以进行ssh访问的软件，那么我现在只要把我的电脑绑定路由器端口，手机连上网，就可以在教室用手机访问我在寝室的ubuntu了~&lt;/p&gt;

&lt;p&gt;如果你想学习unix操作系统，安装虚拟机之后，这样也是一种很好的学习方式哦~&lt;/p&gt;

&lt;p&gt;整个过程很简单，没有什么很复杂的东西，如果你能看完会觉得这件事情非常实用。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最终的样子：&lt;/h2&gt;
&lt;p&gt;简单的说我实现了一个这样的功能，我截屏来说明，本人没有ipad所以就截一个安卓的和电脑的屏了。&lt;/p&gt;

&lt;p&gt;这是安卓手机上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-1.png&quot; alt=&quot;remotecontrol-linux-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是电脑上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-2.png&quot; alt=&quot;remotecontrol-linux-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，我在安卓手机上用命令行访问到了一台linux设备。这样即使上课没有电脑，我也可以用手机来操作我的电脑学习linux下的很多命令了，这样没有图形界面可以更好的强迫自己学习命令。而且可以进行代码的编写，感觉还是很不错的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;下面我开始介绍我用到的工具和方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;
&amp;gt; 安卓系统设备一台，或者iphone，ipad，一台电脑，需要接入互联网。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用到的软件：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;安卓：connectbot，或者juicessh（我下载了但是没搞明白怎么用）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;iPhone或者ipad：试过iterminal ssh tool，App store搜索ssh就可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;电脑：vmware，安装好ubuntu或者其他linux操作系。putty或者xshell进行ssh连接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;下面开始。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先还是要介绍一下ssh，我不用百度的话，依旧用我的理解来阐述ssh的含义。&lt;/p&gt;

&lt;p&gt;Ssh，security shell。安全的命令行。简单的说，只要给我主机的ip地址和端口号，给我访问主机的账户，我就可以远程用命令行来访问主机。之前看过毅哥在本地用putty连接阿里云进行服务器的调试，还是感觉挺帅气的。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;正式开始步骤说明&lt;/h2&gt;
&lt;p&gt;在你的虚拟机目录下，点击编辑虚拟机设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-3.png&quot; alt=&quot;remotecontrol-linux-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后选择网络适配器，桥接模式。如图所示（此过程需要将虚拟机关机，我这里设置好了就没有关机）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-4.png&quot; alt=&quot;remotecontrol-linux-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开ubuntu，安装ssh。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-5.png&quot; alt=&quot;remotecontrol-linux-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;网上很多说要输入命令查看是否有sshd，有的话说明ssh已经打开了。截图如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-6.png&quot; alt=&quot;remotecontrol-linux-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;反正我是直接再开启一次了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-7.png&quot; alt=&quot;remotecontrol-linux-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面就是查看本机的ip地址。如图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-8.png&quot; alt=&quot;remotecontrol-linux-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ssh默认的端口号是22。
这时候如果你的手机和电脑在一个局域网里，打开putty或者xshel或者是你手机上的connectbot已经可以访问了，在一个网络就行，&lt;strong&gt;室友都可以访问到。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-9.png&quot; alt=&quot;remotecontrol-linux-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里需要你的linux帐号和密码。我不多阐述。&lt;/p&gt;

&lt;p&gt;现在我们需要设置外网可以访问。&lt;/p&gt;

&lt;p&gt;为了安全我们先修改端口号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-10.png&quot; alt=&quot;remotecontrol-linux-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开之后添加我们要的端口号。默认的里面有22，先不慌删，后面确认其他端口可以访问再删。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-11.png&quot; alt=&quot;remotecontrol-linux-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里我遇到了很多问题，网上很多说这里restart一下ssh就行了，但是我试不行，修改端口号之后重启电脑才能生效。&lt;/p&gt;

&lt;p&gt;现在，我们基本完成了所有的准备工作，下一步就是绑定寝室路由器的端口了。&lt;/p&gt;

&lt;p&gt;我们寝室是TP-link。&lt;/p&gt;

&lt;p&gt;192.168.1.1 进入路由器界面。
选择转发规则虚拟服务器。然后添加新条目。（你的这里应该什么都没有）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-12.png&quot; alt=&quot;remotecontrol-linux-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入添加新条目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-13.png&quot; alt=&quot;remotecontrol-linux-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入ubuntu下你打开的端口，我刚刚打开的是3389，还有利用ifconfig获得的ip地址。
点击保存即可，不需要重新启动路由器。
之后进入路由器主界面。安全起见我划去了我们寝室的路由ip。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-14.png&quot; alt=&quot;remotecontrol-linux-14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IP地址就你路由器拨号上网之后的ip地址。
到这里基本就完成了所有的准备工作。&lt;/p&gt;

&lt;p&gt;下面我要用安卓手机来远程访问我的linux电脑了。Iphone用户类似操作，因为没有设备就不详细截图说明了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-15.png&quot; alt=&quot;remotecontrol-linux-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照用户名（你的linux下的用户名）和外网ip地址即路由器ip加上端口号。
然后按下虚拟键盘的回车。
选择yes。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\remotecontrol-linux\remotecontrol-linux-16.png&quot; alt=&quot;remotecontrol-linux-16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入密码之后就可以访问了！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外，connectbot下点击屏幕在键盘的左上角会出现ctrl键，ctrl+i是tab键。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;然后音量键是放大字体。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;至于在电脑上用putty和xshell访问我就不多叙述了。最后不要忘记删除你22的那个端口哦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;总之以后早上上课前可以把电脑打开，端口转发设置好，然后在教室访问就行了~~&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;存在两个问题我还有必要说明一下，一是我不知道手机流量访问的流量消耗情况，明天我会去试一下，还有就是ubuntu固定ip地址的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这些问题解决之后我会在空间和朋友圈进行详细的说明，或者是发博客来说明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;如果在整个过程中你遇到什么问题，可以给我留言，我会尽力帮你解决的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能看到这真的很谢谢你的支持，希望你能有收获。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果你觉得写得好，帮我把文章分享出去是对我最好的鼓励！&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Mar 2015 02:39:22 +0800</pubDate>
        <link>judi0713.github.io/linux/2015/03/16/remotecontrol-linux.html</link>
        <guid isPermaLink="true">judi0713.github.io/linux/2015/03/16/remotecontrol-linux.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>命令行git简单使用</title>
        <description>&lt;p&gt;&lt;strong&gt;早就说写一篇关于git使用的博客一直没写。今天下午休息，打了篮球和羽毛球。看了电影。现在要开始做点正事了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这篇文章可能关于git命令行的语句不多，但是我觉得都是我在搭建jekyll的过程中遇到的。我会尽可能的说明这些命令行的作用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因为git的操作比较多，还有什么分支合并新建分支什么的，还没有很好的去研究。这篇文章主要对简单的命令行进行叙述，一般上传代码合并代码是没有问题的。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;以下文章都是基于我个人的使用和理解，不喜勿喷。&lt;/h4&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开始正文&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git&quot;&gt;Git简介&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章不介绍github，介绍git命令行，但是有必要对git和github是什么进行一个说明。你可能听说过github，据说github是世界上最大的同性社交网站。当然是开玩笑的。简单的说，github是一个开放源代码保存的地方，github也是合作项目开发的首选地。&lt;/p&gt;

&lt;p&gt;那么git呢，git是一个仓库，一个你用来保存代码的地方。&lt;/p&gt;

&lt;p&gt;所以，当我在github上注册了帐号之后，我可以将我的代码上传到git上进行保存，也可以大家合用一个仓库来合作开发。&lt;/p&gt;

&lt;p&gt;当然，git本身是开放的，别人可以看到你的源代码，如果是想变成不开放的，那么你就需要像github付费了。你可以去coding看一看，coding提供了免费的git仓库。我们项目的开发都是用的coding。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-1&quot;&gt;Git命令行&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github官网上提供了&lt;a href=&quot;http://git-scm.com/downloads/guis&quot;&gt;图形界面&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;图形界面的使用比较简单，具体使用迪哥曾经写过一篇关于mac下sourcetree的使用。&lt;a href=&quot;http://bbs.uestc.edu.cn/forum.php?mod=viewthread&amp;amp;tid=1468187&quot;&gt;sourceTree git管理协同使用方法，mac下的git管理工具&lt;/a&gt;。可以对照看一下。在这里不对图形化界面进行详细介绍。&lt;/p&gt;

&lt;p&gt;因为很多时候还是需要git的命令行，下面将进行简单的git命令行使用。
我的环境是ubuntu14.04。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;sourcetree&quot;&gt;首先我介绍我们在使用sourcetree时的上传代码流程。命令行是相同的。&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;上传代码到合并代码到拉代码的主要过程是这样的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;add-&amp;gt;commit-&amp;gt;fetch-&amp;gt;pull-&amp;gt;push&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;换成中文&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;添加代码-&amp;gt;提交代码-&amp;gt;抓取代码-&amp;gt;拉取代码-&amp;gt;推送代码&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;添加代码对应git add&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提交代码对应git commit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;抓取代码对应git fetch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;拉取代码对应git pull&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推送代码对应git push&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面将逐步介绍这些命令。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-2&quot;&gt;安装git&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ubuntu下安装git的命令行是sudo apt-get install git，不多做解释。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-clone&quot;&gt;git clone&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;git clone是将github上的git仓库下载到本地。
每一个github都要相应的git地址。如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-1.png&quot; alt=&quot;git-easyuse-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命令很简单，在终端下到你想要的目录，然后git clone +url +目录就可以了。git clone后面是可以加参数的，但是我在使用过程中没有用过。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-2.png&quot; alt=&quot;git-easyuse-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我寒假clone vundle时用的命令，后面那一串是git clone的位置。
如果已经cd到你要clone的位置，直接git clone不用后面目录的参数就行了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-3&quot;&gt;Git帮助&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;命令 git help&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-3.png&quot; alt=&quot;git-easyuse-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-4.png&quot; alt=&quot;git-easyuse-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到所有的git命令。git help也是可以加参数的。具体查阅帮助或者文档了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-4&quot;&gt;git上传代码&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-5.png&quot; alt=&quot;git-easyuse-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就是主要这三条命令。我会详细说明这三条命令行的作用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-add&quot;&gt;首先第一条，git add。&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;git add后面可以直接加上目录，或者文件名。“.”在这里的意思就是当前目录下所有文件。&lt;/p&gt;

&lt;p&gt;举个例子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-6.png&quot; alt=&quot;git-easyuse-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git就会把我judi0713.github.com里所有文件全部添加了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;commit&quot;&gt;第二个，commit，提交。&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先说明参数的意思。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-7.png&quot; alt=&quot;git-easyuse-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;-a的意思就是提交所有改变的文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-8.png&quot; alt=&quot;git-easyuse-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;-m后面还需要加参数，就是提交信息。&lt;/p&gt;

&lt;p&gt;在commit时候必须要commit的信息。所以-m的参数是必须的。&lt;/p&gt;

&lt;p&gt;下面我开始具体说明。&lt;/p&gt;

&lt;p&gt;如果直接调用git commit。会进入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-9.png&quot; alt=&quot;git-easyuse-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你不小心进入这里，先输入一段信息即-m（你提交的内容）然后按F3（其实就是ctrl+o writeout）意思就是确认文件，如果不事先填写后面会无法commit。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-10.png&quot; alt=&quot;git-easyuse-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按下F3。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-11.png&quot; alt=&quot;git-easyuse-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后回车。回到之前的提交界面。Ctrl+x exit就可以了。
然后你修改的文件会出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-12.png&quot; alt=&quot;git-easyuse-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大功告成。&lt;/p&gt;

&lt;p&gt;一开始的时候我只用了git commit –m +msg&lt;/p&gt;

&lt;p&gt;但是有时候会出现文件没有全部提交的问题。具体我还不知道为什么，有可能是我一开add出现问题了。&lt;/p&gt;

&lt;p&gt;我选择的是git commit –a –m +msg。即一次性提交所有代码。这样就不用进入那个全是英文的界面了。&lt;/p&gt;

&lt;p&gt;可以看一下效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-13.png&quot; alt=&quot;git-easyuse-13&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-push-u-origin-master&quot;&gt;第三个git push –u origin master。&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-14.png&quot; alt=&quot;git-easyuse-14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不清楚-u含义，查了很多都加上了-u，具体我就不说明了。&lt;/p&gt;

&lt;p&gt;origin是远程主机。master是git的主分支。&lt;/p&gt;

&lt;p&gt;这样就可以将本地修改的代码全部上传到远程主机了。&lt;/p&gt;

&lt;p&gt;上传的时候需要输入你的github用户名和密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-15.png&quot; alt=&quot;git-easyuse-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到此为止是最主要的git命令行使用了。&lt;/p&gt;

&lt;p&gt;因为我使用的是jekyll是独立项目所以我没有拉代码这个步骤。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;fetch和pull的区别&lt;/strong&gt;在于fetch是看有没有别人远程推送的代码，并不进行合并。
pull的话直接就合并了，当然也可以省去fetch的步骤，不建议省去。
在pull代码到本地的时候会有本地的代码冲突。Git很人性化的会将代码进行比对。你需要看别人是不是修改了你的代码，然后进行对别人代码的删除或者自己代码的删除。然后重新commit。
其实这是很值得写的一个东西，具体等我进行命令行的git开发的时候再详细说明。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fetch的命令就是git fetch
pull的命令就是git pull
因为我个人只用过图形化界面的git没有尝试过命令行没法现身说法。如果以后我使用命令行的话会具体再说明的。&lt;/p&gt;

&lt;p&gt;下面再介绍一个很有意思的git命令行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;git-status&quot;&gt;git status&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看git现在的状态。
比我现在已经add过了。我调用git status。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-16.png&quot; alt=&quot;git-easyuse-16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在commit一下查看git status。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-easyuse/git-easyuse-17.png&quot; alt=&quot;git-easyuse-17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以查看此时我的git状态。感觉还是很不错的。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;其实我主要介绍的还是简单的git命令行使用，是我在搭建jekyll的时候所用到的。
还有很多我都没有介绍，比如revert，回滚。可以回到之前代码的状态。需要添加状态的id。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有分支，这个功能我真的没有很好的研究，有时间还是要把git研究一下。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有就是git rm删除文件等等。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我会在使用之后再写一篇博客对我没介绍的git命令进行说明。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实在是觉得git很好用，免费空间。而且作为技术人，学会上github真的很重要。特别感谢迪哥给我带进github的坑，这个同性恋交友网站让我收获很多东西。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以前上网没事了看看河畔，现在没事了上github explore。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;就这样，欢迎各位提意见！最好不要喷我。感谢你的支持！！&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天是大学特有的女生节。祝各位女孩们永远年轻漂亮。&lt;/p&gt;

&lt;p&gt;最主要的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;祝信安一班的七个女孩节日快乐。红包什么的都已经象征性的发了。礼物什么的如果班长买了你们就收，没买就算了。咱都那么熟了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;希望你们七个没找到下家的赶紧找下家。找到下家的幸福生活。生活也许很残酷，但是要以一个积极乐观的心态去面对。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;祝你们幸福啦~~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也祝所有女孩们，幸福，快乐。&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2015 21:44:00 +0800</pubDate>
        <link>judi0713.github.io/git/2015/03/07/git-easyuse.html</link>
        <guid isPermaLink="true">judi0713.github.io/git/2015/03/07/git-easyuse.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>寒假简述和新学期计划安排</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;寒假简述&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;寒假基本上完成简单的前端入门（其实我觉得还没有入门），熟悉了一下简单的html，css，js。然后把w3c上的jquery过了一遍。&lt;/li&gt;
  &lt;li&gt;用jekyll搭了一个免费的可以自定义的blog，用的还是jekyll的本身的模版。时间主要在环境配置上。博客现在具有评论功能。最多一天访问量七十多，去掉我自己点击的和重复的估计有六十左右吧。&lt;/li&gt;
  &lt;li&gt;熟悉 vim的插件管理包vundle的使用。&lt;/li&gt;
  &lt;li&gt;查找brackets的插件以及emmet的使用说明。&lt;/li&gt;
  &lt;li&gt;熟悉了简单的markdown语法，利用markdown写了几篇文章。&lt;/li&gt;
  &lt;li&gt;其他的就是零零散散的在做。比如复习了一点点点点的数据结构。比如发现有一门叫做haskell的语言（它就是数学，但是它太牛逼，没记错快排连结构体七行的样子，后面有时间会研究研究它，函数式编程几十年都没死，还在慢慢影响现代编程，必然有它的道理）。比如，github上又发现了一些和ios有关的资源回学校之后还是要慢慢研究一下。&lt;/li&gt;
  &lt;li&gt;回忆了一些事情，然后觉得还是要充实自己。不要成为像谁谁那样的人，要成为自己。&lt;/li&gt;
  &lt;li&gt;特别开心的看了好多场NBA，特别开心的又见到了很多同学，特别开心的互粉了一个很喜欢的广播主播，特别开心的吃了很多好吃的，特别开心的每天睡很长时间，特别开心的参与了各种家庭聚会，特别开心见着我哥（每次见我哥又学到很多东西），特别开心的老妈坚持锻炼，特别不开心巨老师天天在外面喝不沾家不锻炼。希望巨老师以后有所改观。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;寒假计划基本上完成个六七成，毕竟时间短而且过年，我给自己的寒假评级评个B-吧。
现在有点后悔大一没有好好学习把成绩搞好，不过现在这样也挺好的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;新学期计划和安排&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;技术上&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;继续ios的学习，这次明确一下下学期的任务，无论如何要抽出时间学习reactivecocoa。无论是问迪哥还是自己上网找demo。相应的熟悉MVVM开发模式。&lt;/li&gt;
  &lt;li&gt;尝试纯代码布局的界面和纯代码的自动布局。&lt;/li&gt;
  &lt;li&gt;巧大在微信公众号上定期会发一些ios进阶的东西，有必要把巧大的文章好好看看，还有其他ios开发者的一些经验分享。&lt;/li&gt;
  &lt;li&gt;整理git的使用方式，这是在家一直想做没做的，主要是命令行还有git其他的功能。&lt;/li&gt;
  &lt;li&gt;继续学习如何使用github，github是个好地方，写程序，减少重复造轮子。&lt;/li&gt;
  &lt;li&gt;如果有好的技术上的东西，要通过写blog发出来，我每次总想我用了那么多别人的东西，我也要为这个开源的大社区做一点自己的贡献。&lt;/li&gt;
  &lt;li&gt;继续维护我的jekyll，时常发一些文章，无论是写给行内的还是写给行外的，可能开学之后每篇博客的质量会上去但是字数和数量会慢慢简书。还有就是慢慢的美化博客。&lt;/li&gt;
  &lt;li&gt;每周要抽时间复习数据结构，然后学习一点算法上的东西，这个东西有时候写代码说用就用到了所以还是有必要补一下的。&lt;/li&gt;
  &lt;li&gt;前端，有时间还是要慢慢的学起来，尽快的成长能帮忙分担迪哥和豪哥和斌哥就尽量去分担，毕竟最小，多学一点多做一点。&lt;/li&gt;
  &lt;li&gt;最后当然是跟着迪哥继续学习东西了~~&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;学习上&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;好好学习，我的好好学习是指上课少玩平板和手机，课不管讲的怎么样，还是偶尔听一听。能不翘还是不翘。&lt;/li&gt;
  &lt;li&gt;数据库趁斌哥现在还不太忙多问问，趁早把它搞定了。&lt;/li&gt;
  &lt;li&gt;多读点其他的书，读点历史书或者其他的。&lt;/li&gt;
  &lt;li&gt;参加六级考试，这是听香哥的。不能把英语落下，英语搞好英文文档才能看好。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;生活上&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;吃好喝好睡好，睡好最重要，要早点睡。&lt;/li&gt;
  &lt;li&gt;每周末如果我姜哥在还是要拉着我哥打打球，平常晚上的时候九点多的样子如果没有事情，去锻炼身体。&lt;/li&gt;
  &lt;li&gt;少浪。&lt;/li&gt;
  &lt;li&gt;有合适的志同道合的女性同志就找一个。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;下学期除了技术上的提升会更多的把主要的时间精力放在班级上，要尽量的把班级调动起来。不论是学习还是搞技术。我会重新努力一学期。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我大概会放弃我当导生的梦想了，无论谁干班长，我都要协助把班级搞好了。如果连自己的班级都搞不好，我觉得我不会是一个称职的导生。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信安一班是我觉得上学到现在潜力最大的最欢乐的班级没有之一。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以如果你是信安一班的娃，你看到这里，希望你下学期能支持班委的和我的工作，我不会和你客气的。你可以不给班委面子但是你不能不给我面子。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;&lt;em&gt;大概暂时就能想到这些，祝各位开学愉快~在新的一学期身体健康~&lt;/em&gt;&lt;/h2&gt;
</description>
        <pubDate>Thu, 26 Feb 2015 20:29:00 +0800</pubDate>
        <link>judi0713.github.io/life/2015/02/26/newterm-goal.html</link>
        <guid isPermaLink="true">judi0713.github.io/life/2015/02/26/newterm-goal.html</guid>
        
        
        <category>life</category>
        
      </item>
    
  </channel>
</rss>
