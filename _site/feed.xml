<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我想回馈iOS开发这个大社区，所以我决定写博客。 写的不好，还请见谅。
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 25 Mar 2017 17:05:11 +0800</pubDate>
    <lastBuildDate>Sat, 25 Mar 2017 17:05:11 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>我的 Kindle 使用技巧</title>
        <description>&lt;p&gt;上学期买了 Kindle，于是 Kindle 就成为了我日常必备的物件…而且我觉得 Kindle 是我买过的超值的一个东西，所以有必要把我的一些使用心得写一写。&lt;/p&gt;

&lt;p&gt;首先要解释一下，当你拿到 Kindle 的时候，会需要一个亚马逊的账号，除此之外每个 Kindle 还会对应一个邮箱（邮箱名可以修改），一般是 @kindle.cn 结尾的。可以在你的 Kindle 设置里或者在亚马逊官网找到。这个邮箱的用途之大。如果你想要什么书的话，直接用邮箱发个附件到你的 Kindle 邮箱，然后 Kindle 连上网就能自动下载这本书了。还可以在主题加上 convert，这时候要发 pdf 格式的话会自动转存 Kindle 格式，不过不推荐，pdf 格式会经常转乱。&lt;/p&gt;

&lt;p&gt;还有要解释的，Kindle 的格式是 azw3 的，mobi 格式也能被 Kindle 读取，pdf 格式也可以，但是 pdf 在 Kindle 上阅读体验只差，因为字太小没法调整。如果是前两种格式的话，可以在 Kindle 中自动调整字体大小，还能重新排版，体验之好。所以如果看 pdf ，还是买一个 iPad Pro 吧。&lt;/p&gt;

&lt;p&gt;解释完了，下面强势安利几个能用得上，可以让你的 Kindle 使用效率翻上 N 翻的东西。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号亚马逊kindle服务号-微信号cn_kindle&quot;&gt;微信公众号：亚马逊Kindle服务号 微信号：cn_Kindle&lt;/h2&gt;

&lt;p&gt;这是亚马逊官方的微信公众号，除了会推荐一些书之外，还组织过读书的活动。不过这个公众号最大的杀器就是，和你的专属 Kindle 邮箱绑定之后，可以将微信公众号的文章推送到你的 Kindle 上。对于我这样一个微信公众号重度使用者，是非常有用的。&lt;/p&gt;

&lt;p&gt;有时候来不及看了就直接传到 Kindle 上。具体使用就是长按你要看的公众号，选择”…“，就会有一个“亚马逊Kindle服务号的”，发送就可以了。也可以打开文章在右上角选择”…“。具体的使用方法关注之后可以自己查。&lt;/p&gt;

&lt;p&gt;除此之外，应该还可以在微信端买书之后直接推送到 Kindle，因我都是用电脑，所以还试过这个功能。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号kindle电子书库-微信号kindle10000&quot;&gt;微信公众号：Kindle电子书库 微信号：kindle10000&lt;/h2&gt;

&lt;p&gt;这个其实不该安利的，但是作为 Kindle 新用户可以使用玩玩。因为这其实就是一个盗版图书的汇集地…我刚开始的时候用，最近都买正版了。所以我不会很详细的说怎么使用，需要的自己去关注就好。&lt;/p&gt;

&lt;p&gt;简单的说就是，它会用你的邮箱给你的 Kindle 邮箱发邮件。具体的绑定不难，就是利用了邮箱协议。关注之后它的说明非常之详细。&lt;/p&gt;

&lt;p&gt;这个的好处在于，你想看什么书直接在微信里输它就会帮你查找，如果确定要看，那么点击推送等一会就可以在你的 Kindle 上看到了。使用之方便是难以言表的。&lt;/p&gt;

&lt;p&gt;除此之外，还有 Kindle杂志公社，微信号：Mag10000，是一家的，可以推送一些杂志到你的 Kindle 上。&lt;/p&gt;

&lt;h2 id=&quot;kindle-特价书&quot;&gt;&lt;a href=&quot;http://t.bookdna.cn/&quot;&gt;Kindle 特价书&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个网站不知道是谁维护的，在知乎上看到之后开始变为日常每天看的网站…&lt;/p&gt;

&lt;p&gt;有两个原因推荐这个网站，一是有时候不知道想看什么书，这样逛逛会发现不少好书。二是确实便宜啊，比如我买的《中国历史那些事儿系列套装》，一共是 明朝那些事儿（全7册）、这里曾经是汉朝（全6册）、唐史并不如烟（全5册）、如果这是宋史（全10册），原价是 88.59 元，我看到特价的时候，只用了 13.99 元就入了那么多书，还是比较划算的。&lt;/p&gt;

&lt;h2 id=&quot;calibre-软件--支持-win-mac-linux&quot;&gt;calibre 软件 —— 支持 Win Mac Linux&lt;/h2&gt;

&lt;p&gt;这个软件是一个电子书管理软件，可以对电子书进行格式转换等一系列操作。还可以直接在电脑上看 azw 格式和 mobi 格式。除此之外还支持制作电子书，曾经用网上提供的 pocket 接口制作了我 pocket 里面收藏的网页放到 Kindle 上看。&lt;/p&gt;

&lt;p&gt;最近发现了 calibre 的新功能。因为在家的时候我在 Kindle 特价书 上会买好多书，想给我妈还有奶奶都搞一份，毕竟他们也算是出了钱的…但是亚马逊官方对于购买的书籍都加了 DRM 保护，不能在购买者之外的 Kindle 设备上看。这里不具体一步一步说怎么去除 DRM 保护了，用到的工具 &lt;a href=&quot;https://github.com/apprenticeharper/DeDRM_tools&quot;&gt;DeDRM_tools&lt;/a&gt;，可以安装 calibre 插件，然后将 azw 格式转化为 mobi 格式就可以在其他设备上看了。&lt;/p&gt;

&lt;h2 id=&quot;push-to-kindle--chrome-插件&quot;&gt;&lt;a href=&quot;http://fivefilters.org/kindle-it/&quot;&gt;Push to Kindle&lt;/a&gt; —— Chrome 插件&lt;/h2&gt;

&lt;p&gt;这个软件是有 Chrome 插件的，绑定邮箱之后可以直接将网页推送到 Kindle 上看。解决了 Pocket 上面的东西想推送到 Kindle 的问题。&lt;/p&gt;

&lt;p&gt;但是如果就这么点功能未免太什么了。Push to Kindle 个人觉得最厉害的是提供了可以编辑的格式。它在抓取网页之后会显示一个 Preview，如图。如果你对排版不满意，可以点击 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt;，进入之后，把你想看的网页内容复制进来，对其中的格式进行排版再推送到 Kindle 上，几乎完美解决了不同网页在 Kindle 上阅读体验的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kindle.jpeg&quot; alt=&quot;kindle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你还可以用 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt; 制作 PDF 和 EPUB。里面的内容当然是想是什么就是什么了。我曾经还放过代码，然后推送到 Kindle 上…十分不建议用 Kindle 看代码。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;如果你想在 Kindle 上看一些 RSS，可以上&lt;a href=&quot;https://www.dogear.cn/&quot;&gt;狗耳朵&lt;/a&gt;，里面提供了很多网站的 RSS，每天定点推送到 Kindle 上，非常方便。&lt;/p&gt;

&lt;p&gt;Kindle 自带了查词功能，中英文都有。长按就可以了。&lt;/p&gt;

&lt;p&gt;除此之外 Kindle 还可以制作剪切板，看到好的句子可以直接记录在剪切板中，可以用电脑拷出来。具体方法可以网上查一查。&lt;/p&gt;

&lt;p&gt;据说现在 Kindle 还支持微信分享了，没有用过。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;感谢很多人在知乎以及其他网站上分享了很多 Kindle 的使用技巧，我只是针对我自己进行了一些选择，网上还有很多其他的，可以没事查一查。&lt;/p&gt;

&lt;p&gt;Kindle 给我的改变比较大，上学期看了好多书，很多玩手机的时间都看书了，感觉还是学到了不少东西的，看书心里愧疚感也会减少。&lt;/p&gt;

&lt;p&gt;俗话说得好。&lt;/p&gt;

&lt;p&gt;“平板穷三代，Kindle 富一生。”&lt;/p&gt;

&lt;p&gt;愿买了 Kindle 的你可以重新爱上读书。&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/09/06/kindle.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/09/06/kindle.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>工作室总结</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这个总结，想到哪写到哪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大三下的一学期，感觉整个人和工作室融合的非常之密切。因为接手工作室已经大三下了，大三下存在几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果招新，那么他们只有一学期的成长时间。&lt;/li&gt;
  &lt;li&gt;工作室濒临垮台。&lt;/li&gt;
  &lt;li&gt;我自身的时间有限，不可能全部精力放在工作室上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;面对上面两个问题，在学期初给自己定了几个目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;招人，工作室不能死。&lt;/li&gt;
  &lt;li&gt;如果招到人，尽我最大努力去教他们一些技术上的东西。&lt;/li&gt;
  &lt;li&gt;尽可能多在工作室呆着。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于招人，我只能说很幸运，在詹导可姐还有各位导生的大力帮助下，我们工作室招人的时候尽然出现了工作室坐不下的情况。当然这里大二占了大多数。也有大一的。当时和闫哥想，这么多人，能最后坚持下来的有多少呢。事实证明，淘汰率依然很高，最终留下的人工作室的位置占了一半。很多人坚持了几星期，也有很多人坚持了大半学期，可能因为课业问题放弃了。最终留下的这些人，我相信他们或多或少学到了很多东西。&lt;/p&gt;

&lt;p&gt;如何用一学期的时间去让招来的人在技术上有一个质的飞越，这是我所思考的。对于这一点，我也在学期初定下了几个目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;教会他们用谷歌，用 stackoverflow&lt;/li&gt;
  &lt;li&gt;多看英文资料，多用英文搜索&lt;/li&gt;
  &lt;li&gt;教会他们用 GitHub&lt;/li&gt;
  &lt;li&gt;教会他们看源码&lt;/li&gt;
  &lt;li&gt;如果时间充足，补充一些函数式编程方面的知识&lt;/li&gt;
  &lt;li&gt;后台从 Java 全面换向 Ruby&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实上面几个实现起来说是简单，其实比我预想的要难一点。就拿用谷歌来说，为了让他们用谷歌，我硬是花大价钱买了路由器，连上路由器就能翻墙。但是难点在于，十几年的百度习惯不可能说改就改。再比如多看英文，有几个人能踏踏实实看英文？大部分人我相信对于英文还是有厌恶感的。看英文都厌烦，用全英文的搜索更是难。看英文烦，那么用stackoverflow和GitHub就会烦。再加上刚学，技术实力达不到，看源码也是很费劲的。&lt;/p&gt;

&lt;p&gt;同时对于我自身来说，面对这么多人，加上我和闫哥还想做一些事情，加上课业，就显得很麻烦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在初期的时候，我的精力大多放在培养新人，但是很多时候培养的并不好，我自身的原因也很大，这是我所没有想到的，包括我和闫哥的配合上，也存在很大的问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于我存在的问题，我去学院工作室和许聚龙聊了一次，和詹导聊了一次。也进行过很多思考，并和闫哥讨论，重新分工等等，做了一些改变。但是由于各方面，更多是自己水平不足能力有限，导致工作室很多事务出现了一些拖延等，这是我所需要在后面的日子检讨的。&lt;/p&gt;

&lt;p&gt;除这些之外，针对工作室之前的问题，我也有以下几个想做改进的地方：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;工作室不是全部学技术的地方，大家的感情也很重要，尤其是负责人和下面人的关系。是为了别人更好，而不是压榨大于感情。&lt;/li&gt;
  &lt;li&gt;如果实现盈利，钱大家分，无论创业也好，不创业也好，根据劳动力来发工资。作为项目负责人，可以多拿，但是还是要秉承不压榨。&lt;/li&gt;
  &lt;li&gt;对于盈利的大部分，作为工作室的经费，用于聚餐，学弟学妹们接手工作室之后使用。不会什么都不留下就离开工作室。&lt;/li&gt;
  &lt;li&gt;我们技术很牛逼，但不是最牛逼的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上几点，说我是隐射也好，什么也好，是我想做的一些改变。比如第二点，如果一个项目10万，最后分到真正开发人员手里就两三千甚至更少，不知道还好，如果知道，开发人员心里会怎么想，还能不能踏踏实实的跟着boss干。我不是说不可以压榨，压榨也有一个度。我经历的度，未免是我在学校那么工作室里看到压榨比例最高的了。比如第一点，如果我发自肺腑愿意跟着某个boss干，boss却不给予真心相对，我相信即使是创业团队，也不应该吧。我更是觉得，创业，靠的是大家拧成一股绳，各自分散，能干什么呢？技术也是一样，BAT 再厉害，做不到踏踏实实的去静下来钻研一个技术，阅读源码，技术永远不会提高。&lt;/p&gt;

&lt;p&gt;这是我想去改变的，也是我希望后面工作室的人可以去改变的。&lt;/p&gt;

&lt;p&gt;对于我所提到的上面提到的四方面的目标，这学期基本完成任务。&lt;/p&gt;

&lt;p&gt;工作室没死，活的很好，我们人现在也不少，我也在这学期尽可能的在工作室呆上更多的时间。而且，如果说创业，核心的人肯定是有了。&lt;/p&gt;

&lt;p&gt;甚至这学期最最厉害的，可以说是我们大三的几个，除了我，都找到了很好的实习。&lt;strong&gt;琪姐去了腾讯，闫哥去了搜狐，金妮去了百词斩。&lt;/strong&gt;不能说和我有很大的关系，但是也有那么一点关系吧。这是后面可以去很骄傲的说的，也是工作室很厉害的一个体现。&lt;/p&gt;

&lt;p&gt;在技术上再多说一些。我在用一学期的时间把工作室打造的可以去创业，如果他们有这个新的话。&lt;/p&gt;

&lt;p&gt;举几个例子来说，我们的后台从 Ruby 换到了 Java，这一点杜奎奎的功不可没。Ruby 太适合创业了。再比如，解决问题的能力，经过我一学期疯狂的洗脑，现在虽然很多人不愿意用英文搜谷歌，但是也愿意用中文搜谷歌了。这就意味着，他们解决问题的能力会比一般人强上一大截。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;教会他们用谷歌，用 stackoverflow&lt;/li&gt;
  &lt;li&gt;多看英文资料，多用英文搜索&lt;/li&gt;
  &lt;li&gt;教会他们用 GitHub&lt;/li&gt;
  &lt;li&gt;教会他们看源码&lt;/li&gt;
  &lt;li&gt;如果时间充足，补充一些函数式编程方面的知识&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于我定下的技术上 1-6 的实现，基本上是比较圆满的了。下面分别来说一下。&lt;/p&gt;

&lt;p&gt;对于第一点，除了让工作室的无线网直接可以上谷歌之外，我在最开始的时候经常教他们如何去debug，我是做 iOS 的，但是利用谷歌和stackoverflow，可以很好的弥补技术栈的缺失。比如给张瑞调bug的时候，调了几次，他就意识到，原来英文搜索那么厉害，那么牛逼。在这一点上，我还举行过分享，来证明谷歌比百度好。&lt;/p&gt;

&lt;p&gt;对于 GitHub 的使用，因为没来及做分享，但是花时间写了一篇博客，质量个人感觉还比较高。&lt;/p&gt;

&lt;p&gt;看源码这一点，由于很多能力上的问题，他们的水平可能暂时还打不到，但是我每天说每天说，也很好的给他们洗脑了。&lt;/p&gt;

&lt;p&gt;最后一点，我也进行了分享，给他们说了一点函数式的东西。&lt;/p&gt;

&lt;p&gt;除此之外，我们经常聚餐，我常说，我这学期请你们吃饭的次数，顶上过去我在工作室吃饭次数的总和了，还都是工作室掏钱。我自以为和他们处的都不错，至少我在用心的对待他们，这就可以了。&lt;/p&gt;

&lt;p&gt;这学期做了一个项目，对于分成，很负责人的说，我拿的也就比他们多一两百块钱而已…因为我从对接到各个部分都参与了。剩下的钱，除了聚餐之外，都留给他们用作日常开销了。&lt;/p&gt;

&lt;p&gt;比较负责任的说，算是基本完成了预期的目标。&lt;/p&gt;

&lt;p&gt;中间有一次和迪哥聊了一下，迪哥说我们没有魄力了，不去做东西了，对此我想解释一下。&lt;/p&gt;

&lt;p&gt;首先来说，工作室之前留下的坑，稍微有点大了。技术上，人力上，成长上，都存在很大的问题，我在填，而且我想把这群娃带好，我用了一年半的时间来到现在的水平，我需要用一学期的时间让他们达到，这是需要时间的。而且，工作室不能死在我们手上，说是要交要交，真的就交了？不现实。创业也好，做东西也好，需要看情况来做。不是我不想做，用一学期的时间做别人两学期的事情，这是很耗费精力的。&lt;/p&gt;

&lt;p&gt;当然，这只是说辞，我说了我也存在一些问题，确实也存在，这是我要去改变的，人无完人，我也不是样样精通，所以这学期有什么做的不好的，也需要一些谅解。&lt;/p&gt;

&lt;p&gt;最后还想说一点，给现在的纯技术的工作室。做应用做网站想创业，可以，当然可以，但是难度在逐渐变大，如果有机会我还负责工作室，给我一学期加两个月的时间，我绝对带这个工作室转型。&lt;/p&gt;

&lt;p&gt;下学期，工作室需要过渡的后面的娃们去做了，我也已经尽我最大的努力去给他们营造一个更好的环境和技术栈了。希望他们能很好的发展。&lt;/p&gt;

&lt;p&gt;不过后面的事情谁知道呢？&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/26/cm.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/26/cm.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>大三下学期总结</title>
        <description>&lt;p&gt;有些个文章总得写。&lt;/p&gt;

&lt;p&gt;大三下过的实在是充实到不能更充实。课程是一方面，工作室是一方面，当然这两方面就足够我应付的了。偶尔在加参加个什么比赛，日子就过的浑浑噩噩了。&lt;/p&gt;

&lt;p&gt;再加上大三下，不能保研又不能出国，上课自然而然就显得开始放荡不羁。每天泡在电脑跟前的时间实在是创下了新的记录。我的很多改变来自于工作室，工作室也有很多改变来自于我。这是后话。&lt;/p&gt;

&lt;p&gt;其实大三下是成长比较快的一学期，因为之前的一年半在工作室和学长创业，实在是见到了很多让人觉得心中有力又不知道怎么去表述的感觉。长期的外包做的我每天除了哭累还是哭累。以至于在工作室的时候隔三差五就和琪姐说不想干了。&lt;/p&gt;

&lt;p&gt;但是痛苦总是让人可以有很多蜕变，经历过很多委屈很多不开心，会开始认清这个世界残酷的一面。你愿意掏心掏肺跟着别人干，别人可不会这么觉得，你是下属，就是要压榨你。当然我相信这是个例。当然我希望现实社会这也是个例。&lt;/p&gt;

&lt;p&gt;技术上也是一样，经历了一年半的外包，几乎是全靠自己不断的琢磨，开始逐渐找到正确的学习方式，也开始把自己的一些弯路给小学弟们分享。这也是后话了。&lt;/p&gt;

&lt;p&gt;很久没去做管理才发现自己这方面的才能需要更多的去锻炼了。这学期买了kindle，看了很多书，这一点是这学期非常满意的，看了很多书对自己的各方面都是一个提升的过程。后面这一块也是需要加强的。读书不只是会让个人能力提高，还可以对很多事情的看法产生一个新的理解。&lt;/p&gt;

&lt;p&gt;学习上实在是没啥好说的。这学期精力大多放在工作室上，除了自己学了Swift，参与了T沙龙之外，技术上说实话实在是没有什么提高。倒是各方面都涉及了一点，作为工作室负责人，你不得不去从前端会到后台再到两个客户端。包括我一直很想学的Haskell，这学期也重新捡起来开始学了。暑假也学了一部分。&lt;/p&gt;

&lt;p&gt;这学期还开了公众号，在写作上重新给自己定了目标。也算是大学后面的一个目标。不靠技术吃饭，靠写文字吃饭。如果能做到我会很开心的。&lt;/p&gt;

&lt;p&gt;后面的打算，逐渐打算转方向，计算机的一切，最终都来源于更高深的理论基础，所以后面的重心会更偏向理论一点。&lt;/p&gt;

&lt;p&gt;之前都是感谢信安1班，这学期很好的是，我们每周都会一起打篮球，没事窜寝室闲扯。大家一起锻炼总是好的。这学期几乎是跑了一学期的步，也是我很值得骄傲的一点。&lt;/p&gt;

&lt;p&gt;这学期还要感谢工作室的小学弟们和小学妹们，尤其闫哥琪姐还有金尼。因为我可以自豪的说，我们工作室出了一个搜狐，一个腾讯，一个百词斩，都和我有关系，哈哈。他们的努力是必然的，我的协助也是有一定帮助的这不能否认。&lt;/p&gt;

&lt;p&gt;在工作室看到很多小姑娘总是好的，枯燥的生活总得有点色彩。小学弟们也很努力，至少我现在可以比较放心的觉得工作室不会死了。这也是后话了。&lt;/p&gt;

&lt;p&gt;总之。&lt;/p&gt;

&lt;p&gt;这一学期实在是充实的让我觉得瞬间就没了。&lt;/p&gt;

&lt;p&gt;依旧。&lt;/p&gt;

&lt;p&gt;各种感谢！深鞠躬！爱你们！&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/22/year3-second-term.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/22/year3-second-term.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Huginn 安装备注（持续更新）</title>
        <description>&lt;h2 id=&quot;安装准备工作&quot;&gt;安装准备工作&lt;/h2&gt;

&lt;p&gt;Huginn 的官方安装指南全部步骤已经经过测试，建议安装时直接复制官方所提供的指令进行安装。如果遇到问题，请查看最下面的 &lt;strong&gt;错误解决方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;对于大多数服务器来说，由于配置不够，基本都会出现 “Cannot allocate memory” 问题，也请查看 &lt;strong&gt;错误解决方法&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;1-需要在开始的时候设置主机语言&quot;&gt;1. 需要在开始的时候设置主机语言&lt;/h3&gt;

&lt;p&gt;如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是&lt;/p&gt;

&lt;p&gt;export LC_ALL=en_US.UTF-8 （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言）
export LANGUAGE=en_US.UTF-8&lt;/p&gt;

&lt;h3 id=&quot;2-需要设置时区&quot;&gt;2. 需要设置时区&lt;/h3&gt;

&lt;p&gt;不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。&lt;/p&gt;

&lt;p&gt;sudo dpkg-reconfigure tzdata&lt;/p&gt;

&lt;p&gt;在Huginn官方的安装wiki中，其实有很多安装问题没有具体列出，我在上一篇博客中做了一些总结。在这篇博客中，我会做成一个安装问题的集合。以方便各位的安装。&lt;/p&gt;

&lt;h2 id=&quot;官方-wiki-部分修正以及注释&quot;&gt;官方 wiki 部分修正以及注释&lt;/h2&gt;

&lt;h3 id=&quot;1-官方最开始有一步-import-nodejs-repository&quot;&gt;1. 官方最开始有一步 Import node.js repository…&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;curl -sL https://deb.nodesource.com/setup_0.12&lt;/td&gt;
      &lt;td&gt;sudo bash -&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。&lt;/p&gt;

&lt;p&gt;因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。&lt;/p&gt;

&lt;h3 id=&quot;2-install-init-script&quot;&gt;2. Install Init Script&lt;/h3&gt;

&lt;p&gt;在这一步中建议直接把&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# web: bundle exec unicorn -c config/unicorn.rb
# jobs: bundle exec rails runner bin/threaded.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这两行的 # 去掉的。&lt;/p&gt;

&lt;h3 id=&quot;3-配置-nginx&quot;&gt;3. 配置 nginx&lt;/h3&gt;

&lt;p&gt;YOUR_SERVER_FQDN 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。&lt;/p&gt;

&lt;p&gt;备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。
作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。&lt;/p&gt;

&lt;h3 id=&quot;4-mysql-安装时不建议装-mysql_secure_installation&quot;&gt;4. Mysql 安装时不建议装 mysql_secure_installation&lt;/h3&gt;

&lt;p&gt;会加强你的密码强度..个人觉得太费事了。&lt;/p&gt;

&lt;h3 id=&quot;5-install-gems-如果报错执行-bundle-install&quot;&gt;5. Install Gems 如果报错，执行 bundle install&lt;/h3&gt;

&lt;p&gt;如标题&lt;/p&gt;

&lt;h2 id=&quot;错误解决方法&quot;&gt;错误解决方法&lt;/h2&gt;

&lt;h3 id=&quot;1-全部安装完毕web打开-css-不显示&quot;&gt;1. 全部安装完毕web打开 css 不显示&lt;/h3&gt;

&lt;p&gt;Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cantino/huginn/issues/1581&quot;&gt;css and image is not load&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-在-bundle-install-的时候显示-cannot-allocate-memory-等一系列和memory相关的报错&quot;&gt;2. 在 bundle install 的时候显示 “Cannot allocate memory” 等一系列和memory相关的报错&lt;/h3&gt;

&lt;p&gt;简单的说，swap 不够了。具体方法见 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;How To Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-mysql-设置-innodb-出现-unknown-system-variable-storage_engine&quot;&gt;3. Mysql 设置 Innodb 出现 ‘Unknown system variable ‘storage_engine’’&lt;/h3&gt;

&lt;p&gt;直接在/etc/mysql/my.cnf 中设置&lt;/p&gt;

&lt;p&gt;[mysqld]
default-storage-engine = InnoDB&lt;/p&gt;

&lt;p&gt;参见：&lt;a href=&quot;http://dba.stackexchange.com/questions/101908/migrate-jira-to-mysql-unknown-system-variable-storage-engine&quot;&gt;Migrate Jira to MySql - Unknown system variable ‘storage_engine’&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/10/huginn-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/10/huginn-install.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>让所有网页变成RSS —— Huginn</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;如果你不知道什么是 RSS，赶紧去查查是什么然后用起来吧，相信我，用了就再也离不开了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我是一个重度 RSS 使用者，一般来说，我获取信息有微博，微信，邮件，还有就是 RSS 。每次打开 Chrome 之后第一个打开的就是 Feedly，看看有没有新的内容更新，省去我了一次性打开多个网站的麻烦。但是问题来了，有些网站没有 RSS 怎么办？&lt;/p&gt;

&lt;p&gt;前几天在&lt;a href=&quot;http://liqi.io/&quot;&gt;利器&lt;/a&gt;的群里，看到有在讨论一个叫 &lt;a href=&quot;https://github.com/cantino/huginn&quot;&gt;Huginn&lt;/a&gt; 的东西，一个叫祥子的朋友还很热心的给大家解答一些关于这个的问题，我稍微查了查，发现这个东西可以解决我一直的一个痛点，就决定花时间来倒腾一下。&lt;/p&gt;

&lt;p&gt;Huginn 是一个 Github 的开源项目，已经上万 Star 了。简单的说这个东西是一个 IFTTT 形式的东西，可以把所有网页转换成 RSS 输出。更简单的说，就是工作流形式，类似于 iPhone 上的 Workflow。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;安装有很多的方式，官方提了有 Heroku，docker，还有服务器。&lt;/p&gt;

&lt;p&gt;祥子专门写了文章介绍怎么利用 Heroku 来安装。&lt;a href=&quot;http://www.jianshu.com/p/2e6e3f845bc3&quot;&gt;Huginn安装教程—建立你自己的IFTTT&lt;/a&gt;，写的非常详细，需要的可以去看这个。&lt;/p&gt;

&lt;p&gt;我是用我日本的 vps 来搭建的，但是由于官方的文档实在是太详细了…导致我想写安装发现没啥好写的，我就把遇到的几个问题略微叙述一下。&lt;/p&gt;

&lt;h3 id=&quot;官方文档安装教程地址&quot;&gt;&lt;a href=&quot;https://github.com/cantino/huginn/blob/master/doc/manual/installation.md&quot;&gt;官方文档安装教程地址&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;坑1-官方最开始有一步-import-nodejs-repository&quot;&gt;坑1. 官方最开始有一步 Import node.js repository…&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install nodejs&lt;/code&gt; 就可以了。&lt;/p&gt;

&lt;p&gt;因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。&lt;/p&gt;

&lt;h3 id=&quot;坑2-需要在开始的时候设置主机语言&quot;&gt;坑2. 需要在开始的时候设置主机语言&lt;/h3&gt;

&lt;p&gt;如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export LC_ALL=en_US.UTF-8&lt;/code&gt; （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言）&lt;/p&gt;

&lt;h3 id=&quot;坑3-需要设置时区&quot;&gt;坑3. 需要设置时区&lt;/h3&gt;

&lt;p&gt;不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dpkg-reconfigure tzdata&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;坑4-全部安装完毕-css-不显示&quot;&gt;坑4. 全部安装完毕 css 不显示&lt;/h3&gt;

&lt;p&gt;Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cantino/huginn/issues/1581&quot;&gt;css and image is not load&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;坑5-install-init-script&quot;&gt;坑5. &lt;a href=&quot;https://github.com/cantino/huginn/blob/master/doc/manual/installation.md#install-init-script&quot;&gt;Install Init Script&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在这一步中是 &lt;strong&gt;或&lt;/strong&gt; 的关系，一定要搞明白。&lt;/p&gt;

&lt;p&gt;我选择的是在这步把&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# web: bundle exec unicorn -c config/unicorn.rb
# jobs: bundle exec rails runner bin/threaded.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这两行的 &lt;strong&gt;#&lt;/strong&gt; 去掉了的。&lt;/p&gt;

&lt;h3 id=&quot;坑6-配置-nginx&quot;&gt;坑6. 配置 nginx&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;YOUR_SERVER_FQDN&lt;/strong&gt; 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;坑7-在bundle-install的时候显示cannot-allocate-memory---git&quot;&gt;坑7. 在bundle install的时候显示“Cannot allocate memory - git”&lt;/h3&gt;

&lt;p&gt;简单的说，swap不够了..具体方法见&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;How To Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;

&lt;p&gt;使用的方式我捉摸了很久才搞定..我会举个把网页转换成RSS的详细的例子。&lt;/p&gt;

&lt;p&gt;开始之前首先需要解释几个东西。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;网页的格式是 html，RSS 的格式是 xml。&lt;/li&gt;
  &lt;li&gt;xpath 是你用来确定网页元素的方法，这一步我会有一个很简单的方法来教大家怎么去搞定元素的确定。&lt;/li&gt;
  &lt;li&gt;由于是工作流的形式，所以我们整个的过程其实有两步，第一步是抓取网页的信息，第二步是返回 RSS 的地址。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面开始举例子。我们现在要把&lt;a href=&quot;http://walkginkgo.com/&quot;&gt;我的博客 http://walkginkgo.com/&lt;/a&gt;转换成 RSS。&lt;/p&gt;

&lt;p&gt;按照3中说的，我们需要先抓取网页信息。抓取网页信息，要创建一个 Website Agent。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn1.png&quot; alt=&quot;2016-07-15_huginn1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照图示，名字随便起，其他可以先默认。（全部解释太麻烦）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn2.png&quot; alt=&quot;2016-07-15_huginn2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后是关键的一步，我们要开始确定网页的元素。&lt;/p&gt;

&lt;p&gt;点击 &lt;strong&gt;Toggle View&lt;/strong&gt; 到文本编辑模式。我们要修改我圈出来的两个地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn3.png&quot; alt=&quot;2016-07-15_huginn3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们需要修改url到我们的网址，在这里就是 &lt;strong&gt;http://walkginkgo.com/&lt;/strong&gt; 了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;extract&lt;/strong&gt; 是我们要提取的信息，我们这里要提取博客的题目，网址，发布日期，简述。&lt;/p&gt;

&lt;p&gt;我们现在打开&lt;a href=&quot;http://walkginkgo.com/&quot;&gt;tesths&lt;/a&gt;这个博客进去来看怎么抓取元素。&lt;/p&gt;

&lt;p&gt;在 Chrome 打开，然后选择你要的元素，&lt;strong&gt;右键&lt;/strong&gt;选择 &lt;strong&gt;Inspect&lt;/strong&gt;。可以看到 Chrome 下面的审查元素信息已经出来了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn4.png&quot; alt=&quot;2016-07-15_huginn4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到我们的元素在 &lt;strong&gt;span&lt;/strong&gt; 标签里，这时候我们如图&lt;strong&gt;右键&lt;/strong&gt;选择之后然后复制。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn5.png&quot; alt=&quot;2016-07-15_huginn5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn6.png&quot; alt=&quot;2016-07-15_huginn6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;复制的东西如下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/html/body/div[1]/div/div/ul/li[1]/h2/a/span/text()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把之前的 css 改成 xpath 然后直接复制就可以了。点击下面的 Dry Run，可以看到我们的标题已经搞定了。（css 使用见下面备注）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn7.png&quot; alt=&quot;2016-07-15_huginn7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是还有两个问题，一个是，我们只爬了一个标题，二是标题有空格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn8.png&quot; alt=&quot;2016-07-15_huginn8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决问题1&lt;/strong&gt;，需要把我们的 xpath 改成这样。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/html/body/div[1]/div/div/ul/li/h2/a/span/text()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;是因为 &lt;strong&gt;li[1]&lt;/strong&gt; 代表我们第一个标题，所以把[1]去了就可以了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决问题2&lt;/strong&gt;，需要我们加上一句话。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;value&quot;: &quot;normalize-space(.)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这句话的意思就是把空格去了。&lt;/p&gt;

&lt;p&gt;最后就是这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn9.png&quot; alt=&quot;2016-07-15_huginn9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们把链接按照这个方法也爬下来。找到链接的地方，因为链接在a标签里面，所以我们要加一个 value，选择到 href。剩下我就不具体叙述了，我把最后完整的截图出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn10.png&quot; alt=&quot;2016-07-15_huginn10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日期什么的方法类似，也不多说。这样其实没有什么 html 的基础也可以爬网页了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn11.png&quot; alt=&quot;2016-07-15_huginn11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dry Run&lt;/strong&gt; 之后的结果如图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn22.png&quot; alt=&quot;2016-07-15_huginn22.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;别忘记 &lt;strong&gt;Save&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：官方默认创建用的是 css，Chrome 提供了复制 css 的方式，格式稍微改动成和官方例子那样&lt;strong&gt;空格&lt;/strong&gt;来代替&lt;strong&gt;&amp;gt;&lt;/strong&gt;就可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这么我们就完成了工作的第一步，抓取网页，下一步要输出 RSS。&lt;/p&gt;

&lt;p&gt;前面都随便写，记得 &lt;strong&gt;Sources&lt;/strong&gt; 选择我们之前的 tesths blog。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn13.png&quot; alt=&quot;2016-07-15_huginn13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是继续配置 &lt;strong&gt;Option&lt;/strong&gt;，这就比之前简单了。&lt;/p&gt;

&lt;p&gt;但是注意我们之前的链接没有前面的 &lt;strong&gt;http://walkginkgo.com/&lt;/strong&gt; 这一串，我们要加上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn14.png&quot; alt=&quot;2016-07-15_huginn14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后完整的是这样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn15.png&quot; alt=&quot;2016-07-15_huginn15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还要记得把你博客的 link 加上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn23.png&quot; alt=&quot;2016-07-15_huginn23.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后选择 &lt;strong&gt;Save&lt;/strong&gt; 就到了这。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn16.png&quot; alt=&quot;2016-07-15_huginn16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到已经有 xml 格式的输出了。&lt;/p&gt;

&lt;p&gt;最后一步我们要烧录 RSS。用到的时谷歌家的服务 &lt;a href=&quot;https://feedburner.google.com/&quot;&gt;feedburner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn17.png&quot; alt=&quot;2016-07-15_huginn17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn18.png&quot; alt=&quot;2016-07-15_huginn18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn19.png&quot; alt=&quot;2016-07-15_huginn19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把网址复制到 Feedly 里面，大功告成！&lt;/p&gt;

&lt;h2 id=&quot;更多备注&quot;&gt;更多备注&lt;/h2&gt;

&lt;p&gt;因为我个人 RSS 主要是看有没有更新，所以抓取的内容不详细，需要抓取全文在手机看的话就自己倒腾啦。&lt;/p&gt;

&lt;p&gt;如果输出 RSS 没有结果的话，可以看下是否允许，没运行点击一下 run 就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn21.png&quot; alt=&quot;2016-07-15_huginn21.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你遇到输出的结果有问题，可以看下是不是event多了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn20.png&quot; alt=&quot;2016-07-15_huginn20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果多了就全部删除重新运行。&lt;/p&gt;

&lt;p&gt;总之真的没有很难，最难的是 xpath 获取元素，但是我已经用了最简单的方式来教大家了，剩下的无论是不是专业学编程的都能很快搞定啦，就看大家怎么去玩这个了。&lt;/p&gt;

&lt;p&gt;至于抓取 RSS 的频率，正在测试中..敬请关注更新。&lt;/p&gt;

&lt;p&gt;参考链接&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://walden.farbox.com/post/huginn-a-rss-master-piece&quot;&gt;HUGINN:烧录RSS的神器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/2e6e3f845bc3&quot;&gt;Huginn安装教程—建立你自己的IFTTT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cantino/huginn&quot;&gt;cantino/huginn&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 15 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/07/15/huginn.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/07/15/huginn.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Mac状态栏Hack</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;依旧是一篇探究 Mac 软件原理的文章&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前几天在用小历的时候，发现了这么一个功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status1.png&quot; alt=&quot;2016-07-09_status1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择之后，小历会从这样变到这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status2.png&quot; alt=&quot;2016-07-09_status2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status3.png&quot; alt=&quot;2016-07-09_status3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后我就开始想这个是怎么实现的，这里我们必须要对比一个软件，卖了105.88人民币的著名 Mac 状态栏管理软件 &lt;a href=&quot;https://www.macbartender.com/&quot;&gt;Bartender 2&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在 Bartender 中有一个功能，你可以按住 ⌘ 之后点击图标来拖动来改变它在 Mac 状态栏的位置，就像这样（看网易云音乐）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status4.png&quot; alt=&quot;2016-07-09_status4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果 Bartender 可以的，那为什么小历不能这么做，这样的话用户体验不是更好吗？于是开始了一轮疯狂的 Google 和 Stackoverflow 。&lt;/p&gt;

&lt;p&gt;结果结论是，在老版本的 Mac 操作系统中，是默认支持 ⌘+ 图标改变位置的，但是在 10.11 中，这个功能被取消了，只有使用 Bartender 来改变位置。而在 Apple 给出的 API 中，没有可以改变状态栏图标位置的方法。那么 Bartender 是怎么实现的，小历又为什么不能实现。之后就是接着查。&lt;/p&gt;

&lt;p&gt;经过不断的改变关键字..在某一个 Stackoverflow 中发现了一个叫做 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 的类，这是私有的 API ，在这个方法中，可以实现 Bartender 中的那个改变位置的效果，但是如果使用了苹果私有的  API ，应用是不能上线到 App Store 的，小历上线到了 App Store ，说明没有用到私有 API，之后我就一片混乱了…&lt;/p&gt;

&lt;p&gt;无耐之下，我在微博上给小历的作者发了一个私信，没想到很快小历的作者就给我回复了！他给了我一个 Github 的地址，&lt;a href=&quot;https://github.com/shergin/NSStatusBar-MISSINGOrder&quot;&gt;NSStatusBar-MISSINGOrder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status5.png&quot; alt=&quot;2016-07-09_status5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后我看了一下，正如作者所说，是构造了一个 &lt;strong&gt;Selector&lt;/strong&gt;，但实际上是用 Hack 的方法调用了两个方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)_insertStatusItem:(id)arg1 withPriority:(long long)arg2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (id)_statusItemWithLength:(double)arg1 withPriority:(long long)arg2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们来看这两个方法。&lt;strong&gt;Priority&lt;/strong&gt; 实际上是确定位置的，优先级越高，位置越靠左。但是问题在于，这两个方法不在 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 中，那么这两个方法又是哪来的呢？&lt;/p&gt;

&lt;p&gt;其实这两个方法是 Apple 留下的后门，这两个方法是 &lt;strong&gt;NSStatusBar&lt;/strong&gt; 中没有公开的 API。&lt;/p&gt;

&lt;p&gt;于是，我决定开始使用 class-dump 来查看未公开的 API。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./class-dump -H -o ~/Desktop /System/Library/Frameworks/AppKit.framework&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令会把 &lt;strong&gt;AppKit.framework&lt;/strong&gt; 中的所有方法都导出一个一个的.h文件。&lt;/p&gt;

&lt;p&gt;在里面找到 &lt;strong&gt;NSStatusBar.h&lt;/strong&gt;，就可以看到这两个方法了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status7.png&quot; alt=&quot;2016-07-09_status7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在小历当中，怎么说呢..其实是调用了私有的 API，但是不明显，而且调用的很少。所以上线到 App Store 是没有太大问题的。&lt;/p&gt;

&lt;p&gt;下面我们来猜测一下 Bartender 可以把所有图标放到状态栏下面那行的大概原理。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./class-dump -H -o ~/Desktop/private /System/Library/PrivateFrameworks/SystemUIPlugin.framework/Versions/A/SystemUIPlugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令会把 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 相关的.h头文件导出。还有其他的一系列头文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status6.png&quot; alt=&quot;2016-07-09_status6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NSMenuExtra&lt;/strong&gt; 中有 drawRect 方法，应该就是先画 view，然后把图标放进去就可以啦。&lt;/p&gt;

&lt;p&gt;至于按⌘拖动那个嘛..我估计，应该是提供了某个方法，可能是在 &lt;strong&gt;NSMenuExtraView&lt;/strong&gt; 中的 &lt;strong&gt;mouseDown&lt;/strong&gt; 方法，但是没文档啥的，我不确定..就得试和看命名了，我就不继续深究了。因为本来也就是一次探究大概原理的文章，主要是我 Bartender 都买了..也就没有什么继续研究的动力了哈哈。&lt;/p&gt;

&lt;p&gt;小小总结一下。&lt;/p&gt;

&lt;p&gt;如果是做 Mac 开发的，class-dump 是个好东西，因为在 Mac 上，你可以不上线 App Store 来分发你的应用，那么我们就可以调用私有  API 来 Hack 很多好玩的功能，这样其实是很好的。比如 Bartender，100多块钱而且基本用 Mac 都会买，还是可以赚上一笔的。&lt;/p&gt;

&lt;p&gt;其次，class-dump 导出的头文件是没有文档的，这个就真的纯靠试和看命名了。需要开发者的耐心和不怕死的心。&lt;/p&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://cocoadevcentral.com/articles/000078.php&quot;&gt;Building NSMenuExtra - A Small Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://duhanebel.wordpress.com/2010/04/02/nsmenuextra-how-to-work-with-undocumented-apis/&quot;&gt;NSMenuExtra – working with undocumented APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shergin/NSStatusBar-MISSINGOrder&quot;&gt;NSStatusBar-MISSINGOrder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tanhao.me/code/1672.html/&quot;&gt;MAC系统状态栏通过插件添加图标MenuExtra Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar/&quot;&gt;Cocoa菜单栏右侧图标的实现&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/mac/2016/07/09/statusbar.html</link>
        <guid isPermaLink="true">http://localhost:4000/mac/2016/07/09/statusbar.html</guid>
        
        
        <category>Mac</category>
        
      </item>
    
      <item>
        <title>Learn You a Swift for Great Good! part 1 -- Higher-Order Functions in Swift</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;今天代码多，话少，基本全是干货，而且应该是没人写过。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天我们用Swift实现在learnyouahaskell中几个高阶函数。我会把Haskell和Swift的代码都贴出来对照。顺便会加点说明。&lt;/p&gt;

&lt;p&gt;上次我们实现了multThree函数，在learnyouahaskell中下一个稍微有点复杂的函数，是applyTwice。直接上Haskell的代码了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;applyTwice :: (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a
applyTwice f x = f (f x)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个函数的作用就是，重复执行某一个操作两次。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ghci&amp;gt; applyTwice (+3) 10
16
ghci&amp;gt; applyTwice (multThree 2 2) 9
144
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在我们用Swift实现这个函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func applyTwice&amp;lt;U&amp;gt;(f: U -&amp;gt; U, element: U) -&amp;gt; U {
    let a: U = element
    return f(f(a))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后写一个&lt;strong&gt;sum3&lt;/strong&gt;和上一篇的&lt;strong&gt;multThree&lt;/strong&gt;作为我们&lt;strong&gt;applyTwice&lt;/strong&gt;中的&lt;strong&gt;f&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func sum3(a: Int) -&amp;gt; Int {
    return a + 3
}

func multThree(adder: Int) -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int {
    return {
        a in  {
            b in
            a * b * adder
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let a = applyTwice(sum3, element: 10)
print(a)
// a = 16

let b = applyTwice(multThree(2)(2), element: 9)
print(b)
// b = 144
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有几个问题&lt;/p&gt;

&lt;p&gt;1.为什么Haskell中可以用&lt;strong&gt;(+3)&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;我觉得这个问题的回答是，Haskell里+就是一个函数，因为我觉得这么回答才合理…Haskell里所有的操作都是函数，所以对于+来说，就有两个参数，当我们赋值一个参数的时候，按照柯里化的概念，它还可以是一个函数。所以在Haskell中可以直接用+3。&lt;/p&gt;

&lt;p&gt;2.为什么在Swift中，我们调用&lt;strong&gt;applyTwice&lt;/strong&gt;的时候传的是&lt;strong&gt;sum&lt;/strong&gt;而不是&lt;strong&gt;sum(3)&lt;/strong&gt;？为什么调用&lt;strong&gt;multThree&lt;/strong&gt;的时候又写&lt;strong&gt;multThree(2)(2)&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;因为我们在定义&lt;strong&gt;f&lt;/strong&gt;的时候，定义了一个类型是&lt;strong&gt;U -&amp;gt; U&lt;/strong&gt;类型，而不是&lt;strong&gt;U&lt;/strong&gt;类型，如果我们此时写的是&lt;strong&gt;sum(3)&lt;/strong&gt;，那么&lt;strong&gt;sum(3)&lt;/strong&gt;本身实际上是一个&lt;strong&gt;U&lt;/strong&gt;类型了。所以这里写&lt;strong&gt;sum&lt;/strong&gt;。简单的说，函数返回值的类型，其实就是f的类型。而对于&lt;strong&gt;multThree&lt;/strong&gt;来说，只有当是&lt;strong&gt;multThree(2)(2)&lt;/strong&gt;的时候，它的返回类型才是一个&lt;strong&gt;Int -&amp;gt; Int&lt;/strong&gt;类型，从而和我们的&lt;strong&gt;U -&amp;gt; U&lt;/strong&gt;对应起来。&lt;/p&gt;

&lt;p&gt;实现到这，我们接着learnyouahaskell往下实现。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zipWith' :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; [a] -&amp;gt; [b] -&amp;gt; [c]
zipWith' _ [] _ = []
zipWith' _ _ [] = []
zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;zipWith的作用就是讲两个列表通过某个函数合成一个函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ghci&amp;gt; zipWith' (+) [4,2,5,6] [2,6,2,3]
[6,8,7,9]
ghci&amp;gt; zipWith' max [6,3,2,1] [7,3,1,5]
[7,3,2,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们用Swift实现一下。偷懒了没做判断，数组长度假定一样..直接就数组1长度-1就行了…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func zipWith&amp;lt;U, V&amp;gt;(f: (U, U) -&amp;gt; V, array1: [U], array2: [U]) -&amp;gt; [V] {
    var array3 = [V]()
    for i in 0...array1.count-1 {
        array3.append(f(array1[i], array2[i]))
    }
    return array3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再写两个函数进行操作。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func sum(a: Int, b: Int) -&amp;gt; Int {
    return a + b
}

func max(a: Int, b: Int) -&amp;gt; Int {
    return a &amp;gt; b ? a : b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let c = zipWith(sum, array1: [4,2,5,6], array2: [2,6,2,3])
print(c)
//c = [6, 8, 7, 9]

let d = zipWith(max, array1: [4,2,5,6], array2: [2,6,2,3])
print(d)
//d = [4, 6, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着我们实现fliter，请看Haskell的代码多么的神奇！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; [a]
filter _ [] = []
filter p (x:xs)
	| p x       = x : filter p xs
	| otherwise = filter p xs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我就不贴Haskell的使用了。最后我们实现一下Swift版本的fliter。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func jfliter&amp;lt;U&amp;gt;(f: U -&amp;gt; Bool, array: [U]) -&amp;gt; [U] {
    var result = [U]()
    for element in array {
        if f(element) {
            result.append(element)
        }
    }
    return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;写一个big函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func big(a: Int) -&amp;gt; Bool {
    if a &amp;gt; 3 {
        return true
    } else {
        return false
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let e = [1, 2, 3, 4, 5, 6]
let ee = jfliter(big, array: e)
print(ee)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有一个问题，为什么不用Array的extension扩展？我写的时候遇到一个神奇的问题..没写出来。还在看是什么问题中。&lt;/p&gt;

&lt;p&gt;最后，我们看一下Haskell中的foldl，foldl其实就是依次从左边对列表进行操作。&lt;/p&gt;

&lt;p&gt;Haskell中的例子都有lambda，解释起来又花好多时间，就不找例子了。我来填一下上次在T沙龙中留下的坑，方志刚写的reverse。如果在Haskell中，直接用foldl，可以让数组逆序排列，因为foldl本来就是从左一个元素一个元素操作，这样的话，会将第一个元素放在数组里，依次放，这样就相当于reverse了，由于在Swift里没有foldl，所以直接用reverse，效果其实是一样的。&lt;/p&gt;

&lt;p&gt;至此，我们的就绪工作基本上完成，learnyouahaskell高阶函数剩下的部分太具有Haskell的特性，和Swift我也是在找不到什么联系，就不再说了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个系列的下一个部分，再写，可能就会直接到Functor了，最近我要好好的再准备一下Haskell的知识，所以可能会停更这个系列一段时间。中间这段时间我尽量在iOS上还有其他干货推出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell for Great Good! &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 29 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/ios/2016/06/29/Learn-You-a-Swift-for-Great-Good!-part-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/ios/2016/06/29/Learn-You-a-Swift-for-Great-Good!-part-1.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Learn You a Swift for Great Good! part 0 -- Swift Currying</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;刚刚才发现上一篇的内容和Functional Swift中重了很多(因为买了没看🙄昨天翻了一遍)，而且我是自己尝试写的..今天应该就不会怎么重了，因为我本来就打算按照计划对照Haskell来写Swift，Haskell中高阶函数有map，filter，所以肯定会重。不过除此之外，我还会尽我所能实现Haskell中的其他高阶函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对了我看了喵神的&lt;a href=&quot;http://swifter.tips/currying/&quot;&gt;柯里化 (CURRYING)&lt;/a&gt;以及&lt;a href=&quot;https://www.objc.io/books/functional-swift/&quot;&gt;Functional Swift&lt;/a&gt;中的柯里化。Functional Swift中的例子其实还不错，但是没有用curry的范型来举例子，再加上我悟性太差，导致看了很久。最终根据Stackoverflow上找到了一个例子，看的差不多了。&lt;/p&gt;

&lt;p&gt;我觉得应该可以把这个概念解释的还不错了。&lt;/p&gt;

&lt;p&gt;其实在Haskell，是有柯里化(下文统一Currying)的。因为英文是Currying，大概我拙劣的英文觉得Currying是Carrying的意思，也就是，携带..而且Haskell是pure function的，curried是默认的..这个恰好是昨天我想在Swift中实现zipwith函数时候遇到的问题。learnyouahaskell第五章高阶函数一开头就是Curried Functions来开头的。&lt;/p&gt;

&lt;p&gt;所以今天先补上Haskell中和Currying还有Partial application相关的概念。&lt;/p&gt;

&lt;p&gt;这里是wiki的地址。&lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;Currying&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;Partial application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currying我觉得可以简单理解为，你想返回什么都可以。而Partial application可以理解为固定参数得到的函数。&lt;/p&gt;

&lt;p&gt;在函数式编程要随时记得，任何参数或者返回值都可能是一个函数。&lt;/p&gt;

&lt;p&gt;以上是learnyouahaskell中提到相关的概念的介绍。下面我们来介绍Swift中的Currying。&lt;/p&gt;

&lt;p&gt;举两个例子来说明，一个是Stackoverflow上的我稍作了改动..一个是我根据Haskell写的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func curry&amp;lt;A, B, C&amp;gt;(f: (A, B) -&amp;gt; C) -&amp;gt; A -&amp;gt; B -&amp;gt; C {
    return { x in { y in f(x, y) } }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;怎么去理解这种写法的范型，是一个很值得讨论的问题。我以前一直觉得，Swift中像上个函数这么写，是有6个参数的，后来发现我错了，第一个是和上篇文章一样的那个T。我们要传一个函数，而当这个函数传完的时候，现在这个curry会根据之前的那个函数变成了一个A-&amp;gt;B-&amp;gt;C类型的函数。&lt;/p&gt;

&lt;p&gt;所以我们可以暂时不管前面那个参数f:，现在整个函数可以看做是一个A-&amp;gt;B-&amp;gt;C的函数。&lt;/p&gt;

&lt;p&gt;所谓currying，就是说，我现在让这个函数可以返回值是C，或者是返回B-&amp;gt;C这样一个函数！这样让函数的扩展性就大大增加了！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;配图看playground！！！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func curry&amp;lt;A, B, C&amp;gt;(f: (A, B) -&amp;gt; C) -&amp;gt; A -&amp;gt; B -&amp;gt; C {
    return { x in { y in f(x, y) } }
}

func sum(a: Int, b: Int) -&amp;gt; Int {
    return a + b
}

let curriedSum = curry(sum)

let sumWith2 = curriedSum(3)(6)

let sumWith3 = curriedSum(3)

print(sumWith2)

print(sumWith3(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/swiftfrp/currying1.png&quot; alt=&quot;currying1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们向curry函数中传一个形如(A, B)-&amp;gt;C的函数sum，此时curriedSum是一个&lt;strong&gt;Int-&amp;gt;Int-&amp;gt;Int&lt;/strong&gt;类型的函数，这点很好理解。&lt;/p&gt;

&lt;p&gt;下面是重点，我们如果想直接调用计算，因为函数是&lt;strong&gt;Int-&amp;gt;Int-&amp;gt;Int&lt;/strong&gt;，那么就用&lt;strong&gt;curriedSum(num1)(num2)&lt;/strong&gt;就可以了，此时的返回值是&lt;strong&gt;Int&lt;/strong&gt;，如果我们想固定一个值，那么就用&lt;strong&gt;curriedSum(num1)&lt;/strong&gt;，那么此时的返回值其实是&lt;strong&gt;Int-&amp;gt;Int&lt;/strong&gt;类型。想得到最终那个值的话，就必须再传一个参数，才能让返回类型由&lt;strong&gt;Int-&amp;gt;Int&lt;/strong&gt;变为&lt;strong&gt;Int&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;可以随时注意&lt;strong&gt;playground&lt;/strong&gt;中&lt;strong&gt;sumWith2&lt;/strong&gt;和&lt;strong&gt;sumWith3&lt;/strong&gt;显示的函数类型。&lt;/p&gt;

&lt;p&gt;这也就是currying的最大好处，想返回什么返回什么。可以返回一个-&amp;gt;Int，也可以返回一个&lt;strong&gt;Int-&amp;gt;Int(一个函数)&lt;/strong&gt;。其实不是想返回什么就返回什么，是参数想传什么就传什么，没啥区别。&lt;/p&gt;

&lt;p&gt;我们在看一个Haskell中例子，我写了一个Swift版本。这个例子无非就是多了一个参数，不过可以更方便理解。(这个函数是learnyouahaskell第五章高阶函数Curried Functions中第一个函数)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func multThree(adder: Int) -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int {
    return {
        a in  {
            b in
            a * b * adder
        }
    }
}

let multTwo = multThree(3)
let multOne = multThree(4)(3)
let multZero = multThree(4)(2)(1)

print(multTwo(2)(1))
print(multOne(2))
print(multZero)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/swiftfrp/currying2.png&quot; alt=&quot;currying2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个函数，其实是一个&lt;strong&gt;Int-&amp;gt;Int-&amp;gt;Int-&amp;gt;Int&lt;/strong&gt;类型…一会看Haskell原函数就懂了。所以理论上我们可以返回三种类型，&lt;strong&gt;Int-&amp;gt;Int-&amp;gt;Int&lt;/strong&gt;，&lt;strong&gt;Int-&amp;gt;Int&lt;/strong&gt;，&lt;strong&gt;Int&lt;/strong&gt;。前两个是函数，最后一个是返回值。&lt;/p&gt;

&lt;p&gt;就是我们依次&lt;strong&gt;multTwo&lt;/strong&gt;和&lt;strong&gt;multOne&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;最后提一个细节，为什么我们调用的时候要用&lt;strong&gt;multThree(4)(2)(1)&lt;/strong&gt;？个人觉得，这就是函数式，其实是传了三个函数，只不过是常数函数。所以用()。&lt;/p&gt;

&lt;p&gt;最后我们看Haskell中实现&lt;strong&gt;multThree&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;multThree :: Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int
multThree x y z = x * y * z
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个例子我在博客中也有提到，在这个例子中，我们可以去理解参数和返回值都可以是一个函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ghci&amp;gt; multThree 2 3 4
24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先来说，我们可以直接这么使用，那么就是一个参数(常数)，一个参数(常数)，一个参数(常数)，返回值(常数)。但实际上又可以理解为，&lt;strong&gt;(((multThree 2) 3) 4)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们还可以怎么去用这个函数呢。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ghci&amp;gt; let multTwoWithNine = multThree 9
ghci&amp;gt; multTwoWithNine 2 3
54
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样的话，其实就是&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;multThree :: Int -&amp;gt; ((Int -&amp;gt; Int) -&amp;gt; Int)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样看来，无论参数也好，返回值也好，都可以是一个函数。&lt;/p&gt;

&lt;p&gt;当然，我觉得，在Haskell中写更爽一点。当然为什么那么爽。其实Curry是个姓，这个人的名，叫Haskell。&lt;/p&gt;

&lt;p&gt;最后结个尾。&lt;/p&gt;

&lt;p&gt;“Currying is common paradigm in functional programming. In fact in Haskell (another functional programming language) every function is curried by default.”其实就是..在Haskell中，所有函数都是默认curried。&lt;/p&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/28767658/how-to-understand-the-currying-in-swift&quot;&gt;How to understand the currying in Swift?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24107191/curry-function-in-swift&quot;&gt;Curry Function in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://swifter.tips/currying/&quot;&gt;柯里化 (CURRYING)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;Currying&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/Curry/blob/master/Source/Curry.swift&quot;&gt;thoughtbot/Curry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;Learn You a Haskell for Great Good! &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.objc.io/books/functional-swift/&quot;&gt;Functional Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;Partial application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/ios/2016/06/27/Learn-You-a-Swift-for-Great-Good!-part-0.html</link>
        <guid isPermaLink="true">http://localhost:4000/ios/2016/06/27/Learn-You-a-Swift-for-Great-Good!-part-0.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Learn You a Swift for Great Good! part -1</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;只有一句话，初学，欢迎讨论，求轻喷。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为什么是-1，因为我需要为自己的学习做一些准备工作，今天的准备工作很简单(其实也不简单，都看好几天了有一点头绪)，在Swift中寻找一个f。&lt;/p&gt;

&lt;p&gt;什么意思呢？在Haskell中，如果现在有一个函数作为参数的话，需要写一个f就可以了。举个例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]
map _ [] = []
map f (x:xs) = f x : map f xs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是在Learn You a Haskell for Great Good!(以后统称为learnyouahaskell)一书中的第六章Higher order functions中写的一个map函数的。没具体看Haskell源码怎么实现的map..&lt;/p&gt;

&lt;p&gt;稍微解释一下Haskell的语法，解释完了才能知道在Swift中怎么去对应起来。第一行是类型定义。map的第一个参数是一个函数，就是(a-&amp;gt;b)，然后又是一个参数[a]，然后是返回值[b]。所以整个map有两个参数。&lt;/p&gt;

&lt;p&gt;第二行，_ 在learnyouahaskell中描述为代表一个范型。所以可以理解为不管第一个参数是什么，都返回和第二个参数一样的类型，也就是一个list类型。&lt;/p&gt;

&lt;p&gt;第三行，第一个f就是我们的(a-&amp;gt;b)这个函数，第二个是列表的递归，每次取列表的第一个元素，依次执行map后面那个f。所以执行起来就是，第一个元素，f 第二个元素。&lt;/p&gt;

&lt;p&gt;今天的主戏，就是在Swift中找到那个f，其实这个f，就是一个函数。但是这个函数需要接受任何类型。&lt;/p&gt;

&lt;p&gt;这几天一直在看，看唐巧的Swift烧脑体操系列，看ray上的教程，然后查阅资料。结论也很简单，就是范型。官方文档&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html&quot;&gt;Generics&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;之所以我看了很久，是因为我之前对于范型是迷糊的，现在也不清晰。足以见我Swift功底之差。但是看了也没有特别大的问题，范型是一个很好东西。&lt;/p&gt;

&lt;p&gt;那么我们开始考虑怎么去写一个Swift版本的map函数。我们对照Haskell一步一步来。&lt;/p&gt;

&lt;p&gt;首先，需要一个函数f: a-&amp;gt;b，然后需要一个数组，最后返回一个数组。我们来用Swift实现。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func jmap&amp;lt;U, T&amp;gt;(f: U -&amp;gt; T, array: [U]) -&amp;gt; [T]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;采用范型的方式，让Swift和Haskell很好的对应了起来。语法上基本没有大的区别。下面要具体的实现map函数里面的内容。&lt;/p&gt;

&lt;p&gt;我们返回了一个参数类型是T的数组，所以jmap里面需要有一个T类型的数组来用于返回。同时，我们要向f函数中传入一次的数组元素，这里用for in循环就可以了。&lt;/p&gt;

&lt;p&gt;所以完整的代码是这样的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func jmap&amp;lt;U, T&amp;gt;(f: U -&amp;gt; T, array: [U]) -&amp;gt; [T] {
    var result = [T]()
    for element in array {
        result.append(f(element))
    }
    return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面要做的事情。就是增加数组的extension。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension Array {
    func jjmap&amp;lt;U&amp;gt;(f: (Array.Element) -&amp;gt; U) -&amp;gt; [U] {
        return jmap(f, array: self)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此就可以使用我们自己写的map函数了。&lt;/p&gt;

&lt;p&gt;下一篇，继续范型和高阶函数，所以很有可能还是负的part。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本系列旨在将Haskell和Swift中的函数式对应起来学习。阅读过程中有什么错误欢迎留言。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考链接&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24002733/add-an-element-to-an-array-in-swift&quot;&gt;Add an element to an array in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html&quot;&gt;Collection Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://walkginkgo.com/free/2016/03/06/Higher-Order-Functions.html&quot;&gt;Higher-Order Functions&lt;/a&gt; 自己偶尔参考一下自己之前写的博客..&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ijoshsmith.com/2015/12/09/higher-order-functions-in-swift/&quot;&gt;Higher-order functions in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@ivicamil/higher-order-functions-in-swift-part-1-d8e75f963d13#.a1nb2nvjr&quot;&gt;Higher Order Functions In Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2016/02/27/swift-gym-2-function-argument/&quot;&gt;Swift 烧脑体操（二） - 函数的参数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2016/02/27/swift-gym-3-higher-order-function/&quot;&gt;Swift 烧脑体操（三） - 高阶函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2016/03/05/swift-gym-4-map-and-flatmap/&quot;&gt;Swift 烧脑体操（四） - map 和 flatMap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/ios/2016/06/25/Learn-You-a-Swift-for-Great-Good!-part-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/ios/2016/06/25/Learn-You-a-Swift-for-Great-Good!-part-1.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>成都&amp;lt;T&amp;gt;技术沙龙小记</title>
        <description>&lt;p&gt;耽误了那么久才开始写，因为连续考了三天试..那天晚上和坦坦回学校的时候朋友圈发了好长一截，我怕我忘了..闲话少说，开始记录一下吧~&lt;/p&gt;

&lt;p&gt;总体给我的感觉，很赞，真心很赞。这算是我第一次参加技术沙龙，Swift的。&lt;/p&gt;

&lt;p&gt;时间是上周日，19号。我和坦坦，下文统一为蛋哥。我和蛋哥约在活动中心见面，然后打uber去了天府软件园。去了之后和蛋哥一起吃了KFC，然后就坐在那等蓉姐和肠叔。其实之前和蛋哥有过交流，后来蓉姐来了。我简直就是作为一个记者一样，对蓉姐进行了一个采访，从蓉姐学iOS到工作，问了个遍，下次可以带着录音笔，出个采访稿也是不错的。&lt;/p&gt;

&lt;h2 id=&quot;首见蓉姐&quot;&gt;首见蓉姐&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;蓉姐为啥要单独提出来说？&lt;strong&gt;因为蓉姐是一个做iOS开发的女孩。&lt;/strong&gt;对，女孩..&lt;/p&gt;

&lt;p&gt;蓉姐和我想象的完全不一样，蓉姐作为一个女孩写iOS，我心里是很佩服的。我从来没有看不起女程序员，我是超级佩服。因为工作室很多学妹在学习编程上都存在大大小小的问题。所以我也问了蓉姐很多问题。蓉姐也超级耐心的和我解答。&lt;/p&gt;

&lt;p&gt;蓉姐大三开始学iOS，现在在做智能玩具。我看了蓉姐的博客，写了一个蓝牙的系列，很nice。我还咨询了蓉姐一下iBeacon的问题，蓉姐说其实原生的api其实足够，但是蓝牙也有很多坑。蓉姐还做过php，大一学了c语言之后就做编程了。&lt;/p&gt;

&lt;p&gt;蓉姐大概还是个摄影爱好者，相机和脚架很齐全，我很佩服。蓉姐说她在深圳的公司的时候压力很大也坚持下来了。总之，和蓉姐简短的聊天，除了佩服就剩佩服了。有那么一点女汗子的感觉，蓉姐的经历可以让我以后和工作室的学妹说，编程，从来不是难事，是努力可以做好的事情。&lt;/p&gt;

&lt;p&gt;我和蛋哥蓉姐回合之后就去了camera360，沙龙在camera360举办，环境超级nice。我很喜欢那里的办公环境，理由很简单，我进去就看到了运动器械…跑步机瑜伽球乒乓球桌投篮机一应俱全。&lt;/p&gt;

&lt;p&gt;之后就一起排了一下座位。等大家到起齐就开始了。&lt;/p&gt;

&lt;h2 id=&quot;畅叔开场&quot;&gt;畅叔开场&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;稍微介绍一下畅叔。畅叔是帮主的大学同学，帮主就是T沙龙的总司令梁杰，梁杰是跨界网红。畅叔之所以叫畅叔就是因为畅叔年级轻轻看上去好老…是真的。当然畅叔也是跨界。&lt;/p&gt;

&lt;p&gt;畅叔先是感谢了泊学的赞助~还有camera360的场地提供。&lt;/p&gt;

&lt;p&gt;畅叔先是大概介绍了T沙龙的起因以及T沙龙的形式。T沙龙真的要开遍全国，每个月举办线下的沙龙。最重要的是，非盈利，不收费，非盈利，不收费，非盈利，不收费。重要的事情我要说三遍。(偶尔私心一下..必须宣传)&lt;/p&gt;

&lt;p&gt;T沙龙已经成功的在北京举办了很多次。像巧大啊，还有臧成威啊，还有虾神，还有sunny神都参加过，总之就是，非常成功。&lt;/p&gt;

&lt;p&gt;T沙龙真的是要把热爱Swift的人聚集在一起，分享，交流。&lt;/p&gt;

&lt;p&gt;成都这是第一次，当然组织者就是畅叔，蛋哥，还有蓉姐，我是打杂的。&lt;/p&gt;

&lt;p&gt;之后，大家自我介绍了。其实程序员是个很开朗的职业，很能扯，很多好玩的。所以大家的自我介绍也很开心欢乐，之后就开始分享啦。&lt;/p&gt;

&lt;h2 id=&quot;从零开始写一个argo--thoughtwork方志刚&quot;&gt;从零开始写一个Argo —— ThoughtWork方志刚&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;必须要先隆重的介绍一下方志刚。&lt;strong&gt;我科大的学长&lt;/strong&gt;，和蛋哥一届的。但是现在一看，蛋哥仿佛被完爆了…&lt;/p&gt;

&lt;p&gt;方志刚分享的是从零开始写一个Argo。Argo是一个解析json的三方库。方志刚采用的方式是..VNC..！！就是远程操控了投影的电脑，然后现场一步一步写来展示整个的过程。&lt;/p&gt;

&lt;p&gt;这种形式我是服了。(十分后悔没有用电脑记录一下…现在写这个实在是费劲，想在技术上记录点东西都没机会..)&lt;/p&gt;

&lt;p&gt;开始的时候实现了一个简单的parser，然后逐步完善功能。&lt;/p&gt;

&lt;p&gt;针对Argo可能存在的一些问题进行了解决。&lt;/p&gt;

&lt;p&gt;开始的时候是利用Swift的函数式特性先写了一个简单的parser。之后在此基础上进行了完善。然后写了一个Functor..到这其实我已经有点晕了。不过后面活过来了。&lt;/p&gt;

&lt;p&gt;但在此基础上调用方法的话还是显得复杂，于是方志刚用了Swift的运算符重载..用这种方法对方法的调用，只需要用重载后的运算符就行了。&lt;/p&gt;

&lt;p&gt;当然，在写的时候可能会出现参数过多的问题，这是camera360的高山问的..之后方志刚推荐了一个很赞的库，&lt;a href=&quot;https://github.com/thoughtbot/Curry&quot;&gt;curry&lt;/a&gt;，对就是库里..在函数式编程中很重要的一个概念，科里化。利用这个可以无论多长的函数都可以。高山说，在RAC中，写了很长的宏，宏……&lt;/p&gt;

&lt;p&gt;之后，就是如果我们在写的时候出现”user.name”这种情况的时候，怎么让我的parse可以解析到后面的name。如果在haskell中，foldl，我没记错是这么个函数。用这个函数可以获得最后的那个字符串。&lt;/p&gt;

&lt;p&gt;方志刚提到，由于在Swift中没有foldl，所以我们先reverse一下，然后在解析就可以了。厉害。我是服了。&lt;/p&gt;

&lt;p&gt;之后的茶歇时间，之所以我后面这块记得那么清楚，是因为我在茶歇时间和他交流了一下..方志刚人很nice啊，我问最后reverse的时候他超级耐心的和我解释了，他一说foldl我就明白大概了..我还问了运算符重载在haskell的地方，他说他不知道，我问他学过haskell没，他来了一句，我都是用到再查…当时就跪了，瞬间智商碾压啊。我TM按顺序看都看不懂啊！！人家就直接stackoverflow查给我看了。他还问我是不是学过，有个free monad的概念很烧脑…我说我没学过..所以我准备后面几天学一下然后下次有机会当面再交流一下monad。&lt;/p&gt;

&lt;p&gt;包括茶歇时间听蛋哥和许国卿和TW的另一外工程师官勤交流了一下函数式在生产环境里的使用，真的是，受益匪浅。&lt;/p&gt;

&lt;h2 id=&quot;rethink-nsnotifucation-in-swift--camera360高山&quot;&gt;Rethink NSNotifucation in Swift —— Camera360高山&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;高山是camera360的iOS开发工程师。&lt;strong&gt;我科大学长。&lt;/strong&gt;他分享了他在平时开发中对于回调，通知，这些使用的一些心得，同时分享了他们团队利用RAC来代替这些的方法。&lt;/p&gt;

&lt;p&gt;虽然没有方志刚那种现场写代码的感觉，但是还是有很多收获。&lt;/p&gt;

&lt;p&gt;之后高山提出了关于RAC的一些问题我们讨论了一下，觉得还是很棒的~&lt;/p&gt;

&lt;h2 id=&quot;茶歇&quot;&gt;茶歇&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;茶歇之所以单独提出来，是因为我们买了奇葩饮料…陈佳因为来迟到了，喝了崂山🐍水。我喝了，难喝死了。&lt;/p&gt;

&lt;p&gt;茶歇各种闲扯交流，也是受益匪浅。&lt;/p&gt;

&lt;h2 id=&quot;wwdc讨论&quot;&gt;wwdc讨论&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;畅叔和蛋哥在嘉宾分享之后加了一个环节就是wwdc的讨论，因为前几天才开了wwdc..由我开头，我之前写了一片博客，提到了apple逼死了一波软件。之后又提到了ipad上的swift playground..我说我觉得那个好鸡肋，本来准备买ipad的都不打算买了。我刚说完。陈佳拿出iOS10的ipad说没有那么坑。&lt;/p&gt;

&lt;p&gt;然后大家就开始围观playground啊！！我们用quicktime把ipad投影出来，然后方志刚在ipad上写了几段代码。当时那种感觉，就是，我可以考虑买ipad！&lt;/p&gt;

&lt;p&gt;因为当时觉得就是一个给娃娃学编程的软件..现在发现还是有实际用处的，可以写动画，而且苹果把Uikit都给封装进去了。非常的nice。&lt;/p&gt;

&lt;p&gt;如果不是陈佳，我就真觉得苹果坑了。&lt;/p&gt;

&lt;p&gt;之后蛋哥说了他看的session，提到了最新的Session 219 What’s New in UICollectionView in iOS 10。就是苹果官方对collectionview进行了优化。Session 414 Using and Extending the Xcode Source Editor。Xcode提供了更加的强大的编辑功能！蓉姐还提到了Session 406 Optimizing App Startup Time..大家纷纷表示国内厂商都用这个做广告..大家纷纷针对这些都讨论了一下。还是很有收获的。&lt;/p&gt;

&lt;p&gt;之后，都准备合影了..许国卿和陈佳开始玩起了iOS10的iMessage..我勒个去，那个酷炫，我是服了。当时准备录小视频的，没来及。&lt;/p&gt;

&lt;h2 id=&quot;感想心得&quot;&gt;感想&amp;amp;心得&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;其实我觉得，现场的边写代码边讲超级过瘾，尤其还是函数式。&lt;/p&gt;

&lt;p&gt;很早之前我就觉得，函数式迟早会火。这种上古的语言，是时候重新回归到大众的眼前了。Swift给了那么一个契机，让程序员们去学习，去了解这么一门博大精深的编程语言。这是Swift的功劳，不得不承认。这次沙龙结束，我也有更加充分的理由去强迫性的去让工作室的娃们学习函数式。&lt;/p&gt;

&lt;p&gt;听完方志刚的分享，我这次下狠心学haskell了，为了下次可以很好的交流一下free monad..不过我估计我一个月学不会。因为太难了。&lt;/p&gt;

&lt;p&gt;这次交流不仅听到了大牛的分享，终于见到蓉姐和畅叔，畅叔没有想象的帅，蓉姐比我想象的要厉害。蛋哥，蛋哥很早之前就认识了。蛋哥的故事，是可以完完整整写一篇博客的。我真的，每次想到蛋哥，除了佩服还是佩服。&lt;/p&gt;

&lt;p&gt;说实话，我觉得这次沙龙比较成功，认识了很多大神啊！而且真的不仅学到了东西，还了解了很多camera360公司写代码的一些方式，还有TW的一些工作方式，真的觉得不错啊。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最主要的是，科大撑起半边天。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这次去完，真的觉得。这句话要单独提出来说。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swift改变世界！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Swift值得所有人去学习，这门新兴的语言，必将走上历史的顶峰。此处必须表达一下我对某门语言的态度。后台迟早都是Swift，安卓迟早也是Swift。对我就是想说，那门可以干这两件事情的语言，你迟早gg。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我相信，&amp;lt;T&amp;gt;沙龙在成都会越来越好的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;感谢&quot;&gt;感谢&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;真的，还是感谢。超级感谢，其实第一个感谢的应该是网红梁杰，也就是蛋哥老说的帮主。没有帮主的组织，不可能有&amp;lt;T&amp;gt;沙龙。&lt;/p&gt;

&lt;p&gt;其次要感谢的，当然是畅叔，蛋哥，蓉姐。没有他们的组织，也就没有成都这次的沙龙。&lt;/p&gt;

&lt;p&gt;当然，要感谢泊学和camera360（按照我博客的访问量，此处赞助商应该加钱）。没有赞助，也没有这次沙龙的资金和场地。&lt;/p&gt;

&lt;p&gt;当然的当然，感谢方志刚和高山的分享，还有大家的很多交流，学到了很多很多东西。&lt;/p&gt;

&lt;p&gt;从现在，哦，不，从那天晚上开始，我其实就已经开始期待下一次的沙龙了。&lt;/p&gt;

&lt;h2 id=&quot;附图&quot;&gt;附图&lt;/h2&gt;

&lt;p&gt;卧槽是不是忘了和畅叔蛋哥蓉姐合影了..还有蛋哥的自拍技术啊，跪了。真的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SwiftT/IMG_2295.jpeg&quot; alt=&quot;和方志刚的合影&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和方志刚的合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SwiftT/IMG_2301.jpeg&quot; alt=&quot;和高山的合影&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和高山的合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SwiftT/IMG_2309.jpeg&quot; alt=&quot;合影&quot; /&gt;&lt;/p&gt;

&lt;p&gt;合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SwiftT/IMG_2302.jpeg&quot; alt=&quot;聚餐的火锅&quot; /&gt;&lt;/p&gt;

&lt;p&gt;聚餐的火锅&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/06/23/SwiftT.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/06/23/SwiftT.html</guid>
        
        
        <category>life</category>
        
      </item>
    
  </channel>
</rss>
