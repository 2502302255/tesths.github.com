<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我想回馈iOS开发这个大社区，所以我决定写博客。 写的不好，还请见谅。
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 May 2018 19:16:14 +0800</pubDate>
    <lastBuildDate>Mon, 14 May 2018 19:16:14 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>微信小程序自定义字体</title>
        <description>&lt;p&gt;最近给单位在做小程序，中间需要使用自定义字体。稍微梳理下整个过程。&lt;/p&gt;

&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;在小程序中是可以使用 font-family 属性的，但是官方没有给出有哪些 font 是可以选用的，所以我们无法知道小程序到底可以支持哪些内置的字体。自定义字体就成为了一个问题。&lt;/p&gt;

&lt;p&gt;小程序本身不支持将字体拖进去，然后通过引用的方式来使用字体。即使可以，一个思源字体随便都 10MB，拖进去之后整个大小就超过了小程序的 2MB 限制。&lt;/p&gt;

&lt;p&gt;在网上查找之后还有一个方案，就是使用在线的 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 将字体转换成 base64 的方式。有使用 base64 的方案，但是还是会超过大小。而且 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 对字体的大小本身还存在限制。这就是很麻烦的一件事情。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;那么如何解决呢？我这里提供两个方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一是通过在线应用 url 的方式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这种方案就是将字体文件存在文件服务器上，通过地址的方案引到小程序中，比如我下午使用的 http://o9791noio.bkt.clouddn.com/songti.TTF 这个网址，是七牛的，可以使用！而且这种方案在 &lt;a href=&quot;https://github.com/youzan/zanui-weapp&quot;&gt;zanui-weapp&lt;/a&gt; 的 issue 是有人提到的，链接是 &lt;a href=&quot;https://github.com/youzan/zanui-weapp/issues/101&quot;&gt;使用”单元格”时，icon无法使用&lt;/a&gt;，但是我在真机测试的时候不可以，没有具体排查。我觉得问题的原因有两个，一是网上有些资料说 iOS 必须使用 https，二还是最根本的字体大小的问题，如果字体太大，模拟器就会有错误提示，真机在最开始如果没有加载也会非常麻烦。总之这个方案目前是被我 pass 的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二就是下面我现在使用的我觉得合理的方案。上 &lt;a href=&quot;http://font-spider.org/&quot;&gt;字蛛&lt;/a&gt;。当然这个也不是最好的解决方案。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据我的需求，我需要的个性化字体都是写死了，就是不需要网络加载。那么就可以采用字蛛对字体进行压缩。字蛛会把 html 中用到的字进行提取和压缩，用不到的就 pass 掉。这样会给原来的 ttf 文件进行一个强力的压缩，比如我压缩之后整个 ttf 文件的大小就变成了 8kb。这个效果还是显而易见的，这个时候再采用 &lt;a href=&quot;https://transfonter.org/&quot;&gt;transfonter.org&lt;/a&gt; 将字体转换为 base64 就可以了。&lt;/p&gt;

&lt;h2 id=&quot;脑洞&quot;&gt;脑洞&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;那么假设一下一个情况，如果需要的是动态字体怎么办？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然我暂时还没有这个需求，我想到的方案是，首先后台会将专门的字体进行一个标记，那么在标记之后，使用 font-spider 将原字体进行压缩，再使用 url 获取的方式来动态加载，由于这个时候的字体文件很小，那么就不会有字体太大手机端加载不出来的情况。&lt;/p&gt;

&lt;p&gt;或者就是直接把常用字进行 base64 加密，就省去了网络获取的问题了。&lt;/p&gt;

&lt;p&gt;非常想知道青芒杂志咋弄的 哈哈。&lt;/p&gt;

</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/miniprogram/2018/05/14/miniprogram-font.html</link>
        <guid isPermaLink="true">http://localhost:4000/miniprogram/2018/05/14/miniprogram-font.html</guid>
        
        
        <category>miniprogram</category>
        
      </item>
    
      <item>
        <title>Ruby Memory</title>
        <description>&lt;p&gt;layout: post
title:  查找 ruby 内存泄漏
date:   2018-5-9
categories: server
—&lt;/p&gt;

&lt;p&gt;本文没有深入探讨 ruby 的内存管理问题，本人水平有限，没有去深入看内存管理，而且我现在主要需要实现功能，这里只谈我是怎么解决问题的。&lt;/p&gt;

&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;提到内存泄漏，这是个非常麻烦以及难以解决的问题，ruby 是自动回收内存，不是像 c 一样手动回收，虽然大部分语言现在都是这样，但是这就导致一个非常麻烦的问题，内存泄漏怎么办。我在解决这个问题的时候心里是有阴影的，因为之前写过一个 swift 的图表动画，运行几次之后就变的特别卡。一直也没有找到原因，后来换了一种非常啰嗦的写法才解决。所以这次是心有余悸的。&lt;/p&gt;

&lt;p&gt;事情的起端是我写了一个定时爬取数据的 ruby 程序。基本思路是用 ruby 来调用 python 脚本。然后通过 ruby 的 activerecord 存入数据库。为什么不用 python 直接存数据非得用 ruby 绕一下的理由是，activerocord 很好用，以及我想熟悉 ruby 栈，最后是这样可以和我的服务器 activerecord 无缝对接上，所以就用 ruby 了。&lt;/p&gt;

&lt;p&gt;我的需求是每个整点的第 22 分钟时运行一次，这里使用了 ruby 的 &lt;a href=&quot;https://github.com/jmettraux/rufus-scheduler&quot;&gt;rufus-scheduler&lt;/a&gt;，在这个 gem 里有一个是调用 cron。但是问题在于，真的调用 cron 了吗？我没有看源代码，但是最终根据我内存泄漏的原因，我分析是没有的。起因就是，我把程序上传到服务器上，每次运行 3-4 天之后服务器就无法 ssh，但是可以 ping。查了一下觉得有可能是内存泄漏，于是开始了排查。&lt;/p&gt;

&lt;h2 id=&quot;排查&quot;&gt;排查&lt;/h2&gt;

&lt;p&gt;一开始我傻不拉唧直接在服务器上看内存使用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.CPU占用最多的前10个进程： 
ps auxw|head -1;ps auxw|sort -rn -k3|head -10
2.内存消耗最多的前10个进程 
ps auxw|head -1;ps auxw|sort -rn -k4|head -10
3.虚拟内存使用最多的前10个进程
ps auxw|head -1;ps auxw|sort -rn -k5|head -10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我这里使用了第 2 个。但是这个方法是很傻的，因为你不可能每小时都登服务器，只能大概判断，不过我间隔了一段时间登录之后发现确实程序内存使用上升。于是切换到本地测试。&lt;/p&gt;

&lt;p&gt;我把定时任务换成了一个 while 循环，使用了一个函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def report
  p 'Memory ' + `ps ax -o pid,rss | grep -E &quot;^[[:space:]]*#{$$}&quot;`
          .strip.split.map(&amp;amp;:to_i)[1].to_s + 'KB'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个程序运行一段时间就会发现内存是在增长的，虽然当内存变大，ruby 的自动回收机制会让内存变小，但是总体还是在不断变大。&lt;/p&gt;

&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;

&lt;p&gt;于是就需要开始排查到底是哪泄漏了。这里用到的 gem 是 &lt;a href=&quot;https://github.com/SamSaffron/memory_profiler&quot;&gt;memory_profiler&lt;/a&gt;。这里要注意，不能写成死循环检测，也不能循环次数太多检测，不然依然会导致内存使用过高。这是我遇到的坑。&lt;/p&gt;

&lt;p&gt;使用 memory_profiler 之后，它会显示 retain 的 object，超级神奇！还会显示内存泄漏的行数。我就不阐述了，非常直观明了。&lt;/p&gt;

&lt;p&gt;我的问题在于 ruby 调用 JSON 解析和 Time 的时候。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  allData = JSON.parse(result)
  current_time = Time.now.strftime(&quot;%H&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里实际上 allData 和 current_time 都已经是对象了。而 rufus-scheduler 并没有真正的调用 cron。所以导致每个小时都有 allData 和 current_time。即使内存回收，这个地方也是不会完全回收。&lt;/p&gt;

&lt;p&gt;解决方案很简单，加一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;= nil&lt;/code&gt; 就 ok。至少目前我修改过的程序已经运行 3 天内存依然比较稳定，希望一直稳定下去…&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;

</description>
        <pubDate>Wed, 09 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/09/ruby-memory.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/09/ruby-memory.html</guid>
        
        
      </item>
    
      <item>
        <title>浅谈解决 Instagram 推送失效的问题</title>
        <description>&lt;p&gt;最近由于某些需要。需要关注 Instagram 的博主，ins 本身是提供了推送服务的，但是由于各种原因，经常收不到推送，这就需要自己采取爬虫的形式。&lt;/p&gt;

&lt;h2 id=&quot;推送服务&quot;&gt;推送服务&lt;/h2&gt;

&lt;p&gt;推送服务有很多选择，除了国内的平台都可以。我在这里采取了比较灵活的 telegram bot。tg 是一款很伟大的产品，很简单的方式就可以对接机器人自动发布消息。&lt;/p&gt;

&lt;p&gt;我采用了 &lt;a href=&quot;https://github.com/atipugin/telegram-bot-ruby&quot;&gt;telegram-bot-ruby&lt;/a&gt; 这个 gem，来将 ruby 脚本和 tg 联系起来。&lt;/p&gt;

&lt;p&gt;虽然我更推荐你们使用 python 或者 php，在 GitHub 上有很多和 ins 相关的 python 的库，甚至可以调用到 ins 私有的 api 接口。由于我最近的技术栈都是 ruby 所以就采用了 ruby。&lt;/p&gt;

&lt;h2 id=&quot;爬虫获取&quot;&gt;爬虫获取&lt;/h2&gt;

&lt;p&gt;ins 自身的网络请求是 api 分离的，这意味着如果爬虫爬取到了 json 接口之后可以直接获取 json 的数据。只需要在所有的 url 后面加上 ?__a=1 即可获得 json 格式的数据。&lt;/p&gt;

&lt;h2 id=&quot;爬虫方案&quot;&gt;爬虫方案&lt;/h2&gt;

&lt;p&gt;我采取的方案是每 5s 请求一次。对比前一次和这一次的区别。这里就不详细叙述了。&lt;/p&gt;

&lt;h2 id=&quot;网络请求优化及异常处理&quot;&gt;网络请求优化及异常处理&lt;/h2&gt;

&lt;p&gt;由于我的程序一开始写的不够规范，导致重复请求过多。而 instagram 对于请求频率过于高的 ip 会返回 429 错误。429 是请求次数过多。&lt;/p&gt;

&lt;p&gt;而在请求错误过多的情况下，会导致异常处理。这里我采取 try catch 的方案。&lt;/p&gt;

&lt;p&gt;在逐步优化后我的爬虫现在平均每分钟运行 12 次。已经处于不会被封的范围内了。&lt;/p&gt;

&lt;h2 id=&quot;小彩蛋&quot;&gt;小彩蛋&lt;/h2&gt;

&lt;p&gt;graphql 已经被 Instagram 采用。突然有一天的接口全部是 graphql 了。导致的就是需要重新修改 json 的解析。现在的解析还是有点复杂的。&lt;/p&gt;

&lt;h2 id=&quot;开源&quot;&gt;开源&lt;/h2&gt;

&lt;p&gt;我已经将代码开源在 https://gist.github.com/tesths/24b211eeae5acd5097e3efd647057acb。由于之前写的还有很多 try catch 的异常没有完全写进去，但是因为已经基本满足我的使用需要所以就没有继续完善。&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/linux/2018/04/09/instagram.html</link>
        <guid isPermaLink="true">http://localhost:4000/linux/2018/04/09/instagram.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Heroku 安装 Huginn</title>
        <description>&lt;h2 id=&quot;需要的东西&quot;&gt;需要的东西&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeanywhere.com/&quot;&gt;Codeanywhere&lt;/a&gt; 账号注册（用于 Heroku 环境配置）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://herokuapp.com/&quot;&gt;Heroku&lt;/a&gt; 账号注册&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部分说明&quot;&gt;部分说明&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;由于 Huginn 是基于 Ruby 的，所以需要配置 Ruby 的环境。我们这里使用 Codeanywhere，就省去了配置 Ruby 环境。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://c9.io/&quot;&gt;Cloud9&lt;/a&gt; 是一个云端的 IDE，配置好了安装 Huginn 的所有环境，但是注册需要信用卡。（如果你有信用卡我推荐你使用这个。）我们这里使用 &lt;a href=&quot;https://codeanywhere.com/&quot;&gt;Codeanywhere&lt;/a&gt;，二者没有特别大的区别，Codeanywhere 比 Cloud9 少了 Heroku 的环境，我会详细说明如何在 Codeanywhere 上配置 Heroku 的环境。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部署步骤&quot;&gt;部署步骤&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;登陆 Huginn Github 主页的 &lt;a href=&quot;https://github.com/huginn/huginn#deployment&quot;&gt;Deployment 部分&lt;/a&gt;，找到 Heroku 的按钮。然后点击，就会跳转到你的 Heroku 了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;点完按钮之后会跳转到你的 Heroku 界面。去起个名字。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;起晚名字什么都不点，直接拉到最后点 Deploy 的按钮。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后它就会开始 build 了。等会就行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里 View 就直接到建立好的网站了，Manage App 会跳转到 Heroku 管理界面。我们点击 View。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这样就进入到网页了。这里 Huginn 很人性化的把步骤贴出来了。由于我们用的是自动安装，所以没有创建管理员用户，也有一些东西需要配置。（可以看到已经可以访问域名了）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/heroku-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们对照着 Huginn 的说明来做。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;登陆 Codeanywhere，点击右上角的 Editor。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会进入一个选择界面，如我截图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次的话点完 Create 会让你验证邮箱，验证完邮箱对着上图再做一遍就可以了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们首先要下载新版本的 ruby 环境。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完毕后使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面的话，我写了一个脚本。这样你只需要输入很少的命令就可以了。&lt;/p&gt;

&lt;p&gt;点击文件 新建文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上 &lt;a href=&quot;https://github.com/tesths/tesths.github.com/blob/master/images/huginn/huginn.sh&quot;&gt;huginn.sh&lt;/a&gt;，复制到 Codeanywhere 的文件编辑器里。然后点击右上角保存。&lt;/p&gt;

&lt;p&gt;保存到根目录下，&lt;strong&gt;文件名保存为 huginn.sh&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在你的 Heroku 界面找到下图的地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;替换我写的脚本的以下地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后执行脚本 huginn.sh，bash 是执行的意思。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://walkginkgo.com/images/huginn/code-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行完毕之后。&lt;/p&gt;

&lt;p&gt;先进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd code-huginn/&lt;/code&gt;（这里的 code-huginn 输入你刚替换我文件中的名字就好）。&lt;/p&gt;

&lt;p&gt;在命令行登陆你的 heroku ，就是在命令行输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;之后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku git:remote -a code-huginn&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/setup_heroku&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;剩下的就是开始自动配置了。&lt;/p&gt;

&lt;h2 id=&quot;几点说明&quot;&gt;几点说明&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Heroku 部署很简单，利用我写的脚本应该很快。&lt;/li&gt;
  &lt;li&gt;Heroku 有时间限制，有时候网站会挂，官方推荐可以使用 uptimerobot 来持续网站运行。参考官方文档。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 14 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/huginn/2017/05/14/heroku-huginn.html</link>
        <guid isPermaLink="true">http://localhost:4000/huginn/2017/05/14/heroku-huginn.html</guid>
        
        
        <category>huginn</category>
        
      </item>
    
      <item>
        <title>我的 Kindle 使用技巧</title>
        <description>&lt;p&gt;上学期买了 Kindle，于是 Kindle 就成为了我日常必备的物件…而且我觉得 Kindle 是我买过的超值的一个东西，所以有必要把我的一些使用心得写一写。&lt;/p&gt;

&lt;p&gt;首先要解释一下，当你拿到 Kindle 的时候，会需要一个亚马逊的账号，除此之外每个 Kindle 还会对应一个邮箱（邮箱名可以修改），一般是 @kindle.cn 结尾的。可以在你的 Kindle 设置里或者在亚马逊官网找到。这个邮箱的用途之大。如果你想要什么书的话，直接用邮箱发个附件到你的 Kindle 邮箱，然后 Kindle 连上网就能自动下载这本书了。还可以在主题加上 convert，这时候要发 pdf 格式的话会自动转存 Kindle 格式，不过不推荐，pdf 格式会经常转乱。&lt;/p&gt;

&lt;p&gt;还有要解释的，Kindle 的格式是 azw3 的，mobi 格式也能被 Kindle 读取，pdf 格式也可以，但是 pdf 在 Kindle 上阅读体验只差，因为字太小没法调整。如果是前两种格式的话，可以在 Kindle 中自动调整字体大小，还能重新排版，体验之好。所以如果看 pdf ，还是买一个 iPad Pro 吧。&lt;/p&gt;

&lt;p&gt;解释完了，下面强势安利几个能用得上，可以让你的 Kindle 使用效率翻上 N 翻的东西。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号亚马逊kindle服务号-微信号cn_kindle&quot;&gt;微信公众号：亚马逊Kindle服务号 微信号：cn_Kindle&lt;/h2&gt;

&lt;p&gt;这是亚马逊官方的微信公众号，除了会推荐一些书之外，还组织过读书的活动。不过这个公众号最大的杀器就是，和你的专属 Kindle 邮箱绑定之后，可以将微信公众号的文章推送到你的 Kindle 上。对于我这样一个微信公众号重度使用者，是非常有用的。&lt;/p&gt;

&lt;p&gt;有时候来不及看了就直接传到 Kindle 上。具体使用就是长按你要看的公众号，选择”…“，就会有一个“亚马逊Kindle服务号的”，发送就可以了。也可以打开文章在右上角选择”…“。具体的使用方法关注之后可以自己查。&lt;/p&gt;

&lt;p&gt;除此之外，应该还可以在微信端买书之后直接推送到 Kindle，因我都是用电脑，所以还试过这个功能。&lt;/p&gt;

&lt;h2 id=&quot;微信公众号kindle电子书库-微信号kindle10000&quot;&gt;微信公众号：Kindle电子书库 微信号：kindle10000&lt;/h2&gt;

&lt;p&gt;这个其实不该安利的，但是作为 Kindle 新用户可以使用玩玩。因为这其实就是一个盗版图书的汇集地…我刚开始的时候用，最近都买正版了。所以我不会很详细的说怎么使用，需要的自己去关注就好。&lt;/p&gt;

&lt;p&gt;简单的说就是，它会用你的邮箱给你的 Kindle 邮箱发邮件。具体的绑定不难，就是利用了邮箱协议。关注之后它的说明非常之详细。&lt;/p&gt;

&lt;p&gt;这个的好处在于，你想看什么书直接在微信里输它就会帮你查找，如果确定要看，那么点击推送等一会就可以在你的 Kindle 上看到了。使用之方便是难以言表的。&lt;/p&gt;

&lt;p&gt;除此之外，还有 Kindle杂志公社，微信号：Mag10000，是一家的，可以推送一些杂志到你的 Kindle 上。&lt;/p&gt;

&lt;h2 id=&quot;kindle-特价书&quot;&gt;&lt;a href=&quot;http://t.bookdna.cn/&quot;&gt;Kindle 特价书&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个网站不知道是谁维护的，在知乎上看到之后开始变为日常每天看的网站…&lt;/p&gt;

&lt;p&gt;有两个原因推荐这个网站，一是有时候不知道想看什么书，这样逛逛会发现不少好书。二是确实便宜啊，比如我买的《中国历史那些事儿系列套装》，一共是 明朝那些事儿（全7册）、这里曾经是汉朝（全6册）、唐史并不如烟（全5册）、如果这是宋史（全10册），原价是 88.59 元，我看到特价的时候，只用了 13.99 元就入了那么多书，还是比较划算的。&lt;/p&gt;

&lt;h2 id=&quot;calibre-软件--支持-win-mac-linux&quot;&gt;calibre 软件 —— 支持 Win Mac Linux&lt;/h2&gt;

&lt;p&gt;这个软件是一个电子书管理软件，可以对电子书进行格式转换等一系列操作。还可以直接在电脑上看 azw 格式和 mobi 格式。除此之外还支持制作电子书，曾经用网上提供的 pocket 接口制作了我 pocket 里面收藏的网页放到 Kindle 上看。&lt;/p&gt;

&lt;p&gt;最近发现了 calibre 的新功能。因为在家的时候我在 Kindle 特价书 上会买好多书，想给我妈还有奶奶都搞一份，毕竟他们也算是出了钱的…但是亚马逊官方对于购买的书籍都加了 DRM 保护，不能在购买者之外的 Kindle 设备上看。这里不具体一步一步说怎么去除 DRM 保护了，用到的工具 &lt;a href=&quot;https://github.com/apprenticeharper/DeDRM_tools&quot;&gt;DeDRM_tools&lt;/a&gt;，可以安装 calibre 插件，然后将 azw 格式转化为 mobi 格式就可以在其他设备上看了。&lt;/p&gt;

&lt;h2 id=&quot;push-to-kindle--chrome-插件&quot;&gt;&lt;a href=&quot;http://fivefilters.org/kindle-it/&quot;&gt;Push to Kindle&lt;/a&gt; —— Chrome 插件&lt;/h2&gt;

&lt;p&gt;这个软件是有 Chrome 插件的，绑定邮箱之后可以直接将网页推送到 Kindle 上看。解决了 Pocket 上面的东西想推送到 Kindle 的问题。&lt;/p&gt;

&lt;p&gt;但是如果就这么点功能未免太什么了。Push to Kindle 个人觉得最厉害的是提供了可以编辑的格式。它在抓取网页之后会显示一个 Preview，如图。如果你对排版不满意，可以点击 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt;，进入之后，把你想看的网页内容复制进来，对其中的格式进行排版再推送到 Kindle 上，几乎完美解决了不同网页在 Kindle 上阅读体验的问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kindle.jpeg&quot; alt=&quot;kindle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你还可以用 &lt;a href=&quot;http://pastepad.fivefilters.org/&quot;&gt;pastepad&lt;/a&gt; 制作 PDF 和 EPUB。里面的内容当然是想是什么就是什么了。我曾经还放过代码，然后推送到 Kindle 上…十分不建议用 Kindle 看代码。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;如果你想在 Kindle 上看一些 RSS，可以上&lt;a href=&quot;https://www.dogear.cn/&quot;&gt;狗耳朵&lt;/a&gt;，里面提供了很多网站的 RSS，每天定点推送到 Kindle 上，非常方便。&lt;/p&gt;

&lt;p&gt;Kindle 自带了查词功能，中英文都有。长按就可以了。&lt;/p&gt;

&lt;p&gt;除此之外 Kindle 还可以制作剪切板，看到好的句子可以直接记录在剪切板中，可以用电脑拷出来。具体方法可以网上查一查。&lt;/p&gt;

&lt;p&gt;据说现在 Kindle 还支持微信分享了，没有用过。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;感谢很多人在知乎以及其他网站上分享了很多 Kindle 的使用技巧，我只是针对我自己进行了一些选择，网上还有很多其他的，可以没事查一查。&lt;/p&gt;

&lt;p&gt;Kindle 给我的改变比较大，上学期看了好多书，很多玩手机的时间都看书了，感觉还是学到了不少东西的，看书心里愧疚感也会减少。&lt;/p&gt;

&lt;p&gt;俗话说得好。&lt;/p&gt;

&lt;p&gt;“平板穷三代，Kindle 富一生。”&lt;/p&gt;

&lt;p&gt;愿买了 Kindle 的你可以重新爱上读书。&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/09/06/kindle.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/09/06/kindle.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>工作室总结</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这个总结，想到哪写到哪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大三下的一学期，感觉整个人和工作室融合的非常之密切。因为接手工作室已经大三下了，大三下存在几个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果招新，那么他们只有一学期的成长时间。&lt;/li&gt;
  &lt;li&gt;工作室濒临垮台。&lt;/li&gt;
  &lt;li&gt;我自身的时间有限，不可能全部精力放在工作室上。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;面对上面两个问题，在学期初给自己定了几个目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;招人，工作室不能死。&lt;/li&gt;
  &lt;li&gt;如果招到人，尽我最大努力去教他们一些技术上的东西。&lt;/li&gt;
  &lt;li&gt;尽可能多在工作室呆着。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于招人，我只能说很幸运，在詹导可姐还有各位导生的大力帮助下，我们工作室招人的时候尽然出现了工作室坐不下的情况。当然这里大二占了大多数。也有大一的。当时和闫哥想，这么多人，能最后坚持下来的有多少呢。事实证明，淘汰率依然很高，最终留下的人工作室的位置占了一半。很多人坚持了几星期，也有很多人坚持了大半学期，可能因为课业问题放弃了。最终留下的这些人，我相信他们或多或少学到了很多东西。&lt;/p&gt;

&lt;p&gt;如何用一学期的时间去让招来的人在技术上有一个质的飞越，这是我所思考的。对于这一点，我也在学期初定下了几个目标：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;教会他们用谷歌，用 stackoverflow&lt;/li&gt;
  &lt;li&gt;多看英文资料，多用英文搜索&lt;/li&gt;
  &lt;li&gt;教会他们用 GitHub&lt;/li&gt;
  &lt;li&gt;教会他们看源码&lt;/li&gt;
  &lt;li&gt;如果时间充足，补充一些函数式编程方面的知识&lt;/li&gt;
  &lt;li&gt;后台从 Java 全面换向 Ruby&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实上面几个实现起来说是简单，其实比我预想的要难一点。就拿用谷歌来说，为了让他们用谷歌，我硬是花大价钱买了路由器，连上路由器就能翻墙。但是难点在于，十几年的百度习惯不可能说改就改。再比如多看英文，有几个人能踏踏实实看英文？大部分人我相信对于英文还是有厌恶感的。看英文都厌烦，用全英文的搜索更是难。看英文烦，那么用stackoverflow和GitHub就会烦。再加上刚学，技术实力达不到，看源码也是很费劲的。&lt;/p&gt;

&lt;p&gt;同时对于我自身来说，面对这么多人，加上我和闫哥还想做一些事情，加上课业，就显得很麻烦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在初期的时候，我的精力大多放在培养新人，但是很多时候培养的并不好，我自身的原因也很大，这是我所没有想到的，包括我和闫哥的配合上，也存在很大的问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于我存在的问题，我去学院工作室和许聚龙聊了一次，和詹导聊了一次。也进行过很多思考，并和闫哥讨论，重新分工等等，做了一些改变。但是由于各方面，更多是自己水平不足能力有限，导致工作室很多事务出现了一些拖延等，这是我所需要在后面的日子检讨的。&lt;/p&gt;

&lt;p&gt;除这些之外，针对工作室之前的问题，我也有以下几个想做改进的地方：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;工作室不是全部学技术的地方，大家的感情也很重要，尤其是负责人和下面人的关系。是为了别人更好，而不是压榨大于感情。&lt;/li&gt;
  &lt;li&gt;如果实现盈利，钱大家分，无论创业也好，不创业也好，根据劳动力来发工资。作为项目负责人，可以多拿，但是还是要秉承不压榨。&lt;/li&gt;
  &lt;li&gt;对于盈利的大部分，作为工作室的经费，用于聚餐，学弟学妹们接手工作室之后使用。不会什么都不留下就离开工作室。&lt;/li&gt;
  &lt;li&gt;我们技术很牛逼，但不是最牛逼的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上几点，说我是隐射也好，什么也好，是我想做的一些改变。比如第二点，如果一个项目10万，最后分到真正开发人员手里就两三千甚至更少，不知道还好，如果知道，开发人员心里会怎么想，还能不能踏踏实实的跟着boss干。我不是说不可以压榨，压榨也有一个度。我经历的度，未免是我在学校那么工作室里看到压榨比例最高的了。比如第一点，如果我发自肺腑愿意跟着某个boss干，boss却不给予真心相对，我相信即使是创业团队，也不应该吧。我更是觉得，创业，靠的是大家拧成一股绳，各自分散，能干什么呢？技术也是一样，BAT 再厉害，做不到踏踏实实的去静下来钻研一个技术，阅读源码，技术永远不会提高。&lt;/p&gt;

&lt;p&gt;这是我想去改变的，也是我希望后面工作室的人可以去改变的。&lt;/p&gt;

&lt;p&gt;对于我所提到的上面提到的四方面的目标，这学期基本完成任务。&lt;/p&gt;

&lt;p&gt;工作室没死，活的很好，我们人现在也不少，我也在这学期尽可能的在工作室呆上更多的时间。而且，如果说创业，核心的人肯定是有了。&lt;/p&gt;

&lt;p&gt;甚至这学期最最厉害的，可以说是我们大三的几个，除了我，都找到了很好的实习。&lt;strong&gt;琪姐去了腾讯，闫哥去了搜狐，金妮去了百词斩。&lt;/strong&gt;不能说和我有很大的关系，但是也有那么一点关系吧。这是后面可以去很骄傲的说的，也是工作室很厉害的一个体现。&lt;/p&gt;

&lt;p&gt;在技术上再多说一些。我在用一学期的时间把工作室打造的可以去创业，如果他们有这个新的话。&lt;/p&gt;

&lt;p&gt;举几个例子来说，我们的后台从 Ruby 换到了 Java，这一点杜奎奎的功不可没。Ruby 太适合创业了。再比如，解决问题的能力，经过我一学期疯狂的洗脑，现在虽然很多人不愿意用英文搜谷歌，但是也愿意用中文搜谷歌了。这就意味着，他们解决问题的能力会比一般人强上一大截。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;教会他们用谷歌，用 stackoverflow&lt;/li&gt;
  &lt;li&gt;多看英文资料，多用英文搜索&lt;/li&gt;
  &lt;li&gt;教会他们用 GitHub&lt;/li&gt;
  &lt;li&gt;教会他们看源码&lt;/li&gt;
  &lt;li&gt;如果时间充足，补充一些函数式编程方面的知识&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于我定下的技术上 1-6 的实现，基本上是比较圆满的了。下面分别来说一下。&lt;/p&gt;

&lt;p&gt;对于第一点，除了让工作室的无线网直接可以上谷歌之外，我在最开始的时候经常教他们如何去debug，我是做 iOS 的，但是利用谷歌和stackoverflow，可以很好的弥补技术栈的缺失。比如给张瑞调bug的时候，调了几次，他就意识到，原来英文搜索那么厉害，那么牛逼。在这一点上，我还举行过分享，来证明谷歌比百度好。&lt;/p&gt;

&lt;p&gt;对于 GitHub 的使用，因为没来及做分享，但是花时间写了一篇博客，质量个人感觉还比较高。&lt;/p&gt;

&lt;p&gt;看源码这一点，由于很多能力上的问题，他们的水平可能暂时还打不到，但是我每天说每天说，也很好的给他们洗脑了。&lt;/p&gt;

&lt;p&gt;最后一点，我也进行了分享，给他们说了一点函数式的东西。&lt;/p&gt;

&lt;p&gt;除此之外，我们经常聚餐，我常说，我这学期请你们吃饭的次数，顶上过去我在工作室吃饭次数的总和了，还都是工作室掏钱。我自以为和他们处的都不错，至少我在用心的对待他们，这就可以了。&lt;/p&gt;

&lt;p&gt;这学期做了一个项目，对于分成，很负责人的说，我拿的也就比他们多一两百块钱而已…因为我从对接到各个部分都参与了。剩下的钱，除了聚餐之外，都留给他们用作日常开销了。&lt;/p&gt;

&lt;p&gt;比较负责任的说，算是基本完成了预期的目标。&lt;/p&gt;

&lt;p&gt;中间有一次和迪哥聊了一下，迪哥说我们没有魄力了，不去做东西了，对此我想解释一下。&lt;/p&gt;

&lt;p&gt;首先来说，工作室之前留下的坑，稍微有点大了。技术上，人力上，成长上，都存在很大的问题，我在填，而且我想把这群娃带好，我用了一年半的时间来到现在的水平，我需要用一学期的时间让他们达到，这是需要时间的。而且，工作室不能死在我们手上，说是要交要交，真的就交了？不现实。创业也好，做东西也好，需要看情况来做。不是我不想做，用一学期的时间做别人两学期的事情，这是很耗费精力的。&lt;/p&gt;

&lt;p&gt;当然，这只是说辞，我说了我也存在一些问题，确实也存在，这是我要去改变的，人无完人，我也不是样样精通，所以这学期有什么做的不好的，也需要一些谅解。&lt;/p&gt;

&lt;p&gt;最后还想说一点，给现在的纯技术的工作室。做应用做网站想创业，可以，当然可以，但是难度在逐渐变大，如果有机会我还负责工作室，给我一学期加两个月的时间，我绝对带这个工作室转型。&lt;/p&gt;

&lt;p&gt;下学期，工作室需要过渡的后面的娃们去做了，我也已经尽我最大的努力去给他们营造一个更好的环境和技术栈了。希望他们能很好的发展。&lt;/p&gt;

&lt;p&gt;不过后面的事情谁知道呢？&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/26/cm.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/26/cm.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>大三下学期总结</title>
        <description>&lt;p&gt;有些个文章总得写。&lt;/p&gt;

&lt;p&gt;大三下过的实在是充实到不能更充实。课程是一方面，工作室是一方面，当然这两方面就足够我应付的了。偶尔在加参加个什么比赛，日子就过的浑浑噩噩了。&lt;/p&gt;

&lt;p&gt;再加上大三下，不能保研又不能出国，上课自然而然就显得开始放荡不羁。每天泡在电脑跟前的时间实在是创下了新的记录。我的很多改变来自于工作室，工作室也有很多改变来自于我。这是后话。&lt;/p&gt;

&lt;p&gt;其实大三下是成长比较快的一学期，因为之前的一年半在工作室和学长创业，实在是见到了很多让人觉得心中有力又不知道怎么去表述的感觉。长期的外包做的我每天除了哭累还是哭累。以至于在工作室的时候隔三差五就和琪姐说不想干了。&lt;/p&gt;

&lt;p&gt;但是痛苦总是让人可以有很多蜕变，经历过很多委屈很多不开心，会开始认清这个世界残酷的一面。你愿意掏心掏肺跟着别人干，别人可不会这么觉得，你是下属，就是要压榨你。当然我相信这是个例。当然我希望现实社会这也是个例。&lt;/p&gt;

&lt;p&gt;技术上也是一样，经历了一年半的外包，几乎是全靠自己不断的琢磨，开始逐渐找到正确的学习方式，也开始把自己的一些弯路给小学弟们分享。这也是后话了。&lt;/p&gt;

&lt;p&gt;很久没去做管理才发现自己这方面的才能需要更多的去锻炼了。这学期买了kindle，看了很多书，这一点是这学期非常满意的，看了很多书对自己的各方面都是一个提升的过程。后面这一块也是需要加强的。读书不只是会让个人能力提高，还可以对很多事情的看法产生一个新的理解。&lt;/p&gt;

&lt;p&gt;学习上实在是没啥好说的。这学期精力大多放在工作室上，除了自己学了Swift，参与了T沙龙之外，技术上说实话实在是没有什么提高。倒是各方面都涉及了一点，作为工作室负责人，你不得不去从前端会到后台再到两个客户端。包括我一直很想学的Haskell，这学期也重新捡起来开始学了。暑假也学了一部分。&lt;/p&gt;

&lt;p&gt;这学期还开了公众号，在写作上重新给自己定了目标。也算是大学后面的一个目标。不靠技术吃饭，靠写文字吃饭。如果能做到我会很开心的。&lt;/p&gt;

&lt;p&gt;后面的打算，逐渐打算转方向，计算机的一切，最终都来源于更高深的理论基础，所以后面的重心会更偏向理论一点。&lt;/p&gt;

&lt;p&gt;之前都是感谢信安1班，这学期很好的是，我们每周都会一起打篮球，没事窜寝室闲扯。大家一起锻炼总是好的。这学期几乎是跑了一学期的步，也是我很值得骄傲的一点。&lt;/p&gt;

&lt;p&gt;这学期还要感谢工作室的小学弟们和小学妹们，尤其闫哥琪姐还有金尼。因为我可以自豪的说，我们工作室出了一个搜狐，一个腾讯，一个百词斩，都和我有关系，哈哈。他们的努力是必然的，我的协助也是有一定帮助的这不能否认。&lt;/p&gt;

&lt;p&gt;在工作室看到很多小姑娘总是好的，枯燥的生活总得有点色彩。小学弟们也很努力，至少我现在可以比较放心的觉得工作室不会死了。这也是后话了。&lt;/p&gt;

&lt;p&gt;总之。&lt;/p&gt;

&lt;p&gt;这一学期实在是充实的让我觉得瞬间就没了。&lt;/p&gt;

&lt;p&gt;依旧。&lt;/p&gt;

&lt;p&gt;各种感谢！深鞠躬！爱你们！&lt;/p&gt;

</description>
        <pubDate>Mon, 22 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/22/year3-second-term.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/22/year3-second-term.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Huginn 安装备注（持续更新）</title>
        <description>&lt;h2 id=&quot;安装准备工作&quot;&gt;安装准备工作&lt;/h2&gt;

&lt;p&gt;Huginn 的官方安装指南全部步骤已经经过测试，建议安装时直接复制官方所提供的指令进行安装。如果遇到问题，请查看最下面的 &lt;strong&gt;错误解决方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;对于大多数服务器来说，由于配置不够，基本都会出现 “Cannot allocate memory” 问题，也请查看 &lt;strong&gt;错误解决方法&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;1-需要在开始的时候设置主机语言&quot;&gt;1. 需要在开始的时候设置主机语言&lt;/h3&gt;

&lt;p&gt;如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是&lt;/p&gt;

&lt;p&gt;export LC_ALL=en_US.UTF-8 （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言）
export LANGUAGE=en_US.UTF-8&lt;/p&gt;

&lt;h3 id=&quot;2-需要设置时区&quot;&gt;2. 需要设置时区&lt;/h3&gt;

&lt;p&gt;不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。&lt;/p&gt;

&lt;p&gt;sudo dpkg-reconfigure tzdata&lt;/p&gt;

&lt;p&gt;在Huginn官方的安装wiki中，其实有很多安装问题没有具体列出，我在上一篇博客中做了一些总结。在这篇博客中，我会做成一个安装问题的集合。以方便各位的安装。&lt;/p&gt;

&lt;h2 id=&quot;官方-wiki-部分修正以及注释&quot;&gt;官方 wiki 部分修正以及注释&lt;/h2&gt;

&lt;h3 id=&quot;1-官方最开始有一步-import-nodejs-repository&quot;&gt;1. 官方最开始有一步 Import node.js repository…&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;curl -sL https://deb.nodesource.com/setup_0.12&lt;/td&gt;
      &lt;td&gt;sudo bash -&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 apt-get install nodejs 就可以了。&lt;/p&gt;

&lt;p&gt;因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。&lt;/p&gt;

&lt;h3 id=&quot;2-install-init-script&quot;&gt;2. Install Init Script&lt;/h3&gt;

&lt;p&gt;在这一步中建议直接把&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# web: bundle exec unicorn -c config/unicorn.rb
# jobs: bundle exec rails runner bin/threaded.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这两行的 # 去掉的。&lt;/p&gt;

&lt;h3 id=&quot;3-配置-nginx&quot;&gt;3. 配置 nginx&lt;/h3&gt;

&lt;p&gt;YOUR_SERVER_FQDN 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。&lt;/p&gt;

&lt;p&gt;备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。
作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。&lt;/p&gt;

&lt;h3 id=&quot;4-mysql-安装时不建议装-mysql_secure_installation&quot;&gt;4. Mysql 安装时不建议装 mysql_secure_installation&lt;/h3&gt;

&lt;p&gt;会加强你的密码强度..个人觉得太费事了。&lt;/p&gt;

&lt;h3 id=&quot;5-install-gems-如果报错执行-bundle-install&quot;&gt;5. Install Gems 如果报错，执行 bundle install&lt;/h3&gt;

&lt;p&gt;如标题&lt;/p&gt;

&lt;h2 id=&quot;错误解决方法&quot;&gt;错误解决方法&lt;/h2&gt;

&lt;h3 id=&quot;1-全部安装完毕web打开-css-不显示&quot;&gt;1. 全部安装完毕web打开 css 不显示&lt;/h3&gt;

&lt;p&gt;Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cantino/huginn/issues/1581&quot;&gt;css and image is not load&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-在-bundle-install-的时候显示-cannot-allocate-memory-等一系列和memory相关的报错&quot;&gt;2. 在 bundle install 的时候显示 “Cannot allocate memory” 等一系列和memory相关的报错&lt;/h3&gt;

&lt;p&gt;简单的说，swap 不够了。具体方法见 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;How To Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-mysql-设置-innodb-出现-unknown-system-variable-storage_engine&quot;&gt;3. Mysql 设置 Innodb 出现 ‘Unknown system variable ‘storage_engine’’&lt;/h3&gt;

&lt;p&gt;直接在/etc/mysql/my.cnf 中设置&lt;/p&gt;

&lt;p&gt;[mysqld]
default-storage-engine = InnoDB&lt;/p&gt;

&lt;p&gt;参见：&lt;a href=&quot;http://dba.stackexchange.com/questions/101908/migrate-jira-to-mysql-unknown-system-variable-storage-engine&quot;&gt;Migrate Jira to MySql - Unknown system variable ‘storage_engine’&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/08/10/huginn-install.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/08/10/huginn-install.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>让所有网页变成RSS —— Huginn</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;如果你不知道什么是 RSS，赶紧去查查是什么然后用起来吧，相信我，用了就再也离不开了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我是一个重度 RSS 使用者，一般来说，我获取信息有微博，微信，邮件，还有就是 RSS 。每次打开 Chrome 之后第一个打开的就是 Feedly，看看有没有新的内容更新，省去我了一次性打开多个网站的麻烦。但是问题来了，有些网站没有 RSS 怎么办？&lt;/p&gt;

&lt;p&gt;前几天在&lt;a href=&quot;http://liqi.io/&quot;&gt;利器&lt;/a&gt;的群里，看到有在讨论一个叫 &lt;a href=&quot;https://github.com/cantino/huginn&quot;&gt;Huginn&lt;/a&gt; 的东西，一个叫祥子的朋友还很热心的给大家解答一些关于这个的问题，我稍微查了查，发现这个东西可以解决我一直的一个痛点，就决定花时间来倒腾一下。&lt;/p&gt;

&lt;p&gt;Huginn 是一个 Github 的开源项目，已经上万 Star 了。简单的说这个东西是一个 IFTTT 形式的东西，可以把所有网页转换成 RSS 输出。更简单的说，就是工作流形式，类似于 iPhone 上的 Workflow。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;安装有很多的方式，官方提了有 Heroku，docker，还有服务器。&lt;/p&gt;

&lt;p&gt;祥子专门写了文章介绍怎么利用 Heroku 来安装。&lt;a href=&quot;http://www.jianshu.com/p/2e6e3f845bc3&quot;&gt;Huginn安装教程—建立你自己的IFTTT&lt;/a&gt;，写的非常详细，需要的可以去看这个。&lt;/p&gt;

&lt;p&gt;我是用我日本的 vps 来搭建的，但是由于官方的文档实在是太详细了…导致我想写安装发现没啥好写的，我就把遇到的几个问题略微叙述一下。&lt;/p&gt;

&lt;h3 id=&quot;官方文档安装教程地址&quot;&gt;&lt;a href=&quot;https://github.com/cantino/huginn/blob/master/doc/manual/installation.md&quot;&gt;官方文档安装教程地址&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;坑1-官方最开始有一步-import-nodejs-repository&quot;&gt;坑1. 官方最开始有一步 Import node.js repository…&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这一步官方用了脚本执行，可以不复制那个 curl 开头的，新版本的 nodejs 安装只需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install nodejs&lt;/code&gt; 就可以了。&lt;/p&gt;

&lt;p&gt;因为官方在后面 Install the required packages 中有 nodejs 的安装，所以 Import node.js repository 这一步其实可以不去做。&lt;/p&gt;

&lt;h3 id=&quot;坑2-需要在开始的时候设置主机语言&quot;&gt;坑2. 需要在开始的时候设置主机语言&lt;/h3&gt;

&lt;p&gt;如果不设置主机语言的话，会在后面有很神奇的错误。设置主机语言的命令是&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export LC_ALL=en_US.UTF-8&lt;/code&gt; （需要设置中文自行 google，可能这样设置还不够..最好查一下怎么设置语言）&lt;/p&gt;

&lt;h3 id=&quot;坑3-需要设置时区&quot;&gt;坑3. 需要设置时区&lt;/h3&gt;

&lt;p&gt;不设置时区抓取的时候时间会有问题，不过这一步问题不大。命令如下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dpkg-reconfigure tzdata&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;坑4-全部安装完毕-css-不显示&quot;&gt;坑4. 全部安装完毕 css 不显示&lt;/h3&gt;

&lt;p&gt;Rails 静态资源需要编译，不然 css 不显示。我已经提了 issue ，遇到这个问题可以参看这个 issue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cantino/huginn/issues/1581&quot;&gt;css and image is not load&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;坑5-install-init-script&quot;&gt;坑5. &lt;a href=&quot;https://github.com/cantino/huginn/blob/master/doc/manual/installation.md#install-init-script&quot;&gt;Install Init Script&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在这一步中是 &lt;strong&gt;或&lt;/strong&gt; 的关系，一定要搞明白。&lt;/p&gt;

&lt;p&gt;我选择的是在这步把&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# web: bundle exec unicorn -c config/unicorn.rb
# jobs: bundle exec rails runner bin/threaded.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这两行的 &lt;strong&gt;#&lt;/strong&gt; 去掉了的。&lt;/p&gt;

&lt;h3 id=&quot;坑6-配置-nginx&quot;&gt;坑6. 配置 nginx&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;YOUR_SERVER_FQDN&lt;/strong&gt; 这个改成你的主机ip就可以了。我没有域名不知道域名的怎么弄。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：我没有使用 https ，所以如果有需要 https 自己踩下吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者很耐心，提 issue 的话很快就能回复，而且问题定位比较准确。提的时候先查看有没有重复的，然后记得用英文就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;坑7-在bundle-install的时候显示cannot-allocate-memory---git&quot;&gt;坑7. 在bundle install的时候显示“Cannot allocate memory - git”&lt;/h3&gt;

&lt;p&gt;简单的说，swap不够了..具体方法见&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;How To Add Swap on Ubuntu 14.04&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用&quot;&gt;使用&lt;/h2&gt;

&lt;p&gt;使用的方式我捉摸了很久才搞定..我会举个把网页转换成RSS的详细的例子。&lt;/p&gt;

&lt;p&gt;开始之前首先需要解释几个东西。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;网页的格式是 html，RSS 的格式是 xml。&lt;/li&gt;
  &lt;li&gt;xpath 是你用来确定网页元素的方法，这一步我会有一个很简单的方法来教大家怎么去搞定元素的确定。&lt;/li&gt;
  &lt;li&gt;由于是工作流的形式，所以我们整个的过程其实有两步，第一步是抓取网页的信息，第二步是返回 RSS 的地址。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面开始举例子。我们现在要把&lt;a href=&quot;http://walkginkgo.com/&quot;&gt;我的博客 http://walkginkgo.com/&lt;/a&gt;转换成 RSS。&lt;/p&gt;

&lt;p&gt;按照3中说的，我们需要先抓取网页信息。抓取网页信息，要创建一个 Website Agent。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn1.png&quot; alt=&quot;2016-07-15_huginn1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照图示，名字随便起，其他可以先默认。（全部解释太麻烦）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn2.png&quot; alt=&quot;2016-07-15_huginn2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后是关键的一步，我们要开始确定网页的元素。&lt;/p&gt;

&lt;p&gt;点击 &lt;strong&gt;Toggle View&lt;/strong&gt; 到文本编辑模式。我们要修改我圈出来的两个地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn3.png&quot; alt=&quot;2016-07-15_huginn3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们需要修改url到我们的网址，在这里就是 &lt;strong&gt;http://walkginkgo.com/&lt;/strong&gt; 了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;extract&lt;/strong&gt; 是我们要提取的信息，我们这里要提取博客的题目，网址，发布日期，简述。&lt;/p&gt;

&lt;p&gt;我们现在打开&lt;a href=&quot;http://walkginkgo.com/&quot;&gt;tesths&lt;/a&gt;这个博客进去来看怎么抓取元素。&lt;/p&gt;

&lt;p&gt;在 Chrome 打开，然后选择你要的元素，&lt;strong&gt;右键&lt;/strong&gt;选择 &lt;strong&gt;Inspect&lt;/strong&gt;。可以看到 Chrome 下面的审查元素信息已经出来了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn4.png&quot; alt=&quot;2016-07-15_huginn4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到我们的元素在 &lt;strong&gt;span&lt;/strong&gt; 标签里，这时候我们如图&lt;strong&gt;右键&lt;/strong&gt;选择之后然后复制。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn5.png&quot; alt=&quot;2016-07-15_huginn5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn6.png&quot; alt=&quot;2016-07-15_huginn6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;复制的东西如下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/html/body/div[1]/div/div/ul/li[1]/h2/a/span/text()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把之前的 css 改成 xpath 然后直接复制就可以了。点击下面的 Dry Run，可以看到我们的标题已经搞定了。（css 使用见下面备注）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn7.png&quot; alt=&quot;2016-07-15_huginn7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是还有两个问题，一个是，我们只爬了一个标题，二是标题有空格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn8.png&quot; alt=&quot;2016-07-15_huginn8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决问题1&lt;/strong&gt;，需要把我们的 xpath 改成这样。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/html/body/div[1]/div/div/ul/li/h2/a/span/text()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;是因为 &lt;strong&gt;li[1]&lt;/strong&gt; 代表我们第一个标题，所以把[1]去了就可以了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决问题2&lt;/strong&gt;，需要我们加上一句话。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;value&quot;: &quot;normalize-space(.)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这句话的意思就是把空格去了。&lt;/p&gt;

&lt;p&gt;最后就是这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn9.png&quot; alt=&quot;2016-07-15_huginn9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们把链接按照这个方法也爬下来。找到链接的地方，因为链接在a标签里面，所以我们要加一个 value，选择到 href。剩下我就不具体叙述了，我把最后完整的截图出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn10.png&quot; alt=&quot;2016-07-15_huginn10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日期什么的方法类似，也不多说。这样其实没有什么 html 的基础也可以爬网页了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn11.png&quot; alt=&quot;2016-07-15_huginn11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dry Run&lt;/strong&gt; 之后的结果如图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn22.png&quot; alt=&quot;2016-07-15_huginn22.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;别忘记 &lt;strong&gt;Save&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：官方默认创建用的是 css，Chrome 提供了复制 css 的方式，格式稍微改动成和官方例子那样&lt;strong&gt;空格&lt;/strong&gt;来代替&lt;strong&gt;&amp;gt;&lt;/strong&gt;就可以了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这么我们就完成了工作的第一步，抓取网页，下一步要输出 RSS。&lt;/p&gt;

&lt;p&gt;前面都随便写，记得 &lt;strong&gt;Sources&lt;/strong&gt; 选择我们之前的 tesths blog。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn13.png&quot; alt=&quot;2016-07-15_huginn13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面是继续配置 &lt;strong&gt;Option&lt;/strong&gt;，这就比之前简单了。&lt;/p&gt;

&lt;p&gt;但是注意我们之前的链接没有前面的 &lt;strong&gt;http://walkginkgo.com/&lt;/strong&gt; 这一串，我们要加上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn14.png&quot; alt=&quot;2016-07-15_huginn14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后完整的是这样的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn15.png&quot; alt=&quot;2016-07-15_huginn15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还要记得把你博客的 link 加上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn23.png&quot; alt=&quot;2016-07-15_huginn23.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后选择 &lt;strong&gt;Save&lt;/strong&gt; 就到了这。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn16.png&quot; alt=&quot;2016-07-15_huginn16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到已经有 xml 格式的输出了。&lt;/p&gt;

&lt;p&gt;最后一步我们要烧录 RSS。用到的时谷歌家的服务 &lt;a href=&quot;https://feedburner.google.com/&quot;&gt;feedburner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn17.png&quot; alt=&quot;2016-07-15_huginn17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn18.png&quot; alt=&quot;2016-07-15_huginn18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn19.png&quot; alt=&quot;2016-07-15_huginn19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把网址复制到 Feedly 里面，大功告成！&lt;/p&gt;

&lt;h2 id=&quot;更多备注&quot;&gt;更多备注&lt;/h2&gt;

&lt;p&gt;因为我个人 RSS 主要是看有没有更新，所以抓取的内容不详细，需要抓取全文在手机看的话就自己倒腾啦。&lt;/p&gt;

&lt;p&gt;如果输出 RSS 没有结果的话，可以看下是否允许，没运行点击一下 run 就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn21.png&quot; alt=&quot;2016-07-15_huginn21.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你遇到输出的结果有问题，可以看下是不是event多了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-15_huginn20.png&quot; alt=&quot;2016-07-15_huginn20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果多了就全部删除重新运行。&lt;/p&gt;

&lt;p&gt;总之真的没有很难，最难的是 xpath 获取元素，但是我已经用了最简单的方式来教大家了，剩下的无论是不是专业学编程的都能很快搞定啦，就看大家怎么去玩这个了。&lt;/p&gt;

&lt;p&gt;至于抓取 RSS 的频率，正在测试中..敬请关注更新。&lt;/p&gt;

&lt;p&gt;参考链接&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://walden.farbox.com/post/huginn-a-rss-master-piece&quot;&gt;HUGINN:烧录RSS的神器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/2e6e3f845bc3&quot;&gt;Huginn安装教程—建立你自己的IFTTT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cantino/huginn&quot;&gt;cantino/huginn&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 15 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/life/2016/07/15/huginn.html</link>
        <guid isPermaLink="true">http://localhost:4000/life/2016/07/15/huginn.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Mac状态栏Hack</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;依旧是一篇探究 Mac 软件原理的文章&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;前几天在用小历的时候，发现了这么一个功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status1.png&quot; alt=&quot;2016-07-09_status1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择之后，小历会从这样变到这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status2.png&quot; alt=&quot;2016-07-09_status2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status3.png&quot; alt=&quot;2016-07-09_status3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后我就开始想这个是怎么实现的，这里我们必须要对比一个软件，卖了105.88人民币的著名 Mac 状态栏管理软件 &lt;a href=&quot;https://www.macbartender.com/&quot;&gt;Bartender 2&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在 Bartender 中有一个功能，你可以按住 ⌘ 之后点击图标来拖动来改变它在 Mac 状态栏的位置，就像这样（看网易云音乐）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status4.png&quot; alt=&quot;2016-07-09_status4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果 Bartender 可以的，那为什么小历不能这么做，这样的话用户体验不是更好吗？于是开始了一轮疯狂的 Google 和 Stackoverflow 。&lt;/p&gt;

&lt;p&gt;结果结论是，在老版本的 Mac 操作系统中，是默认支持 ⌘+ 图标改变位置的，但是在 10.11 中，这个功能被取消了，只有使用 Bartender 来改变位置。而在 Apple 给出的 API 中，没有可以改变状态栏图标位置的方法。那么 Bartender 是怎么实现的，小历又为什么不能实现。之后就是接着查。&lt;/p&gt;

&lt;p&gt;经过不断的改变关键字..在某一个 Stackoverflow 中发现了一个叫做 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 的类，这是私有的 API ，在这个方法中，可以实现 Bartender 中的那个改变位置的效果，但是如果使用了苹果私有的  API ，应用是不能上线到 App Store 的，小历上线到了 App Store ，说明没有用到私有 API，之后我就一片混乱了…&lt;/p&gt;

&lt;p&gt;无耐之下，我在微博上给小历的作者发了一个私信，没想到很快小历的作者就给我回复了！他给了我一个 Github 的地址，&lt;a href=&quot;https://github.com/shergin/NSStatusBar-MISSINGOrder&quot;&gt;NSStatusBar-MISSINGOrder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status5.png&quot; alt=&quot;2016-07-09_status5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后我看了一下，正如作者所说，是构造了一个 &lt;strong&gt;Selector&lt;/strong&gt;，但实际上是用 Hack 的方法调用了两个方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)_insertStatusItem:(id)arg1 withPriority:(long long)arg2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (id)_statusItemWithLength:(double)arg1 withPriority:(long long)arg2;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们来看这两个方法。&lt;strong&gt;Priority&lt;/strong&gt; 实际上是确定位置的，优先级越高，位置越靠左。但是问题在于，这两个方法不在 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 中，那么这两个方法又是哪来的呢？&lt;/p&gt;

&lt;p&gt;其实这两个方法是 Apple 留下的后门，这两个方法是 &lt;strong&gt;NSStatusBar&lt;/strong&gt; 中没有公开的 API。&lt;/p&gt;

&lt;p&gt;于是，我决定开始使用 class-dump 来查看未公开的 API。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./class-dump -H -o ~/Desktop /System/Library/Frameworks/AppKit.framework&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令会把 &lt;strong&gt;AppKit.framework&lt;/strong&gt; 中的所有方法都导出一个一个的.h文件。&lt;/p&gt;

&lt;p&gt;在里面找到 &lt;strong&gt;NSStatusBar.h&lt;/strong&gt;，就可以看到这两个方法了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status7.png&quot; alt=&quot;2016-07-09_status7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以在小历当中，怎么说呢..其实是调用了私有的 API，但是不明显，而且调用的很少。所以上线到 App Store 是没有太大问题的。&lt;/p&gt;

&lt;p&gt;下面我们来猜测一下 Bartender 可以把所有图标放到状态栏下面那行的大概原理。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./class-dump -H -o ~/Desktop/private /System/Library/PrivateFrameworks/SystemUIPlugin.framework/Versions/A/SystemUIPlugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令会把 &lt;strong&gt;NSMenuExtra&lt;/strong&gt; 相关的.h头文件导出。还有其他的一系列头文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://o9791noio.bkt.clouddn.com/2016-07-09_status6.png&quot; alt=&quot;2016-07-09_status6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NSMenuExtra&lt;/strong&gt; 中有 drawRect 方法，应该就是先画 view，然后把图标放进去就可以啦。&lt;/p&gt;

&lt;p&gt;至于按⌘拖动那个嘛..我估计，应该是提供了某个方法，可能是在 &lt;strong&gt;NSMenuExtraView&lt;/strong&gt; 中的 &lt;strong&gt;mouseDown&lt;/strong&gt; 方法，但是没文档啥的，我不确定..就得试和看命名了，我就不继续深究了。因为本来也就是一次探究大概原理的文章，主要是我 Bartender 都买了..也就没有什么继续研究的动力了哈哈。&lt;/p&gt;

&lt;p&gt;小小总结一下。&lt;/p&gt;

&lt;p&gt;如果是做 Mac 开发的，class-dump 是个好东西，因为在 Mac 上，你可以不上线 App Store 来分发你的应用，那么我们就可以调用私有  API 来 Hack 很多好玩的功能，这样其实是很好的。比如 Bartender，100多块钱而且基本用 Mac 都会买，还是可以赚上一笔的。&lt;/p&gt;

&lt;p&gt;其次，class-dump 导出的头文件是没有文档的，这个就真的纯靠试和看命名了。需要开发者的耐心和不怕死的心。&lt;/p&gt;

&lt;p&gt;参考链接：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://cocoadevcentral.com/articles/000078.php&quot;&gt;Building NSMenuExtra - A Small Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://duhanebel.wordpress.com/2010/04/02/nsmenuextra-how-to-work-with-undocumented-apis/&quot;&gt;NSMenuExtra – working with undocumented APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shergin/NSStatusBar-MISSINGOrder&quot;&gt;NSStatusBar-MISSINGOrder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tanhao.me/code/1672.html/&quot;&gt;MAC系统状态栏通过插件添加图标MenuExtra Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linfan.info/blog/2012/02/28/cocoa-icon-on-right-side-of-menu-bar/&quot;&gt;Cocoa菜单栏右侧图标的实现&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/mac/2016/07/09/statusbar.html</link>
        <guid isPermaLink="true">http://localhost:4000/mac/2016/07/09/statusbar.html</guid>
        
        
        <category>Mac</category>
        
      </item>
    
  </channel>
</rss>
