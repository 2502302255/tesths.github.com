<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我想回馈iOS开发这个大社区，所以我决定写博客。 写的不好，还请见谅。
</description>
    <link>http://walkginkgo.com/</link>
    <atom:link href="http://walkginkgo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 Jan 2016 11:50:54 +0800</pubDate>
    <lastBuildDate>Tue, 05 Jan 2016 11:50:54 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>创业和情怀</title>
        <description>&lt;p&gt;有一天静姐问我，你说你想创业，是为了什么想去创业。&lt;/p&gt;

&lt;p&gt;为了情怀。（很显然我不是这么回答的，原版回答在最后）&lt;/p&gt;

&lt;p&gt;为什么说为了情怀，因为我觉得我的回答虽然是发自内心的，但是实在是看上去太假。我只能概括为为了情怀。那天和我妈说这个，我妈说，你竟捡大的哈（身为我妈，这么回答我我实在是太伤心了，我妈不应该全世界都不支持我她支持我嘛？？）我就当我妈理解不了，我妈没情怀。&lt;/p&gt;

&lt;p&gt;情怀这个词，大概是从老罗开始要做锤子手机开始风靡互联网。老罗的精神，工匠精神，他们有情怀，更多是对产品有情怀。确实看锤子的手机发布会，会觉得，这个手机，值。迪哥都说，人老罗卖情怀人能卖掉，你能卖掉吗？&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;情怀，什么是情怀？&lt;/h2&gt;

&lt;p&gt;我现在是学生党，喜欢技术，做iOS开发。我们开发会用到很多很牛逼很牛逼的库，简直，每次用我都有感叹一下。你可以看到facebook开源的pop，你可以看到twitter开源的bootstrap。我实在是觉得，太牛逼了。难以言表。&lt;/p&gt;

&lt;p&gt;而且这些库，极度的成熟。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;这和情怀有什么关系？&lt;/h2&gt;

&lt;p&gt;有大了关系了。你见过我们国家大的互联网公司开源像bootstrap那么厉害的库没？我没。可能是我没关注到，但至少github每天的trending我没见着BAT的库。前段时间阿里开源了他们热更新的库，还是在fork别人代码的基础上来继续维护的。&lt;/p&gt;

&lt;p&gt;其实大家心里都明白。BAT的实力，不在facebook之下，阿里一个双12的技术，绝对是世界顶尖的。没啥好质疑的。我从来没说这些公司不好。我只是觉得他们这些公司，应该做的更好。阿里里面有很多人为hadoop贡献代码。但是我觉得他们的能力，应该是引导一个开源项目。而不是仅仅的贡献代码。&lt;/p&gt;

&lt;p&gt;我写博客的初衷，就是想回馈iOS开发这个大社区，我想贡献我自己的力量，我的实力虽然不那么好，但是教教慎哥这样的还是可以的。&lt;/p&gt;

&lt;p&gt;我说我是为了情怀写博客太假，这么说就不假了吧。但是想想其实是一个意思对吧。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;记不得之前谁和我说了，中国这些公司，都是钱驱动的。&lt;/h2&gt;

&lt;p&gt;记不得之前谁和我说了，中国这些公司，都是钱驱动的。&lt;/p&gt;

&lt;p&gt;我到现在都没说中国的互联网公司不好。小道消息的冯老师，从支付宝跳槽去了丁香医生。丁香医生，是我觉得现在做医学方面常识普及甚至用药最好的应用。我不知道冯老师为什么去丁香园，但至少，我觉得冯老师有情怀。&lt;/p&gt;

&lt;p&gt;说句实话，丁香医生，做的真的很好，它能够让真正的医生来科普一系列生活方面医学方面很接近我们的东西。这就很好啊，这是为了人类的生活做了极大贡献的。不觉得很有情怀吗？&lt;/p&gt;

&lt;p&gt;说到这，不得不提百度和谷歌。&lt;/p&gt;

&lt;p&gt;搜片的时候，谷歌会把你屏蔽了，百度呢？百度全家桶的规模远超肯德基全家桶。&lt;/p&gt;

&lt;p&gt;用室友写报告的时候话来说，百度，就是有市场啊。&lt;/p&gt;

&lt;p&gt;是啊，中国那么多程序员用百度。中国那么多学生需要百度文库来写报告。是啊，百度一定有市场。&lt;/p&gt;

&lt;p&gt;谷歌呢？虽然我不得不服，有时候搜中文，谷歌不如百度。但举个最简单的东西，谷歌前段时间开源了他们数据分析的一个东西，虽说网上吐槽的很多。百度你开源一个？谷歌没广告百度你来一个？&lt;/p&gt;

&lt;h2 id=&quot;facebookoffer&quot;&gt;如果facebook给我发offer，今天发，我明天就走&lt;/h2&gt;

&lt;p&gt;有一天，我和慎哥说，如果facebook给我发offer，今天发，我明天就走。&lt;/p&gt;

&lt;p&gt;后来没多久，扎克伯格就把自己的99%股份捐出去了。于是乎我决定，facebook今天给我发offer，我今天就走。真的。&lt;/p&gt;

&lt;p&gt;扎克伯格把钱用在了医学研究方面。上次看到有人说，这个不是一朝一夕可以解决的，需要一个长的阶段。扎克伯格说了，我希望我女儿那时候会好起来。&lt;/p&gt;

&lt;p&gt;不觉得扎克伯格很有情怀吗？&lt;/p&gt;

&lt;p&gt;为人类的事业做贡献。听着好伟大，但是好假，但是确实又是真的。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;中国的大部分互联网公司和创业者，思考的方式是反的&lt;/h2&gt;

&lt;p&gt;他们都在想，我们要为了钱创业。&lt;/p&gt;

&lt;p&gt;但事实上。当你有了一款好的产品，钱自然就来了。&lt;/p&gt;

&lt;p&gt;但是呢，我知道创业者都苦，没钱还累。程序员本来就是高薪职业是吧，不拿钱苦逼的创业。都不愿意。所以呢，迫于很多压力，创业变成了为了钱。&lt;/p&gt;

&lt;p&gt;做好的产品。什么是好的产品？好的产品一定要有盈利点吗？&lt;/p&gt;

&lt;p&gt;思考又是反的。&lt;/p&gt;

&lt;p&gt;只有好的产品会带来大量的用户量，用户量到了，钱自然也就到了。而不是有盈利点所以才有钱。&lt;/p&gt;

&lt;p&gt;做好的产品，什么是好的产品。BAT选择了搜索，购物，聊天。&lt;/p&gt;

&lt;p&gt;方便人类生活的才是好的产品。&lt;/p&gt;

&lt;p&gt;为人类进步做出贡献的一定是好产品。&lt;/p&gt;

&lt;p&gt;但是我可能没那么大的实力去能为人类进步做贡献。但是我至少可以努力方便人类的生活。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;所以&lt;/h2&gt;

&lt;p&gt;我要做有情怀的人所以我决定不考虑钱去认真的尝试去做一些东西。&lt;/p&gt;

&lt;p&gt;所以决定了一些事情，这是后话。&lt;/p&gt;

&lt;p&gt;所以，钱嘛，迟早都会有的，情怀可不是所有人都有的。&lt;/p&gt;

&lt;p&gt;所以，创业，是为了情怀啊。&lt;/p&gt;

&lt;p&gt;所以，我觉得我这么有情怀的人不创业可惜了。&lt;/p&gt;

&lt;p&gt;我们都是有情怀的人，但是不能空谈情怀。我们都是要干大票的人，怎么能没有情怀？&lt;/p&gt;

&lt;p&gt;情怀，不是用钱买的。情怀，也不是用来卖的。&lt;/p&gt;

&lt;p&gt;情怀是用来让生活更美好的。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;我给静姐的回答&lt;/h2&gt;

&lt;p&gt;我说，以前想创业，是觉得创业很厉害，能做点很厉害的东西。后来想创业，觉得大公司饱和，没有什么发展的前景。现在算是彻底想明白了，想为了人类的生活更便利做点贡献。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;最后的最后&lt;/h2&gt;

&lt;p&gt;创业，不是为了钱，是为了情怀。&lt;/p&gt;

&lt;p&gt;顺序不能反了。&lt;/p&gt;

&lt;p&gt;先有情怀，自然有钱。&lt;/p&gt;

&lt;p&gt;先考虑钱，情怀可是会打折的哦😘&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 20:00:00 +0800</pubDate>
        <link>http://walkginkgo.com/life/2015/12/19/feelings.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/life/2015/12/19/feelings.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>iOS开发模式MVVM 2分离业务逻辑</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;习惯性的废话&lt;/h2&gt;
&lt;p&gt;好的，作死的我不复习来写博客了。下星期要开始进入8成全面复习了。&lt;/p&gt;

&lt;p&gt;我知道很多人想看八卦是吧。。我也想写写我最近在干什么，为什么看上去那么忙，动态也有一段时间没更新。有时间写博客在说吧。&lt;/p&gt;

&lt;p&gt;因为项目基本上结束，所以有时间研究mvvm，当然我还在学swift。学swift的原因是，它开源了。当然后面还安排了看一部分源码。期待后面满满干货的博客吧！&lt;/p&gt;

&lt;p&gt;上次博客说了。我们的ViewModel到底在干啥，两件事情，网络请求，逻辑实现。当然，ViewModel不会那么简单。但是，我们先实现这两个。&lt;/p&gt;

&lt;p&gt;那么来吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我想大多初始化定义的代码都能看懂，也没有叙述的必要，我主要把我觉得最主要的几个部分叙述一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;protocol&quot;&gt;代理 Protocol&lt;/h2&gt;
&lt;p&gt;为什么先说代理。这也是之前和慎哥也说过cell里面有点击事件怎么写。（不知道这么写对不对…后面看一部分源码之后会再聊这个话题，先留坑）代理可以干什么，跨Controller传值。跨Controller调方法。&lt;/p&gt;

&lt;p&gt;我们之前写代理，都是在某个Controller里的.h文件最上面创建代理。但实际上，Xcode提供了专门的Protocol文件。之前没有搞明白也是因为我觉得代理必须要再某个文件里声明。&lt;/p&gt;

&lt;p&gt;所以，当我们单独声明了一个Protocol文件的时候，就意味着，这个Protocol可以像一个类一样来声明变量了。&lt;/p&gt;

&lt;h2 id=&quot;raccommand&quot;&gt;RACCommand&lt;/h2&gt;
&lt;p&gt;这个东西是做啥的。我只能说我解释不好，因为我没有完全理解这个东西。我只能把我理解的说出来。&lt;/p&gt;

&lt;p&gt;我们的按钮都有一个点击事件。当点击的时候出发一个函数。&lt;/p&gt;

&lt;p&gt;但是，当我们用了RACCommand的时候，我们的点击事件就可以这么写了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pushBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rac_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACCommand&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithSignalBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;test signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;和我之前写过的这种写法又不一样了。这种写法其实是对button addtarget那个方法的一个rac式的封装。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                            &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;用第一种方法的原因呢，我们可以把点击事件赋值成为一个RACCommand类型的属性。既然可以变成一个属性了，那么就可以重新定义并且赋值。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;分离点击事件&lt;/h2&gt;
&lt;p&gt;我们新建一个FirstViewModel，在FirstViewModel.h中增加一个&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excutePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后我们让刚刚在FirstViewController里定义的那个pushBtn的rac_command，将它赋值为FirstViewModel里的excutePush&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.pushBtn.rac_command = self.viewModel.excutePush;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这么一赋值，就达成了一个目的。按钮的事件在viewModel中执行。&lt;/p&gt;

&lt;p&gt;需要注意的是，RACCommand的block返回的时一个signal。所以，在viewModel中，我们要这么写&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excutePush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACCommand&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithSignalBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;test signal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样，我们就实现了对点击事件的分离。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;分离跳转&lt;/h2&gt;
&lt;p&gt;分离跳转，就要用到我开始说的代理了。
我们做一个MVVMdemoService的代理，我放在Protocol文件夹里了。这个代理就声明了一个方法&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)pushViewModel:(id)viewModel;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们在NSLog(@”test signal”);下面增加&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[self.service pushViewModel:viewModel];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们还要实现这个代理。&lt;/p&gt;

&lt;p&gt;在ray中的&lt;a href=&quot;http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1&quot;&gt;教程&lt;/a&gt;和雷大神的&lt;a href=&quot;https://github.com/leichunfeng/MVVMReactiveCocoa&quot;&gt;MVVMReactiveCocoa&lt;/a&gt;都是新建了一个Impl文件，专门用来跳转，基本思路就是navigation本身就是一个堆栈，其实所有的vc都是在navigation其中的。我们只要控制这个这个最基本的navigation的跳转就可以了。&lt;/p&gt;

&lt;p&gt;我们新建一个MVVMdemoImpl文件，里面有一个初始化的方法。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;- (instancetype)initWithNavigationController:(UINavigationController *)navigationController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们把根navigation传进去来进行逻辑跳转。&lt;/p&gt;

&lt;p&gt;我们在初始化的时候加上这两句核心代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.demoImpl = [[MVVMdemoImpl alloc] initWithNavigationController:self.naviVC];
self.firstViewModel = [[FirstViewModel alloc] initWithService:self.demoImpl];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一句话是声明了一个demoImpl，将navigation穿进去。
第二句话是声明了一个firstViewModel，把第一个demoImpl传了进去。这个地方的疑问在于，我们声明的时候是&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-(instancetype)initWithService:(id&amp;lt;MVVMdemoService&amp;gt;)service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数是一个代理。我们传的时一个NSObject类型的值。而且在MVVMdemoImpl.m中，也没有对于代理的赋值为自己。&lt;/p&gt;

&lt;p&gt;我是这么理解的，如果有不对，还请谅解。&lt;/p&gt;

&lt;p&gt;当我们加入代理MVVMdemoService在MVVMdemoImpl的时候，因为MVVMdemoImpl是一个nsobject类型，而MVVMdemoService也是一个nsobject类型。所以，此时我们的MVVMdemoImpl具有MVVMdemoService的属性了，我们做的就是，让FirstViewModel里的service的代理即是MVVMdemoImpl。&lt;/p&gt;

&lt;p&gt;简单的说。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;就是MVVMdemoImpl == FirstViewModel.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么这样的话，我们的service就可以执行MVVMdemoImpl里的pushViewModel方法了。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;其实上面的最后AppDelegate的赋值代理这一块还不是很明白。有时间再说说吧。好久没写博客就想发一篇了。&lt;/p&gt;

&lt;p&gt;以上完整代码在&lt;a href=&quot;https://github.com/judi0713/MVVMdemo&quot;&gt;MVVMdemo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;https://github.com/leichunfeng/MVVMReactiveCocoa&quot;&gt;leichunfeng/MVVMReactiveCocoa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;http://codeblog.shape.dk/blog/2013/12/05/reactivecocoa-essentials-understanding-and-using-raccommand/&quot;&gt;ReactiveCocoa Essentials: Understanding and Using RACCommand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://stackoverflow.com/questions/19440683/why-does-raccommands-block-return-a-signal&quot;&gt;Why Does RACCommand’s block return a signal?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1&quot;&gt;MVVM Tutorial with ReactiveCocoa: Part 1/2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后的最后，有些事情，我自己不愿去努力去争取我谁也不怪。有些事情我想的很明白我一点都不想想明白。&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 16:01:08 +0800</pubDate>
        <link>http://walkginkgo.com/ios/2015/12/12/ios-mvvm-2.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ios/2015/12/12/ios-mvvm-2.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Mac升级10.11 EI Captain 填坑</title>
        <description>&lt;p&gt;上周日更新了新版的Mac OS 10.11 EI Captain，上午在工作室升级Xcode7还有keynote等等，下午安装操作系统和各种倒腾。最后发现时间都浪费在下午软件不能正常安装上了。特此写篇博客记录一下整个填更新的填坑过程。&lt;/p&gt;

&lt;p&gt;其实我是很反对更新的，一更新就得踩坑，但是强迫症患者没法看到有更新不去更。&lt;/p&gt;

&lt;p&gt;下面开始正文。&lt;/p&gt;

&lt;h2 id=&quot;homebrew&quot;&gt;1. homebrew不能使用&lt;/h2&gt;

&lt;p&gt;homebrew本身是需要Xcode的command line的，而新版的Xcode7，应该是会把之前的command line删除了..所以即使你用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer&lt;/code&gt;但是你还是没有办法使用homebrew，你在使用homebrew的时候，不论什么命令，都是&lt;code class=&quot;highlighter-rouge&quot;&gt;Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当然，有&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo xcodebuild -license&lt;/code&gt;的原因，就是你没有同意xcodebuild的license。当然这些我都试了。还是不行，后来查查发现是command line没有选中的原因。&lt;/p&gt;

&lt;p&gt;解决方法：首先&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select -p&lt;/code&gt;一般默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer&lt;/code&gt;
但是Xcode7你需要切换到/Library/Developer/CommandLineTools，这时候就好了。&lt;/p&gt;

&lt;p&gt;很多人的homebrew不能用是因为权限问题，在使用homebrew doctor的时候会提醒你。这点就不说了。&lt;/p&gt;

&lt;h2 id=&quot;xtrafinder&quot;&gt;2. Xtrafinder不能使用&lt;/h2&gt;

&lt;p&gt;Xtrafinder更新完之后会提醒你怎么做，这就是苹果的rootless机制导致的，开开就OK了。&lt;/p&gt;

&lt;p&gt;我想说的就是Xtrafinder会挡住finder一部分，前天好像已经出了更新，但是源没有换，所以还是0.25.6版本。V2ex上有人问了，大家都一样，不是电脑的问题所以不要着急。&lt;/p&gt;

&lt;h2 id=&quot;gem&quot;&gt;3. gem更新&lt;/h2&gt;

&lt;p&gt;gem安装的东西，反正我的是都没了…因为苹果把/usr (except /usr/local)里的东西都再见了。需要把gem的默认安装路径重新设置一下。
所以我的rails还有博客的jekyll，当然，还有我的cocoapods都挂了。需要重新安装。&lt;/p&gt;

&lt;p&gt;网上好多方法，说自定义GEM_HOME等等。我觉得都不太好，在stackoverflow上看到一个方法很好，分享一下。&lt;/p&gt;

&lt;p&gt;打开terminal修改~/.gemrc&lt;/p&gt;

&lt;p&gt;增加&lt;code class=&quot;highlighter-rouge&quot;&gt;gem: -n/usr/local/bin&lt;/code&gt;这样就把gem的默认安装环境换到了/usr/local/bin下，这样更新gem就没问题了。&lt;/p&gt;

&lt;h2 id=&quot;xcodealcatrazwindow&quot;&gt;4.Xcode的Alcatraz不在window下显示&lt;/h2&gt;

&lt;p&gt;也就自己的Mac作大死解决这个问题。&lt;/p&gt;

&lt;p&gt;网上有很多在github提issue，我看了很多，对着做了很多。里面说的都很详细，在此不贴，最后面有链接。&lt;/p&gt;

&lt;p&gt;基本上原因就是，你的Alcatraz没有加入Xcode的UUID。&lt;/p&gt;

&lt;p&gt;这里说明一下，每个Xcode版本的UUID不一样，所以最好的方法是先获取Xcode的UUID。&lt;/p&gt;

&lt;p&gt;命令是&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后加到一个plist文件然后重启Xcode就可以了，大部分都是这样解决了。&lt;/p&gt;

&lt;p&gt;当然，我用这个方法没有解决。万念俱灰下，重新用了百度..想看看国内人怎么解决的，记不得在cocoachina还是csdn看到一个人说，那些方法我都没有，我把Alcatraz下载下来运行了一下就ok了…&lt;/p&gt;

&lt;p&gt;于是乎，我上github上下载了Alcatraz，运行了一下。。我也ok了。。&lt;/p&gt;

&lt;p&gt;基本上遇到的大坑就这几个，踩完也没啥了。&lt;/p&gt;

&lt;p&gt;但是我app store更新完新版本的Xcode7之后再安装Xcode6，app store就会更新我的Xcode6..而且我的homebrew也是只能识别我的Xcode6了…我一直无法解决。还有我的XQuartz一直显示过期也没法解决。简直，强迫症。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最后唠两句。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近为啥没更新博客，我会说我同时写了几份代码么…完全没有时间。。
最近的心凉的很透彻。晚上看着微信洗脸。唉，说好了四星期之后做点其他事情，这都五星期了，还在写代码。在意的东西太多，不放弃一些永远只能这样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;还有，暂时是决定考研了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;有些事情，唉，就这了，没戏的事情总在想也没啥意义..还是忙一忙充实充实就不想了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;1.&lt;a href=&quot;http://guojianxiang.com/posts/2015-10-06-Update_OSX_EI_Captain_Problems.html&quot;&gt;关于 OSX 升级到 EI Captain 的解决方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/Homebrew/homebrew/issues/44071&quot;&gt;Failure while executing: /usr/bin/otool -L /usr/bin/install_name_tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;http://stackoverflow.com/questions/17980759/xcode-select-active-developer-directory-error-on-osx-mavericks&quot;&gt;xcode-select active developer directory error on OSX Mavericks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;http://stackoverflow.com/questions/31972968/cant-install-gems-on-macos-x-el-capitan&quot;&gt;Can’t install gems on MacOS X “El Capitan”&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Nov 2015 03:54:59 +0800</pubDate>
        <link>http://walkginkgo.com/mac/2015/11/19/mac-eicaptain.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/mac/2015/11/19/mac-eicaptain.html</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>iOS开发框架MVVM 1理解开发模式(填坑)</title>
        <description>&lt;p&gt;好了，我作大死的连续第五天奋斗在电脑跟前了，好的。&lt;/p&gt;

&lt;p&gt;接着上次写的&lt;a href=&quot;http://walkginkgo.com/ios/2015/05/04/ios-mvvm-1.html&quot;&gt;iOS开发框架MVVM 1理解开发模式(占坑，未写完)&lt;/a&gt;来继续聊聊我们的MVVM。&lt;/p&gt;

&lt;p&gt;昨天聊了网络层的封装，今天聊聊开发模式，架构师应该干的事情。我一个编程界的新手也想聊聊，昨天说了要做高素质的流氓。今儿只是聊聊我对MVC和MVVM的感受和想法，具体的概述看我第一篇介绍。因为打字的时候就不会乱七八糟的想一些事情了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;再次强调。今天只聊思想，概述，国庆结束之前一定上代码，纯干货。保证你能上手简单的MVVM。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;开始今天的话题。&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;首先聊聊Model&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么先聊Model，因为不论是MVC还是MVVM。都有一个是统一的，那就是Model。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还是那句话，全聊我自己的思考和看法。和专业的解释有差距还轻喷。&lt;/p&gt;

&lt;p&gt;之前也说过我对Model的理解，今天重新聊聊什么是Model。我觉得做后台的同学可以更好的理解Model。Model就是一系列和数据库有关的东西，对数据的操作等等。&lt;/p&gt;

&lt;p&gt;那么在iOS里呢。&lt;/p&gt;

&lt;p&gt;在任何一个App里都会有数据获取的地方。在iOS里就是Model层。&lt;/p&gt;

&lt;p&gt;后台给我们传输数据的时候传输的都是json数据，那么我们必须要将json转model。这也是大公司面试喜欢问的，怎么json转Model。&lt;/p&gt;

&lt;p&gt;说到这，必须要说个东西。对象。&lt;/p&gt;

&lt;p&gt;json转换成Model，其实就是将json转换成一个对象。然后对这个对象进行操作。我们得到Model之后就可以用”.”操作符来对Model里的属性进行操作了。&lt;/p&gt;

&lt;p&gt;json转Model之后，我们的Model层里就有了数据。&lt;/p&gt;

&lt;p&gt;所以说，很多情况下，我们称为Model为模型，前段时间上软件工程这门课，老师好像是说叫数据层，我觉得这个称呼非常的合理。&lt;/p&gt;

&lt;p&gt;我们常说解析json解析json，类比后台的建表，我们的Model实际上就是把建表变成了json的映射而已。&lt;/p&gt;

&lt;p&gt;当然，如果只把Model层解释为json数据的解析，肯定是有问题的。当我们从本地数据库取数据的时候，还是需要用Model来解析，这基本上和后台就更像了，但是不同的是，我们把本地数据库里的数据取出来之后，在此转换为一个对象。然后去使用。&lt;/p&gt;

&lt;p&gt;最后来总结一下Model。Model层可以没有吗，当然不能，因为无论是后台开发还是App，Model层是一切数据的来源。数据来了才能有一个完成的App。但实际上来说，我们调用Model层的语句可能很少。最主要代码还是集中在VC或者是VVM。&lt;/p&gt;

&lt;h2 id=&quot;mvc&quot;&gt;聊聊MVC的弊端&lt;/h2&gt;

&lt;p&gt;为什么不直接聊MVC，因为MVC是大众开发iOS的模式。无论是后台还是iOS，虽然说iOS的MVC和后台的有差别，但是还是没啥好说的。是个iOS开发都知道MVC。在此也不做过多的阐述。&lt;/p&gt;

&lt;p&gt;直接聊聊iOS中MVC的弊端。&lt;code class=&quot;highlighter-rouge&quot;&gt;实际上可以说只聊聊VC。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我只写过一点点Rails。先来说说我对Rails的MVC的看法，再和iOS的MVC一比较，立马就看出弊端了。&lt;/p&gt;

&lt;h2 id=&quot;railsmvc&quot;&gt;Rails的MVC&lt;/h2&gt;

&lt;p&gt;在rails中，C是对于View中的方法进行描述。举个最简单的例子，我们在View中需要实现index，列出所有文章的列表。那么就在C中写index函数的定义就好了。不用在View里写任何东西。&lt;/p&gt;

&lt;p&gt;而View，就是你所看到的html网页。只需要加上简单的触发动作等等就ok。&lt;/p&gt;

&lt;p&gt;好了，到这大概能明白View和C的关系了。&lt;/p&gt;

&lt;p&gt;下面来说说iOS中的MVC&lt;/p&gt;

&lt;h2 id=&quot;iosmvc&quot;&gt;iOS的MVC&lt;/h2&gt;

&lt;p&gt;MVC，实际上的为的就是让各个层次负责不同的任务。那么View，Controller应该分开。&lt;/p&gt;

&lt;p&gt;但是在iOS中，我们的View视图和Controller是在一起的！我们只能通过对View的抽象来调用，但是免不了在Controller里写下大量的View代码。&lt;/p&gt;

&lt;p&gt;这就是问题了。&lt;/p&gt;

&lt;p&gt;之前的一篇博客也聊过这个问题。&lt;/p&gt;

&lt;p&gt;所以针对Controller和View分不开的问题，根据WF的架构方式，提出了MVVM。&lt;/p&gt;

&lt;p&gt;那么，今天的半干货部分。自此开始。&lt;/p&gt;

&lt;h2 id=&quot;mvvm&quot;&gt;MVVM到底在做什么&lt;/h2&gt;

&lt;p&gt;想了一下，与其废话半天说MVVM和MVC不如直接解释MVVM每部分到底在干嘛，这样一说，立马就知道MVVM的好处了。&lt;/p&gt;

&lt;h3 id=&quot;mvcview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在MVC中，占据我们很大代码量的是什么。一是大量的View视图，二是大量的网络请求，三是部分逻辑。&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;mvvmviewmodel&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;而在MVVM中，我们的ViewModel层干啥，一是做网络请求，二是逻辑的实现&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;我不贴图了，我觉得看了那么多文章都不如直接说每部分是干什么的这样直接了当。&lt;/p&gt;

&lt;p&gt;所以综合比较一下。下面MVC分别用M1,V1,C1来表示，MVVM用M2,V2,VM2来表示，看看发生了什么变化。&lt;/p&gt;

&lt;h3 id=&quot;m1-m2-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M1-&amp;gt;M2 没变化&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;c1-v2-iosviewcontrollerviewview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C1-&amp;gt;V2 以后iOS中的ViewController即是今天的View。少了网络请求和逻辑处理部分，只对View进行操作&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;v1-v2-viewmvvmcommonviewview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;V1-&amp;gt;V2 对于我个人来说，以后我会再单独抽象一个View在MVVM中来处理Common的View还有需要封装的View。&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&quot;c1-vm2-vm2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C1-&amp;gt;VM2 这里VM2，只进行逻辑和网络请求等等。&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;那么，在MVVM中最重要的是什么？是数据的绑定。&lt;/p&gt;

&lt;p&gt;具体可以看WF的架构。&lt;/p&gt;

&lt;p&gt;我们采用RAC是为了将MVVM中的三个部分的数据进行绑定，一旦某个部分的数据有改变，那么绑定的另一个界面的数据就会改变。&lt;/p&gt;

&lt;p&gt;好的，其实真正关键的没多少话，都标记了。这些大概明白，后面进行起来就快了。&lt;/p&gt;

&lt;p&gt;这我会在后面的博客开始叙述的。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;写在后面&lt;/h2&gt;

&lt;p&gt;这系列的博客想干什么。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对最近学习MVVM的一个总结。&lt;/li&gt;
  &lt;li&gt;MVVM困惑了我快一年了，我想采用这种新的开发模式来开发了。&lt;/li&gt;
  &lt;li&gt;我想用最通俗的语言，一个学生党的语言来更快的让你上手MVVM。&lt;/li&gt;
  &lt;li&gt;让创萌工作室以后的iOS开发可以更快的学习iOS开发。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我会一点点的来解释ViewModel层在干什么。这是第一篇博客，理论部分已经普及差不多了。&lt;/p&gt;

&lt;p&gt;下一部分，我们开始利用RAC来分离业务逻辑的代码。后面的文章每篇文章会上代码上demo，也不写多内容，每次一点点，多写几篇博客。&lt;/p&gt;

&lt;p&gt;我相信我写完你看完，我们都能征服MVVM！&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Oct 2015 18:37:00 +0800</pubDate>
        <link>http://walkginkgo.com/ios/2015/10/05/ios-mvvm-11.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ios/2015/10/05/ios-mvvm-11.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>根据Coding的iOS端重新用RAC封装网络请求</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;好久没写博客了。之前一直在研究MVVM这种新的开发模式。也算是沉淀了一段时间，国庆期间可能还会写写MVVM。今天要聊的是创萌工作室的iOS客户端网络请求的封装。因为很多原因封装的还不够好存在很多问题今天写出来只是想把最近做的事情写出来作个记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我写这篇文章已经做好了被喷死吐槽死的准备了，因为我感觉我封装的太有问题了，但是又真的很想写一写，毕竟对我来说确实解决了一个大问题。&lt;/p&gt;

&lt;p&gt;另外:链接不知道为啥都不变色了😭基本上我都给链接了，就凑合一下吧…&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;先简单的说说我们的网络请求转变过程&lt;/h2&gt;

&lt;p&gt;加入工作室一年。一共做了有三四个项目了。我先大概叙述一下我们的网络请求的转变过程&lt;/p&gt;

&lt;h2 id=&quot;afnetworking&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第一阶段 直接调用AFNetworking&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;第一个项目那时候懵懂无知，每个界面都直接调&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;AFNetworking&lt;/a&gt;。这样导致的问题就是代码量骤然增加。&lt;/p&gt;

&lt;h2 id=&quot;ytknetwork&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第二阶段 直接调用YTKNetwork&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;第二个项目刚做的时候唐巧开源了他们在猿题库封装的&lt;a href=&quot;https://github.com/yuantiku/YTKNetwork&quot;&gt;YTKNetwork&lt;/a&gt;。那时候还是懵懂无知，还是在每个界面都开始直接调YTKNetwork。人家封装的那么好的东西就被我用成这个栽子，简直对不起巧大。我记得有个界面好像有5条网络请求，可以想象代码的冗余度。&lt;/p&gt;

&lt;h2 id=&quot;reactivecocoa&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第三阶段 开始使用ReactiveCocoa&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;因为在做第二个项目的时候我和迪哥负责不同的客户端。迪哥在看了limboy的&lt;a href=&quot;http://limboy.me/ios/2014/01/05/ios-rest-client-implementation.html&quot;&gt;基于AFNetworking2.0和ReactiveCocoa2.1的iOS REST Client&lt;/a&gt;开始将网络请求剥离到一个专门的界面，这样每次就不用写很多的东西了。&lt;/p&gt;

&lt;p&gt;limboy用了&lt;a href=&quot;https://github.com/CodaFi/AFNetworking-RACExtensions&quot;&gt;AFNetworking-RACExtensions&lt;/a&gt;来实现回调的效果。简单的说就是subscribe一个信号，然后信号会返回一个信号回来，这样就实现了将网络请求部分剥离的效果。&lt;/p&gt;

&lt;p&gt;我在第二个项目基本上结束的时候上线了一个自己独立开发的app，里面就是用了这样的方法。&lt;/p&gt;

&lt;p&gt;这学期在做项目的时候还是在沿用迪哥的代码，但是我发现了很多问题。&lt;/p&gt;

&lt;p&gt;一是limboy在写rac代码的时候用的concat无法完成网络请求再请求。简单的说，服务器在返回告诉我session失效的时候我先需要后台自动登录然后再次网络请求。我再写的时候concat无法实现再次网络请求，我也不太明白为什么，试了各种方法都不行。这是很困惑我的我后面还需要再次研究一下。&lt;/p&gt;

&lt;p&gt;二是再判断服务器返回的东西的时候，需要判断状态码。如果成功，那么会有json数据返回回来，如果失败则没有数据。出现这样的情况如果我在Acontroller调Bcontroller的网络请求则还需要判断是不是返回了一个数组或者对象，如果是，开始对数据进行处理，如果不是，还得重新进行网络请求，因为说明session失效了。&lt;/p&gt;

&lt;p&gt;这样还是导致了网络请求部分有大量的代码。&lt;/p&gt;

&lt;h2 id=&quot;codingios&quot;&gt;根据Coding的iOS重新封装网络请求&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://coding.net/u/ease/p/Coding_iOS/git&quot;&gt;Coding的iOS客户端&lt;/a&gt;是开源的，在Github和Coding官网都有。我放的链接是一个下载下来就能跑起来的。(强迫症，跑不起来的代码都不想看..不过现在看MVVM好多都跑不起来也硬着头皮看了)&lt;/p&gt;

&lt;p&gt;Coding的网络请求自己看了。Coding是用block来进行回调的。至于这一块选择notice还是block还是delegate，可以参考&lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html&quot;&gt;iOS应用架构谈 网络层设计方案&lt;/a&gt;我算是认真看了，但是不是很能写的出来…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;插一句话，我们为什么不用block。因为迪哥也不太会block就直接上rac了，我之前的博客写过简单的block，我在写代码的时候用delegate和notice比较多所以对block的实践比较少。这是我自身的问题。而且说实话我觉得用rac挺好的，因为block加上typedef啥的其实很多东西的，不像rac直接调就完事了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;下面开始今天的算是干货的东西&lt;/h2&gt;

&lt;h2 id=&quot;coding&quot;&gt;1. 分析Coding网络请求&lt;/h2&gt;

&lt;h3 id=&quot;coding-1&quot;&gt;&lt;em&gt;Coding的网络请求我觉得可以总结为&lt;/em&gt;&lt;/h3&gt;

&lt;h3 id=&quot;block---block---afnetworking&quot;&gt;block -&amp;gt; block -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;下面来解释一下，首先第一个block是我们的主viewcontroller，也就是我们逻辑部分和视图部分。首先第一个block调Coding_NetAPIManager里的函数。然后在Coding_NetAPIManager再调CodingNetAPIClient里的函数。&lt;/p&gt;

&lt;h3 id=&quot;codingcodinghttpscodingnetueasepcodingiosgit&quot;&gt;(具体Coding代码请看&lt;a href=&quot;https://coding.net/u/ease/p/Coding_iOS/git&quot;&gt;Coding客户端&lt;/a&gt;代码的链接)&lt;/h3&gt;

&lt;p&gt;我们倒着来说。&lt;/p&gt;

&lt;h2 id=&quot;afnetworking-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第三部分 AFNetworking&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在我分类的AFNetworking里也就是CodingNetAPIClient里，Coding进行了一件事情，那就是进行AFNetworking的网络请求。&lt;/p&gt;

&lt;p&gt;在获取到数据的时候的对reponse进行一个判断。在判断数据的时候，如果数据有错误，则直接显示错误的msg，如果没有错误，那么则不返回任何东西。&lt;/p&gt;

&lt;p&gt;然后在网络请求中判断，如果有错误，那么返回nil和id类型的error。如果没错误，返回response和nil。&lt;/p&gt;

&lt;h2 id=&quot;block&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第二部分 block&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在这部分里，回调的结果有两种，一种是有数据，一种是没数据。其实到这就行了。那么现在在这第二个部分干什么呢，json转model。就这么简单。返回的东西，如果有数据返回，那么就再次返回model或者是data和nil，如果没有数据返回，就返回nil和error。&lt;/p&gt;

&lt;h2 id=&quot;block-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第一部分 block&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;到这里，其实只要判断有无数据就可以啦。&lt;/p&gt;

&lt;p&gt;好了。下面我们只需要用RAC来替换block就完成了。当然了，中间有坑，不会那么简单的…&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2. 改写网络请求&lt;/h2&gt;

&lt;p&gt;我要上代码了。依然三部分。我们还是倒着来。我放关键的代码在这。&lt;/p&gt;

&lt;p&gt;既然我把Coding的代码分成了&lt;/p&gt;

&lt;h3 id=&quot;block---block---afnetworking-1&quot;&gt;block -&amp;gt; block -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;那么我的基本上就可以说是&lt;/p&gt;

&lt;h3 id=&quot;rac---rac---afnetworking&quot;&gt;RAC -&amp;gt; RAC -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;也是倒着来。&lt;/p&gt;

&lt;h2 id=&quot;afnetworking-2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第三部分 AFNetworking&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;这是AFNetworking网络请求&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; 
&lt;span class=&quot;c1&quot;&gt;//一切仿照Coding
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONAndHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONAndHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DebugLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;===========response===========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//这里调用下一个部分的函数
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoShowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoShowError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
             &lt;span class=&quot;nf&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;DebugLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;===========response===========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;replayLazily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;这是对返回值的处理&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; 
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;responseJSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoShowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;autoShowError&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aPath&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseJSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//如果服务器返回的值不是正确有数值的话
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorWithDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//如果服务器返回session失效的错误码
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//用户未登录
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWork&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//由于没登陆那么这里调用第二个部分RAC的登陆方法，进行重新登陆
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//这时有数据返回则再次发出网络请求
&lt;/span&gt;                    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoShowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;这是重新登陆后再次进行网络请求&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aPath&lt;/span&gt;
                      &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt;
                  &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWorkCheck&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedJsonClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;rac&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第二部分 RAC&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;/MyList.do&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWorkCheck&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedJsonClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;rac-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第一部分 RAC&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWork&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;看代码的时候最好是从第一部分看，我为了突出重点所以把第三部分放到最前面了。基本上我就干了一件事情，把block改写为RAC。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;3. 问题以及填坑&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;问题一：回调两个值&lt;/h3&gt;

&lt;p&gt;其实用RAC改写block是不难的，难的在于block传值传了两个回去，RAC我没找到可以传两个值的地方，于是我用了RACTuplePack，这个是RAC里一个宏定义，可以打包变量。然后在信号收取端利用&lt;code class=&quot;highlighter-rouge&quot;&gt;RACTupleUnpack(id resultData, NSError *error) = x;&lt;/code&gt;来解加压缩变量(用词不准确见谅)&lt;/p&gt;

&lt;p&gt;在这里非常感谢&lt;a href=&quot;supermao.cn/zhe-yang-hao-yong-de-reactivecocoagen-ben-ting-bu-xia-lai/&quot;&gt;这样好用的ReactiveCocoa，根本停不下来&lt;/a&gt;这篇博客。看到了RACTuplePack这个宏定义。&lt;/p&gt;

&lt;h3 id=&quot;session&quot;&gt;问题二：如何在服务器返回session失效之后进行两次链接请求，一次后台自动登录，一次重新进行网络请求&lt;/h3&gt;

&lt;p&gt;在Coding的代码里，我看到如果未登录是会弹出登录界面。但是我们要求是后台登录然后重新请求。&lt;/p&gt;

&lt;p&gt;我开始是想在get请求那部分直接在此调get的网络请求。但是不会执行两次网络请求。&lt;/p&gt;

&lt;p&gt;之前的项目是在vc的界面判断没数据则在此调用函数。如果那样的话我不是白封装半天了…于是决定封装到network里，我就在重新登录后判断有无数据，有数据则意味着登录成功，登录成功，在此调一个登录的函数。&lt;/p&gt;

&lt;p&gt;虽然这样看上去就不合理，但是是我能尝试出来的一个办法了…尝试了好几天，查了半天也没有类似的解决方案。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;问题三：为什么有时候不会执行网络请求&lt;/h3&gt;

&lt;p&gt;我在解决问题二的时候就出现这种问题，不能进行网络请求，我只是一个简单的调函数。但是，但是，但是，在rac里必须要subscribeNext，如果不subscribeNext则不会调！这是需要记住的。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;4. 还存在的问题以及不足&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coding对于Get请求还做了缓存，我没做。后面会慢慢加上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RAC是对于很多东西的一个大集合，比如block比如KVO等等。所以需要对iOS的内存管理机制进行一个深入理解，这是我一直所欠缺的。这个问题在我解决问题二的时候出现了好几次报错，都是这个问题。但是我却无法解决。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding中还用到了很多显示错误的MBProgress等等，我在此都没写，如果想仔细研究去看Coding的源码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding的网络请求还有很多对文件的处理，post请求等等，我现在只改写了Get和Post请求。后面需要把Coding这一套都好好的研究一下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于RAC的理解还是不够，在整个过程中遇到很多问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;codingcoding&quot;&gt;最后的最后感谢Coding将他们的客户端开源出来，感谢为Coding贡献代码的工程师。是你们让我学到了更多的东西😘&lt;/h2&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 03 Oct 2015 18:35:01 +0800</pubDate>
        <link>http://walkginkgo.com/ios/2015/10/03/network.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ios/2015/10/03/network.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Mac安装Aircrack-ng</title>
        <description>&lt;p&gt;9.4号中午去外面吃完冒菜回来都快三点了，这个点尴尬的不行。于是就去工作室倒腾点东西。也不想写代码，就开始各种在mac下装软件。项目基本上暂时没有什么要特别忙的，我也不能总写，都写了慎哥就没得写了。今晚上就把之前做的东西来个小记。&lt;/p&gt;

&lt;p&gt;想到的是破译wifi，当然最终因为各种因素没破译成功。不过中间过程还是很享受的。下面开始。&lt;/p&gt;

&lt;p&gt;百度了一下。有一篇&lt;a href=&quot;http://www.yyker.com/20131109457.html]&quot;&gt;MACOS苹果系统下破解无线网WPA,WPA2密码&lt;/a&gt;。用到的主要工具是Aircrack。于是就开始倒腾了。&lt;/p&gt;

&lt;h2 id=&quot;macport&quot;&gt;安装macport&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先第一步要安装&lt;a href=&quot;https://www.macports.org/&quot;&gt;macport&lt;/a&gt;。macport据我理解，相当于homebrew，ubuntu下相当于apt-get install。根据官网来说，安装macport最简单的方法就是下载pkg文件直接安装，但是我在下载pkg安装过程中，会出现卡死的问题。google了半天没找到解决方法。于是就下载了源代码安装，这在官网上都有说明。前面什么安装xcode的command line tools那是装机必备我就不多说了。&lt;/p&gt;

&lt;p&gt;下载之后在官网上有说明，解压之后进入目录，进行&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;
之后需要添加环境变量，我没看懂官网的说明，自行google了一下。看到很多人的博客都写过这个问题，我在此就摘录一下。&lt;/p&gt;

&lt;p&gt;需要将/opt/local/bin和/opt/local/sbin添加到$PATH搜索路径中。然后编辑/etc/profile，这里需要超级用户。如果用vim的话需要wq！在profile里加入下面两句&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/opt/local/bin:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/opt/local/sbin:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后就可以了，如果要立即生效，那么需要利用source命令&lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就可以用了，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo port -v selfupdate&lt;/code&gt;更新。到这步会发现好像仿佛是被墙了。。。&lt;/p&gt;

&lt;h2 id=&quot;proxychains&quot;&gt;安装proxychains&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;然后我又陷入了难题，好不容易手动编译安装成功了。结果更新好像被墙了咋办。查查查，命令行下使用代理的方法。找到一个东西，叫做&lt;a href=&quot;https://github.com/rofl0r/proxychains-ng&quot;&gt;proxychains&lt;/a&gt;。搜这个用了好久，因为我用的是ss，ss支持的时socks5，而iterm支持http，这就麻烦了。后来在v2ex上发现hzlzh问了这个问题。我就安装这个了。&lt;/p&gt;

&lt;p&gt;安装proxychains4非常简单，直接用homebrew就可以了。&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install proxychains-ng&lt;/code&gt;
安装完毕要设置代理&lt;/p&gt;

&lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/proxychains.conf&lt;/code&gt; 最下面 
&lt;code class=&quot;highlighter-rouge&quot;&gt;[ProxyList]
socks5  127.0.0.1 1080&lt;/code&gt;
测试proxychain能不能用，&lt;code class=&quot;highlighter-rouge&quot;&gt;proxychains4 curl twitter.com&lt;/code&gt;会显示ok。我就不截图了。&lt;/p&gt;

&lt;p&gt;proxychain可以让它后面的命令行直接走代理的路线，而不用直接进行网络请求。
我刚刚用这个加上home cask装了macdown。还是很不错的。因为很多命令行是需要进行网络请求的。&lt;/p&gt;

&lt;p&gt;之后就可以&lt;code class=&quot;highlighter-rouge&quot;&gt;proxychains4 sudo port -v selfupdate&lt;/code&gt;了。可能有点慢，不过我这次可以正常了。&lt;/p&gt;

&lt;h2 id=&quot;aircrack-ng&quot;&gt;安装aircrack-ng&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;最后的最后，我们可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo port install aircrack-ng&lt;/code&gt;就可以安装aircrack了。&lt;/p&gt;

&lt;p&gt;好了，剩下的就是按照那个博客说的来破解了…到这的时候我试了一下，但是班长突然打电话然我去取自行车，我就去了~后面的就没有后面了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;后面的安排&lt;/h2&gt;
&lt;p&gt;最近项目差不多算是完成了，后面的计划可能要调整一下状态，把RAC再看看，想看看动画，然后，继续开发下一个项目了~&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 04:06:00 +0800</pubDate>
        <link>http://walkginkgo.com/free/2015/09/09/mac-aircrack.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/free/2015/09/09/mac-aircrack.html</guid>
        
        
        <category>free</category>
        
      </item>
    
      <item>
        <title>大二下学期总结和后期计划</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;以后每学期都要写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先聊聊最近的生活吧。结束了北京的实践活动回到家，这次的寒假不是很想写代码，休息一下，早点回学校再写吧，欠的项目太多，一时半会不想写。打总就休息一下回去再干了。&lt;/p&gt;

&lt;p&gt;不过最近无聊的准备继续开始写代码了。&lt;/p&gt;

&lt;p&gt;感冒了，唯一的症状是鼻子不通气。&lt;/p&gt;

&lt;p&gt;开始正题吧废话差不多了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;大二下的学期总结&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我的大二下，依旧单身。总算算是开始新的生活，开始看上新的姑娘开始往前看了。什么，哪个姑娘？看上的姑娘比较多你说哪一个？不过可以比较淡定的面对过去的人了。以前会想，以后有钱了会有妹子看上我。现在会想，妹子到时候看上的是我的人还是我的钱？大学的妹子才是真爱。不过大学的妹子会看脸吧…好心酸。&lt;/p&gt;

&lt;p&gt;技术上，其实说实话没啥大的突破。iOS开发总算是会了数据库，然后把block看了一下写了一篇关于block的博客。在项目也开始逐步的使用RAC，mvvm模式比我想象中要难的多。唯一值得庆幸的是我上线了一个独立开发的app，在app store，下载量是2，我一个人下载了一次，班长下载了一次，我让班长下的。不过无所谓了…至少是我独立上线的一个应用。&lt;/p&gt;

&lt;p&gt;其他技术上的，计算机网络学的就考了六十多…学数据库的意义就在于我没有理由在开发的时候不写sql语句了…到现在就会一个create table和select from where，不是select语句。其他就没啥了。&lt;/p&gt;

&lt;p&gt;大二下特别充实，自从姜导周末去找嫂子我们周末打球计划挂了之后我就改到晚上打球了。白天早起看看英语，上课，没课就去工作室，晚上回寝室九点多，去操场打球，十点，然后上上网，做做仰卧起坐偶尔写写代码，洗澡的时候找光哥熊熊还有班长闲扯闲扯，偶尔找找情圣。这一天就过去了。&lt;/p&gt;

&lt;p&gt;学习上，总体来说，比较满意。我的G点终于到3.0了。。累死我了。好好学习绝对是大学最难的事情。我在逐步的改变，这学期至少没有上课睡觉了，这点已经进步了，而且每门课都会听一点，除了密码学和信息论。其他都听了。不过这两门课最后复习的都还好。&lt;/p&gt;

&lt;p&gt;最大的进步是开始坚持做一些事情，不找理由。比如我坚持做仰卧起坐，看开发的资讯，还有记日记。&lt;/p&gt;

&lt;p&gt;其他，其他没啥了，有如意的地方，有不如意的地方。发生了很多事情，也结束了很多事情。一学期不可能总一帆风顺，也会有迷茫啥的，不过很幸运我在学期刚开始的时候把这些问题都解决了。&lt;/p&gt;

&lt;p&gt;去了一趟北京让我又想明白很多事情，也让我成长了不少，这可能是后话了。&lt;/p&gt;

&lt;p&gt;给这学期总体打85分，我真的很满意这学期。技术上打分80，平平稳稳，按部就班，这事需要一个时间沉淀。生活和成长，90。确实学到了很多除了技术上之外的东西，开始固执，开始偏激，不过我不觉得这是坏事。我也在逐渐的接触更多的东西。成长，不只是写代码。即使写代码很重要。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;后期计划&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;后期的计划。必须要完成的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多读书，要在坚持的列表加上一个读书。除了技术上的书还要读其他的书。&lt;/li&gt;
  &lt;li&gt;多和别人交流。读书确实很重要，但是与人交流会能得到对你更客观的评价。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两个好像每学期都是这样。。都做不到。&lt;/p&gt;

&lt;p&gt;技术上写具体一点吧，因为都是细节上的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继续我的MVVM模式的研究，然后出文档，出demo。&lt;/li&gt;
  &lt;li&gt;规范后面的项目开发。包括整理完善的开发目录，形成文档给创萌工作室。&lt;/li&gt;
  &lt;li&gt;尝试阅读源码，比如MJ的extension还有refresh，这是可以尝试去模仿写的。还有RAC的源码。这是为了可以更好的使用的。还有一些开源的项目，比如coding等等。&lt;/li&gt;
  &lt;li&gt;时间允许的话，上线一个自己独立完成的app，到app store。&lt;/li&gt;
  &lt;li&gt;学习swift。同时对oc的一些内部机制深入理解，比如assign和weak，比如runtime，还有oc如何转换为c的struct。对照一些面试题然后更详细的在&lt;/li&gt;
  &lt;li&gt;复习c语言和数据结构，像block到最后就是c的函数指针。&lt;/li&gt;
  &lt;li&gt;学习其他的语言，我想尝试ruby on rails。haskell是我的业余爱好。&lt;/li&gt;
  &lt;li&gt;学好专业课。这学期的专业课总体情况还行，下学期继续这样就可以了。&lt;/li&gt;
  &lt;li&gt;坚持学英语。为了写代码也为了以后考虑出国。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生活和其他方面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑考虑找个女朋友？个子比我矮，长得不丑，不要好看的。能理解我偶尔的繁忙。&lt;/li&gt;
  &lt;li&gt;继续坚持做一些事情，坚持100天。&lt;/li&gt;
  &lt;li&gt;坚持锻炼，打球。什么时候单手虐姜导了什么时候就不打了。&lt;/li&gt;
  &lt;li&gt;下学期要多拍照，大学过一半了，再不拍照就没了。&lt;/li&gt;
  &lt;li&gt;没事出去走走玩玩，不能总窝在电脑跟前。也不能长时间写代码。&lt;/li&gt;
  &lt;li&gt;吃好喝好多睡觉。&lt;/li&gt;
  &lt;li&gt;好好学习，争取下学期G点能到3.5，我再重修点课就差不多了。&lt;/li&gt;
  &lt;li&gt;制定每天的计划，认真完成。&lt;/li&gt;
  &lt;li&gt;多出去和别的班人接触接触，信安计科是一家。&lt;/li&gt;
  &lt;li&gt;需要把以后出国还是工作这事提到日程了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就这些了。想到再补充了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;和大二说声再见，和大三说声你好。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 18:21:56 +0800</pubDate>
        <link>http://walkginkgo.com/life/2015/07/29/year2-second-term.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/life/2015/07/29/year2-second-term.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>给萌萌哒的子渔酱</title>
        <description>&lt;p&gt;写点什么吧。&lt;/p&gt;

&lt;p&gt;不知道为什么一想到老大都会想到萌萌哒的子渔酱。&lt;/p&gt;

&lt;p&gt;对于老大的称呼总有很多，老大是华哥喊起来的，我们就跟着喊了。子渔是老大的笔名。当然还有喊识颖的，这是迪哥喊的。也有喊颖姐的，这是雨叔。&lt;/p&gt;

&lt;p&gt;第一次遇见老大当然是报道的时候了，白色的衣服，扎辫子。&lt;/p&gt;

&lt;p&gt;后来再见就是班里第一次自我介绍的时候，粉色衣服。&lt;/p&gt;

&lt;p&gt;再后来就慢慢熟起来了。&lt;/p&gt;

&lt;p&gt;大一的时候总有很多时间，没事喊着老大出来一起。班级第一次聚会了，篮球赛了，还有班级聚餐了，还有一帮人在寝室吃东西啃兔头。大二的时候就少了。&lt;/p&gt;

&lt;p&gt;还记得大一给老大录的生日视频，那是唯一送老大的东西吧。&lt;/p&gt;

&lt;p&gt;对老大的印象就是女神…那不完全，还有女汉子。&lt;/p&gt;

&lt;p&gt;前几天骑车去工作室的时候走路上看到老大回寝室。穿着毕业衫斜刘海长发飘飘，哇塞，真的，是女神！&lt;/p&gt;

&lt;p&gt;之前看老大打球的时候，那真是一点都不女神了…&lt;/p&gt;

&lt;p&gt;一个人同时兼有两种截然相反的属性也是不容易的吧。&lt;/p&gt;

&lt;p&gt;老大的感觉，真的是一个很有文化气息的妹子，改变了我对科大女生的看法。&lt;/p&gt;

&lt;p&gt;老大会穿着汉服到处逛悠，也会写出看不懂的文字发到空间。&lt;/p&gt;

&lt;p&gt;我总会想，老大的境界到底有多高，很高。&lt;/p&gt;

&lt;p&gt;你会很愿意和老大交流你遇到的问题，她会给你很好的意见，你也会得到很好的解答。&lt;/p&gt;

&lt;p&gt;以前觉得老大很厉害，什么都会，会自己搭一个网站会去绿盟实习。老大现在也很厉害，总能在和老大的交流上学到很多东西。以前总想，我要好好努力要成为像老大那样，什么都会。现在觉得，至少，搭个网站什么的已经不是很难了。但是要想像老大一样有很深的文化的底蕴，很高的境界，还是很难的。像老大那样可以把每件事情考虑的很好，想的很仔细，想的很明白想的很开还是很难的。&lt;/p&gt;

&lt;p&gt;至少，这两年和老大学到了很多东西。我曾经想像老大一样当上导生，去带一个班级。看样子是没机会了。这是后话。&lt;/p&gt;

&lt;p&gt;晚上聚餐，一群人和老大合了影，依然问了老大很多问题。&lt;/p&gt;

&lt;p&gt;很快啊，这两年。一瞬间就过完了。曾经偶像般存在的老大，现在依旧偶像般的存在。多了更多女神的感觉。和老大在一起大学生活的两年，至此，也算基本上画上了句号。&lt;/p&gt;

&lt;p&gt;也许过了一段时间之后，老大会发来消息，问问我们最近怎么样。我们也会反过去问问老大怎么样。希望我们都可以很好。&lt;/p&gt;

&lt;p&gt;上海，请你照顾好我们最爱最爱的老大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-1.JPG&quot; alt=&quot;班级合影&quot; /&gt;
班级合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-2.JPG&quot; alt=&quot;我和老大&quot; /&gt;
我和老大&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 06:35:00 +0800</pubDate>
        <link>http://walkginkgo.com/life/2015/06/30/to-my-dear.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/life/2015/06/30/to-my-dear.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>ReactiveCocoa在UIView上的运用</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近项目非常繁忙…上星期本来想把和block内存管理有关的东西看一下再写一个有关block的博客的后来有关block内存管理的博客都找好了没时间实战也就没出。
写了有两周的项目，因为很多原因所以这近两周一直在写界面，但是在写界面的时候用到了ReactiveCocoa的东西，也是因为实践了所以写篇博客分享出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveCocoa（下文统称为RAC）&lt;/code&gt;，具体我就不介绍了，可以去我的博客里那篇还没填完坑的  &lt;a href=&quot;http://walkginkgo.com/ios/2015/05/03/ios-mvvm-1.html&quot;&gt;mvvm开发模式&lt;/a&gt;  文章看一下。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;个人以为，RAC可以以信号的方式来触发各种动作，从而让代码更加精炼。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下面上代码吧。&lt;/h2&gt;

&lt;h2 id=&quot;uibutton&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在UIButton上的使用&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                            &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在这里，对uibutton添加了一个rac_signalForControlEvents的方式，就不用利用addtarget的方式来再写一个方法来进行对uibutton添加点击事件了。&lt;/p&gt;

&lt;h2 id=&quot;uialertview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在UIAlertView的使用&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;选择图片上传&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancelButtonTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;取消&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherButtonTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;拍照上传&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;从相册选择&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_buttonClickedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chooseFromCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chooseFromAlbum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这两个是&lt;a href=&quot;http://limboy.me/&quot;&gt;limeboy&lt;/a&gt;在博客里提到的。因为有了RAC，所以我这次放弃使用blockskit和alertview的Categories。&lt;/p&gt;

&lt;p&gt;下面两个是我利用RAC的方式写的代码。&lt;/p&gt;

&lt;h2 id=&quot;uitextfield&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在UITextfield的使用&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;第一个是我封装了一个安卓风格的输入框，就是下面一条线，当选择这个框的时候，线会加粗变黑。
我把中间的两句核心代码贴出来。self是因为我继承了一个textfield先进行功能添加和封装。所以self就是代指一个textfield了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidBegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blackColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grayColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其实这两句是可以用addtarget的方式来添加的，但是我选择了用RAC的方式，更为简单也更为容易理解。当textfield被选中的时候，下面的borderline会变成黑色，当结束选择的时候，变成灰色。(其实当选择的时候borderline应该还要加粗)。&lt;/p&gt;

&lt;h2 id=&quot;uipagecontrol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;监控UIPagecontrol改变&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;还有一个地方我利用到了RAC。因为我现在需要实现一个功能，图片轮播的时候，当图片切换，我需要相应的刷新下面的一个列表。因为我们的图片轮播是用到的一个开源控件，我实在是能力有限不知道怎么进一步修改这个控件来进一步封装从而实现新的功能，我就利用了RAC。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshSlideContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码将pageControl和它的currentPage属性相绑定，当currentPage改变的时候就会触发下面的函数。然后我传了一个currentPage的参数进去，从而下面的列表可以进一步更新。但是开始加载的时候会调用3次…我不知道我哪个地方写坑了我还在寻找。各位见谅…&lt;/p&gt;

&lt;p&gt;上面的几个代码片段就是我这两周在写纯界面的时候用到的一些和RAC有关的东西，因为本身就是写纯界面，所以没用到很多，也很简单，没有其他的功能。刚刚在查limeboy博客的时候看到NotificationCenter也可以利用RAC的方式写，我抽时间也会尝试，因为项目里没用到，所以就不贴代码了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BTW：最近有一大波考试，博客更新程度会大大降低…后面可能会一直做项目，等积累一部分才会继续写了。多谢各位的支持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;Limboy &lt;a href=&quot;http://limboy.me/ios/2013/12/27/reactivecocoa-2.html&quot;&gt;说说ReactiveCocoa 2&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Jun 2015 01:02:33 +0800</pubDate>
        <link>http://walkginkgo.com/ios/2015/06/13/rac_uiview.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ios/2015/06/13/rac_uiview.html</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Block 我所理解的回调</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;h2 id=&quot;section&quot;&gt;废话&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发iOS距离一年还有四个月。block的文章看了很多。也在项目中使用了，但是使用率很低，仅限于最最简单的界面传值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我最近处于一个深度学习和补作业做实验的阶段(重点是补作业和做实验)，而且经历了两个项目现在对于OC的理解又更进了一步。于是抽时间把之前下载的关于block的视频又翻出来看了一下。有一些感受写出来，以便CM和PLUSUB以后的iOSer可以很快的学习到关于block的使用。以后这样的文章都会在标题加一个FOR CM AND PLUSUB。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;概述&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;block就是闭包，可以用来回调。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;再简单一点，指向函数的指针。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我现在只会简单的使用block，下午写了个demo利用block封装了afnetworking然后在另一个界面调用afnetworking的请求。当然不复杂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;上代码吧，不然再废话都解释不清楚什么是block。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part1-block&quot;&gt;&lt;em&gt;part1 block的简单定义&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;我现在定义一个简单的block。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;---%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;11111&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:---&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以这么理解，我定义了一个返回值为void类型的block。void后面跟了一个函数，但是这个函数函数名是以^开头的，需要用括号包起来，参数也需要用括号包起来。参数可以是一个int类型，可以是一个NSString类型，还可以是一个函数！可以是多个参数还可以是一个函数。当然如果是int类型的block就需要return一个返回值了。&lt;/p&gt;

&lt;p&gt;然后我们开始对这个void类型的函数进行定义。就是令它等于一个“^+参数”然后里面像定义一个函数一样就行了。
在调用这个block的时候就直接就myBlock加参数就可以了。&lt;/p&gt;

&lt;p&gt;我们可以打断点来看一下整个block的执行顺序。我在代码后面加了标示。&lt;/p&gt;

&lt;p&gt;执行顺序是1 3 2，可以看到myBlock没有按照程序执行的顺序来调用而是在调用之后执行了2的代码。这个例子可能不那么明显，但是可以开始初步理解回调。&lt;/p&gt;

&lt;h2 id=&quot;part2-block&quot;&gt;&lt;em&gt;part2 传参block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;下面把难度加大一点，我们把block当参数传。然后看一个block的例子。
首先来回顾一个c语言里伟大的typedef，我们开头会利用typedef定义一个block。如果不利用typedef定义一个block，那么函数传参的时候会写很多代码。一会我会详述。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;ViewController.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//typedef定义一个block
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;-----%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mBlock&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果开始没有用typedef定义的话，此处的函数变为- (void)testBlock:(void(^)(NSString *str))myblock
//简单的说格式就是 “返回值 + (^) + 参数 + 名字”
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;1111&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-----&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上面的代码中，我们写了一个testBlock的函数，将我们的tblock作为参数传到了testBlock函数里面，然后再testBlock里用mBlock调用了我们所写的MyBlock这个函数。&lt;/p&gt;

&lt;p&gt;打断点看一下整体的运行流程，2 3 1。这里可以更加明显理解“回调”的含义。&lt;/p&gt;

&lt;h2 id=&quot;part3-buttonblock&quot;&gt;&lt;em&gt;part3 点击button触发block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;经历了上面两个part基本上应该对block有个简单的理解。下面再加一点难度，用按钮触发一个回调来改变按钮的颜色。&lt;/p&gt;

&lt;p&gt;不多解释，直接上代码。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;ViewController.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greenColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testfunc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;part4-afnetwork&quot;&gt;&lt;em&gt;part4 利用回调分离afnetwork的请求&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;直接上代码了。&lt;/p&gt;

&lt;p&gt;TestNetworkViewController是afnetwork使用的地方。
TestViewController是我们需要调用网络请求的地方。
SearchModel是一个model，我用来解析数据的。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//  TestNetworkViewController.h
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &quot;SearchModel.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//TestNetworkViewController.m
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;TestNetworkViewController.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getmodel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;http://xxx.xx.xxx.xx:xxxx/app/search_haosou&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;JSON: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MTLJSONAdapter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modelOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromJSONDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Error: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  TestViewController.h
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &quot;SearchModel.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &quot;TestViewController.h&quot;
#import &quot;TestNetworkViewController.h&quot;
#import &quot;SearchModel.h&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do any additional setup after loading the view.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTitleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUrl&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;首先还是得说一下我这里只是演示了最最简单的block使用，因为作为一个iOS开发者不会block，那么有一大半的代码是看不懂的，在后面理解RAC的时候也会出现很大的问题。所以这里我只是做了简单的说明，至于在block里为什么不能调用self，自从segmentfault上有人问过之后我答错之后现在也算是理解了一部分了，但是牵扯到了内存回收的问题，我还需要一段时间来消化。消化完之后会继续写博客的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;总之，block非常的有用，初期写block非常的难过，但是难过过了也就慢慢会喜欢上block的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;post-credits-scene&quot;&gt;post-credits scene&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近实在是忙的不可开交，一星期两场考试四个实验。还欠了人jobdeer.com一篇博客还没写，人送的书都没时间看。抽时间还要补起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近博客的更新频率也是大大降低…唉。都是泪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;先写到这了。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 May 2015 04:02:33 +0800</pubDate>
        <link>http://walkginkgo.com/ios/2015/05/30/my-understand-about-block.html</link>
        <guid isPermaLink="true">http://walkginkgo.com/ios/2015/05/30/my-understand-about-block.html</guid>
        
        
        <category>IOS</category>
        
      </item>
    
  </channel>
</rss>
