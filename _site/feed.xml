<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iWalk's Blog</title>
    <description>我是新手程序员，想找一个地方记录自己在技术上的成长和生活上的点滴。 现在主要是跟随迪哥做iOS的开发。 寒假想看一些前端的知识。 我的jekyll还在搭建过程当中！我会逐渐将我的jekyll美化起来的。
</description>
    <link>judi0713.github.io/</link>
    <atom:link href="judi0713.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 08 Feb 2015 19:05:28 +0800</pubDate>
    <lastBuildDate>Sun, 08 Feb 2015 19:05:28 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Jekyll基本实现写博客功能</title>
        <description>&lt;p&gt;今天又研究了一天jekyll。
现在已经实现这种效果了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish-basic-jekyll/finish-basic-jekyll-1.png&quot; alt=&quot;finish-basic-jekyll-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;页面部分我使用的就是jekyll本身的效果没有任何美化的过程。&lt;/p&gt;

&lt;p&gt;大概总结一下有几点我觉得比较重要的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.git的使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为我全程基本上都是在linux下进行操作，所以git用的是全部的命令行。
至于git命令行的使用我还是没有太明白，我觉得多上传几次代码应该就会慢慢熟悉，到时候大概我会将git的基本命令写一个博客出来，还希望到时候有人来访问。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;2.前端知识&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为对前端接触较少，所以可能再代码方面是十分不熟悉，所以也只能用原生的模板。
实在是太丑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;3.Markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;整个jekyll的文章发布是用的Markdown。
我使用了github推出的编辑器atom。
讲句实在话我没觉得atom哪里好用，但是它可以实时预览你的Markdown文件。
因为我想早点发文章出去，所以Markdown的语法基本上没怎么熟悉就直接上了，看上去肯定不美观。但是Markdown确实给我的感觉很好，不复杂，但是很舒服。而且语法上也没有很难。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;4.本地jekyll环境&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;本地jekyll环境的搭建我专门写了一篇博客。一开始觉得没有什么用。后来才发现重要性。
因为在调试的时候需要本地的jekyll环境。命令是jekyll server，可以在本地看一下效果。
这样不用每次修改代码之后都上传预览。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;下面我将对我从hello world改动到现在这个样子进行一个阐述。&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish-basic-jekyll/finish-basic-jekyll-2.png&quot; alt=&quot;finish-basic-jekyll-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是原来的样子。&lt;/p&gt;

&lt;p&gt;首先我打开的是_config.yml&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish-basic-jekyll/finish-basic-jekyll-3.png&quot; alt=&quot;finish-basic-jekyll-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Title对应了博客的名称。
Email就对应了左下方的email。
我将twitter那一行删了…后面我再考虑要不要换成我的微博啥的。
然后description就是右下角那一串字。&lt;/p&gt;

&lt;p&gt;全部修改完毕就会得到我的首页的样子。&lt;/p&gt;

&lt;p&gt;还有右上角的About。
我们打开 about.md，这是Markdown文件了。
修改title会修改about显示的文字，修改里面的内容就可以点击About跳转进去了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish-basic-jekyll/finish-basic-jekyll-4.png&quot; alt=&quot;finish-basic-jekyll-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有最后就是我发布的那几篇文章。和posts这个文字的修改。
Posts那个文字修改是在index.html里修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/finish-basic-jekyll/finish-basic-jekyll-5.png&quot; alt=&quot;finish-basic-jekyll-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发布的所有文章都放在_posts文件夹里。
Jekyll提供了一个例子可以研究一下。
发布就会在首页显示。
我连续发布了三篇所以就显示了~&lt;/p&gt;

&lt;p&gt;怎么发布就需要Markdown的语法了，可以把我博客从github上download下来看看。
不要问我看的谁的我看的迪哥的。&lt;/p&gt;

&lt;p&gt;总之大概就是这样。
后期计划还是要把Markdown的语法研究一下，不然文章看上去太丑了。
还有就是研究一下怎么设置可以评论和查看访问记录。
最后就是美化我的jekyll，不管是修改别人的还是我自己设计。&lt;/p&gt;

&lt;p&gt;总之，前面几篇可能水分有点大，但是这一篇确实可以迅速搭建一个在github上的博客。&lt;/p&gt;

&lt;p&gt;另附我博客的github地址和迪哥博客的github的地址。&lt;/p&gt;

&lt;p&gt;我的&lt;a href=&quot;https://github.com/judi0713/judi0713.github.com&quot;&gt;github.com/judi0713/judi0713.github.com&lt;/a&gt;
迪哥的&lt;a href=&quot;https://github.com/icindy/icindy.github.io&quot;&gt;github.com/icindy/icindy.github.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 18:23:10 +0800</pubDate>
        <link>judi0713.github.io/jekyll/2015/02/08/finish-basic-jekyll.html</link>
        <guid isPermaLink="true">judi0713.github.io/jekyll/2015/02/08/finish-basic-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>不利用Jekyllbootstrap上线Jekyll</title>
        <description>&lt;p&gt;因为实在是觉得jekyllbootstrap太丑。而且确实想尝试一下原生的jekyll感觉，于是今天早上重新开始了jekyll的尝试。&lt;/p&gt;

&lt;p&gt;首先是新建一个我的jekyll博客。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyll/use-jekyll-1.png&quot; alt=&quot;use-jekyll-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后我们将建好的git仓库clone到本地&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyll/use-jekyll-2.png&quot; alt=&quot;use-jekyll-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我不知道怎么将myblog设置为我的git根目录来上传。
然后就利用了笨办法，讲myblog里的所有文件移动到judi0713这个文件夹里。
命令是&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyll/use-jekyll-3.png&quot; alt=&quot;use-jekyll-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;顺便提一下， mv这个命令可以重新命名，重命名的方式就是mv filename1 filename2
mv可以移动文件，批量移动文件的方式就是用&lt;em&gt;号。
比如我这里使用的，就是可以将myblog的所有文件全部移动，相应的，如果是&lt;/em&gt;.*那么会将myblog的所有文件移动，保留文件夹。&lt;/p&gt;

&lt;p&gt;现在我们已经将jekyll创建的文件全部移动到了git仓库里。
下面就是要将仓库里的文件全部上传了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyll/use-jekyll-4.png&quot; alt=&quot;use-jekyll-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就是这三条。具体每一条什么含义我大概明白，但是从昨晚上到今天早上我已经被git这几条命令搞的有点晕了。
我全部理清楚之后会专门写一个和git命令行有关的blog的。&lt;/p&gt;

&lt;p&gt;打开&lt;a href=&quot;http://judi0713.github.io/&quot;&gt;judi0713.github.io&lt;/a&gt;已经可以访问了。&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 10:42:08 +0800</pubDate>
        <link>judi0713.github.io/jekyll/2015/02/08/use-jekyll.html</link>
        <guid isPermaLink="true">judi0713.github.io/jekyll/2015/02/08/use-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>利用Jekyllbootstrap开始使用Jekyll</title>
        <description>&lt;p&gt;上次在ubuntu下配置好了jekyll的环境不知道有啥用，都准备放弃了。今天下午睡了一觉觉得不能就这样不了了之。还是需要一个地方记录一下技术路上的点滴。
所以就继续开始我的jekyll之路了。&lt;/p&gt;

&lt;p&gt;提醒！！
建议先看完整篇博客之后再操作！！！！
如果你对照做错了出现问题别怪我….你可以百度，或者google。我已经为了写博客换了两台ubuntu已经很努力了。&lt;/p&gt;

&lt;p&gt;找到了一个网站&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;jekyllbootstrap.com&lt;/a&gt;
Bootstrap是Twitter开源的前端框架。具体怎么用我还在研究。不要嘲笑一个不会前端的人在倒腾他的博客。
总之点击去，然后&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-1.png&quot; alt=&quot;use-jekyllbootstrap-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我点击了左下角的按钮。
然后输入了我的github账号。
按照它的步骤，第一步是创建一个repository&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-2.png&quot; alt=&quot;use-jekyllbootstrap-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不要问我怎么在github上怎么创建repository，右上角加好。不截图，自行研究…虽然我也是第一次。
然后就是第二步了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-3.png&quot; alt=&quot;use-jekyllbootstrap-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我打开我的ubuntu（天，为了写博客我开了两个ubuntu！）还好加了内存条。
依次输入命令。（不要忘记在ubuntu下安装git apt-get install git就行了）
别傻不拉几的输入，用复制的，终端下复制方法自行百度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-4.png&quot; alt=&quot;use-jekyllbootstrap-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok，已经将jekyllbootstrap clone到本地了
执行第二步和第三步！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-5.png&quot; alt=&quot;use-jekyllbootstrap-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一切正常，第四步！
报错了！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-6.png&quot; alt=&quot;use-jekyllbootstrap-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;忽略我又换了一台设备因为新设备报错又换了…
反正就是这个publickey的错误。
这个无比蛋疼的错误…百度了半天，在csdn上发现问题所在了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_6b706e15010199p1.html/&quot;&gt;blog.sina.com.cn/s/blog_6b706e15010199p1.html&lt;/a&gt;(附上原帖地址)问题原因就是需为github账号添加ssh key。
对照着这篇博客添加了ssh 之后，就ok了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-7.png&quot; alt=&quot;use-jekyllbootstrap-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok了。我的天，累死了。主要就是ssh key那一步。
我现在用的是jekyllbootstrap的框架，怎么自己开始一个博客还没太明白。
&lt;a href=&quot;http://judi0713.github.io/&quot;&gt;judi0713.github.io&lt;/a&gt;输入之后 可以看到界面了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/use-jekyllbootstrap/use-jekyllbootstrap-8.png&quot; alt=&quot;use-jekyllbootstrap-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;剩下的基本上应该就是前端知识了。到此为止已经可以访问了。
然后可以利用上一篇文章配置的jekyll环境在本地进行调试然后上线了。&lt;/p&gt;

&lt;p&gt;下一步我将研究如何不使用jekyllbootstrap的框架开始使用jekyll。&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Feb 2015 21:25:18 +0800</pubDate>
        <link>judi0713.github.io/jekyll/2015/02/07/use-jekyllbootstrap.html</link>
        <guid isPermaLink="true">judi0713.github.io/jekyll/2015/02/07/use-jekyllbootstrap.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>关于在ubuntu下搭建github的Jekyll环境</title>
        <description>&lt;p&gt;之前早就想有一个自己的博客，但是想自己定制不想用别人的，所以没有选择csdn。用WordPress的话需要服务器又不想花钱。后来我们工作室我的师傅，他们现在已经成立公司了(下文和以后的文章和现实当中我都会称呼他迪哥)。迪哥将他的博客移到了github上。虽然github是静态页面，但是对我来说偶尔写写心得也是够用了。
没有仔细研读迪哥的几篇有关jekyll 的博客自己对着文档就上了。
因为后面几天可能还需要windows环境，所以暂时是在windows下跑的ubuntu14.04 32位的虚拟机。
废话结束，开工。&lt;/p&gt;

&lt;p&gt;假设你现在刚刚安装了ubuntu的操作系统。
刚装完ubuntu的同学不要忘记利用sudo apt-get update一下，更新源，不然不能用sudo apt-get安装软件。因为太长时间不用ubuntu所以我忘记了….后来百度才想起来新装的机子需要更新源。&lt;/p&gt;

&lt;p&gt;假设你已经更新源了，那么我们开始下一个步骤。
因为jekyll是需要ruby环境的。
在Mac下自带了ruby环境所以不需要安装ruby，在这我们需要安装已选ruby。
命令是sudu apt-get install ruby。
声明一下没有截图，但是所有需要的命令我会特别标注的。后面我遇到的问题会截图的。&lt;/p&gt;

&lt;p&gt;在jekyll的官方网站上我们需要用gem来安装jekyll，包括Stack Overflow上的很多网站都说需要sudo apt-get install rubygems。但是如下图，rubygems的包现在已经包含在ruby包里了，这就意味着我们不需要安装gem了，在安装ruby的同时gem已经安装好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-1.png&quot; alt=&quot;ubuntu-jekyll-environment-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然我磕磕盼盼的到了这一步但是我想一般情况下前面update和安装ruby应该是不会出现什么意外情况的。
之后就是利用gem来安装了。
安装官方文档上写的，此时我们应该进行的操作是gem install Jekyll，但是我在输入命令之后出现这个了这个问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-2.png&quot; alt=&quot;ubuntu-jekyll-environment-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是因为gem安装时需要获取最高权限，所以我们使用sudo gem install Jekyll&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-3.png&quot; alt=&quot;ubuntu-jekyll-environment-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;又报错了！！看error部分。出现了 “failed to build gem native extension”
上stackoverflow…完了才知道要安装一个ruby-dev
不太清楚ruby-dev是啥又ruby大神知道的务必教我。但是程序安装都需要dev，我记得好像以前在ubuntu下配置GoAgent的时候装过一个什么dev，在python的时候也装过一个什么什么dev。总之就安装一下呗。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-4.png&quot; alt=&quot;ubuntu-jekyll-environment-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装ruby-dev的速度很快很快很快。
之后就是激动人心的安装jekyll了！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-5.png&quot; alt=&quot;ubuntu-jekyll-environment-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次执行sudo gem install jekyll已经不报错了，它显示building native extension.
可以很惊喜的发现已经开始安装了啦啦啦啦！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-6.png&quot; alt=&quot;ubuntu-jekyll-environment-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装速度很快，完毕之后我激动的要开始创建的时候，它又报错了….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-7.png&quot; alt=&quot;ubuntu-jekyll-environment-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意第三行，could not find a javascrit runtime.
继续stackoverflow….
需要nodejs环境，我是前端小白不要问我什么是nodejs，但是我知道在jekyll的官方文档里jekyll是需要nodejs环境的。
接着装吧，希望就在眼前了！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-8.png&quot; alt=&quot;ubuntu-jekyll-environment-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体安装过程我就不截图了！
至此，整个环境已经全部配好了。&lt;/p&gt;

&lt;p&gt;让我们new一个！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ubuntu-jekyll-environment/ubuntu-jekyll-environment-9.png&quot; alt=&quot;ubuntu-jekyll-environment-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jekyll已经成功创建了！历时一个晚上加不到一个早上终于才完成了环境的搭建。相比较去年暑假配置环境的速度这次已经很快了…我现在已经会利用google和stackoverflow搜索这方面的东西了说明这一学期在创萌还是学了很多东西的。&lt;/p&gt;

&lt;p&gt;这是整个jekyll环境的配置，第一篇文章，后续我会继续我的github blog搭建之旅。&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Feb 2015 10:58:29 +0800</pubDate>
        <link>judi0713.github.io/jekyll/2015/02/04/ubuntu-jekyll-environment.html</link>
        <guid isPermaLink="true">judi0713.github.io/jekyll/2015/02/04/ubuntu-jekyll-environment.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
