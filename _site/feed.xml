<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testHs</title>
    <description>我是新手程序员，想找一个地方记录自己在技术上的成长和生活上的点滴。 现在主要是跟随迪哥做iOS的开发。 我的jekyll还在搭建过程当中！我会逐渐将我的jekyll美化起来的。
</description>
    <link>judi0713.github.io/</link>
    <atom:link href="judi0713.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Oct 2015 10:50:29 +0800</pubDate>
    <lastBuildDate>Sat, 03 Oct 2015 10:50:29 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>根据Coding的iOS端重新用RAC封装网络请求</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;好久没写博客了。之前一直在研究MVVM这种新的开发模式。也算是沉淀了一段时间，国庆期间可能还会写写MVVM。今天要聊的是创萌工作室的iOS客户端网络请求的封装。因为很多原因封装的还不够好存在很多问题今天写出来只是想把最近做的事情写出来作个记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我写这篇文章已经做好了被喷死吐槽死的准备了，因为我感觉我封装的太有问题了，但是又真的很想写一写，毕竟对我来说确实解决了一个大问题。&lt;/p&gt;

&lt;p&gt;另外:链接不知道为啥都不变色了😭基本上我都给链接了，就凑合一下吧…&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;先简单的说说我们的网络请求转变过程&lt;/h2&gt;

&lt;p&gt;加入工作室一年。一共做了有三四个项目了。我先大概叙述一下我们的网络请求的转变过程&lt;/p&gt;

&lt;h2 id=&quot;afnetworking&quot;&gt;&lt;code&gt;第一阶段 直接调用AFNetworking&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;第一个项目那时候懵懂无知，每个界面都直接调&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;AFNetworking&lt;/a&gt;。这样导致的问题就是代码量骤然增加。&lt;/p&gt;

&lt;h2 id=&quot;ytknetwork&quot;&gt;&lt;code&gt;第二阶段 直接调用YTKNetwork&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;第二个项目刚做的时候唐巧开源了他们在猿题库封装的&lt;a href=&quot;https://github.com/yuantiku/YTKNetwork&quot;&gt;YTKNetwork&lt;/a&gt;。那时候还是懵懂无知，还是在每个界面都开始直接调YTKNetwork。人家封装的那么好的东西就被我用成这个栽子，简直对不起巧大。我记得有个界面好像有5条网络请求，可以想象代码的冗余度。&lt;/p&gt;

&lt;h2 id=&quot;reactivecocoa&quot;&gt;&lt;code&gt;第三阶段 开始使用ReactiveCocoa&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;因为在做第二个项目的时候我和迪哥负责不同的客户端。迪哥在看了limboy的&lt;a href=&quot;http://limboy.me/ios/2014/01/05/ios-rest-client-implementation.html&quot;&gt;基于AFNetworking2.0和ReactiveCocoa2.1的iOS REST Client&lt;/a&gt;开始将网络请求剥离到一个专门的界面，这样每次就不用写很多的东西了。&lt;/p&gt;

&lt;p&gt;limboy用了&lt;a href=&quot;https://github.com/CodaFi/AFNetworking-RACExtensions&quot;&gt;AFNetworking-RACExtensions&lt;/a&gt;来实现回调的效果。简单的说就是subscribe一个信号，然后信号会返回一个信号回来，这样就实现了将网络请求部分剥离的效果。&lt;/p&gt;

&lt;p&gt;我在第二个项目基本上结束的时候上线了一个自己独立开发的app，里面就是用了这样的方法。&lt;/p&gt;

&lt;p&gt;这学期在做项目的时候还是在沿用迪哥的代码，但是我发现了很多问题。&lt;/p&gt;

&lt;p&gt;一是limboy在写rac代码的时候用的concat无法完成网络请求再请求。简单的说，服务器在返回告诉我session失效的时候我先需要后台自动登录然后再次网络请求。我再写的时候concat无法实现再次网络请求，我也不太明白为什么，试了各种方法都不行。这是很困惑我的我后面还需要再次研究一下。&lt;/p&gt;

&lt;p&gt;二是再判断服务器返回的东西的时候，需要判断状态码。如果成功，那么会有json数据返回回来，如果失败则没有数据。出现这样的情况如果我在Acontroller调Bcontroller的网络请求则还需要判断是不是返回了一个数组或者对象，如果是，开始对数据进行处理，如果不是，还得重新进行网络请求，因为说明session失效了。&lt;/p&gt;

&lt;p&gt;这样还是导致了网络请求部分有大量的代码。&lt;/p&gt;

&lt;h2 id=&quot;codingios&quot;&gt;根据Coding的iOS重新封装网络请求&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://coding.net/u/ease/p/Coding_iOS/git&quot;&gt;Coding的iOS客户端&lt;/a&gt;是开源的，在Github和Coding官网都有。我放的链接是一个下载下来就能跑起来的。(强迫症，跑不起来的代码都不想看..不过现在看MVVM好多都跑不起来也硬着头皮看了)&lt;/p&gt;

&lt;p&gt;Coding的网络请求自己看了。Coding是用block来进行回调的。至于这一块选择notice还是block还是delegate，可以参考&lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html&quot;&gt;iOS应用架构谈 网络层设计方案&lt;/a&gt;我算是认真看了，但是不是很能写的出来…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;插一句话，我们为什么不用block。因为迪哥也不太会block就直接上rac了，我之前的博客写过简单的block，我在写代码的时候用delegate和notice比较多所以对block的实践比较少。这是我自身的问题。而且说实话我觉得用rac挺好的，因为block加上typedef啥的其实很多东西的，不像rac直接调就完事了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;下面开始今天的算是干货的东西&lt;/h2&gt;

&lt;h2 id=&quot;coding&quot;&gt;1. 分析Coding网络请求&lt;/h2&gt;

&lt;h3 id=&quot;coding-1&quot;&gt;&lt;em&gt;Coding的网络请求我觉得可以总结为&lt;/em&gt;&lt;/h3&gt;

&lt;h3 id=&quot;block---block---afnetworking&quot;&gt;block -&amp;gt; block -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;下面来解释一下，首先第一个block是我们的主viewcontroller，也就是我们逻辑部分和视图部分。首先第一个block调Coding_NetAPIManager里的函数。然后在Coding_NetAPIManager再调CodingNetAPIClient里的函数。&lt;/p&gt;

&lt;h3 id=&quot;codingcodinghttpscodingnetueasepcodingiosgit&quot;&gt;(具体Coding代码请看&lt;a href=&quot;https://coding.net/u/ease/p/Coding_iOS/git&quot;&gt;Coding客户端&lt;/a&gt;代码的链接)&lt;/h3&gt;

&lt;p&gt;我们倒着来说。&lt;/p&gt;

&lt;h2 id=&quot;afnetworking-1&quot;&gt;&lt;code&gt;第三部分 AFNetworking&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在我分类的AFNetworking里也就是CodingNetAPIClient里，Coding进行了一件事情，那就是进行AFNetworking的网络请求。&lt;/p&gt;

&lt;p&gt;在获取到数据的时候的对reponse进行一个判断。在判断数据的时候，如果数据有错误，则直接显示错误的msg，如果没有错误，那么则不返回任何东西。&lt;/p&gt;

&lt;p&gt;然后在网络请求中判断，如果有错误，那么返回nil和id类型的error。如果没错误，返回response和nil。&lt;/p&gt;

&lt;h2 id=&quot;block&quot;&gt;&lt;code&gt;第二部分 block&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;在这部分里，回调的结果有两种，一种是有数据，一种是没数据。其实到这就行了。那么现在在这第二个部分干什么呢，json转model。就这么简单。返回的东西，如果有数据返回，那么就再次返回model或者是data和nil，如果没有数据返回，就返回nil和error。&lt;/p&gt;

&lt;h2 id=&quot;block-1&quot;&gt;&lt;code&gt;第一部分 block&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;到这里，其实只要判断有无数据就可以啦。&lt;/p&gt;

&lt;p&gt;好了。下面我们只需要用RAC来替换block就完成了。当然了，中间有坑，不会那么简单的…&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2. 改写网络请求&lt;/h2&gt;

&lt;p&gt;我要上代码了。依然三部分。我们还是倒着来。我放关键的代码在这。&lt;/p&gt;

&lt;p&gt;既然我把Coding的代码分成了&lt;/p&gt;

&lt;h3 id=&quot;block---block---afnetworking-1&quot;&gt;block -&amp;gt; block -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;那么我的基本上就可以说是&lt;/p&gt;

&lt;h3 id=&quot;rac---rac---afnetworking&quot;&gt;RAC -&amp;gt; RAC -&amp;gt; AFNetworking&lt;/h3&gt;

&lt;p&gt;也是倒着来。&lt;/p&gt;

&lt;h2 id=&quot;afnetworking-2&quot;&gt;&lt;code&gt;第三部分 AFNetworking&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;这是AFNetworking网络请求&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//一切仿照Coding&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONAndHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONAndHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DebugLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;===========response===========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//这里调用下一个部分的函数&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handleResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;autoShowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoShowError&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
             &lt;span class=&quot;nl&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;DebugLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;===========response===========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replayLazily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;这是对返回值的处理&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleResponse:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;responseJSON&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autoShowError:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;autoShowError&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aPath&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;withParams:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;withMethodType:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseJSON&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;valueForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;//如果服务器返回的值不是正确有数值的话&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;errorWithDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_URL&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//如果服务器返回session失效的错误码&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//用户未登录&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//由于没登陆那么这里调用第二个部分RAC的登陆方法，进行重新登陆&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//这时有数据返回则再次发出网络请求&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rerequestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoShowError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;showError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;这是重新登陆后再次进行网络请求&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rerequestJsonDataWithPath:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aPath&lt;/span&gt;
                      &lt;span class=&quot;nf&quot;&gt;withParams:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;params&lt;/span&gt;
                  &lt;span class=&quot;nf&quot;&gt;withMethodType:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWorkCheck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedJsonClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;requestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;rac&quot;&gt;&lt;code&gt;第二部分 RAC&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;/MyList.do&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;bp&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;22&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWorkCheck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedJsonClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;requestJsonDataWithPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withMethodType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACTuplePack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;rac-1&quot;&gt;&lt;code&gt;第一部分 RAC&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test2:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetWork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACTuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RACTupleUnpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;看代码的时候最好是从第一部分看，我为了突出重点所以把第三部分放到最前面了。基本上我就干了一件事情，把block改写为RAC。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;3. 问题以及填坑&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;问题一：回调两个值&lt;/h3&gt;

&lt;p&gt;其实用RAC改写block是不难的，难的在于block传值传了两个回去，RAC我没找到可以传两个值的地方，于是我用了RACTuplePack，这个是RAC里一个宏定义，可以打包变量。然后在信号收取端利用&lt;code&gt;RACTupleUnpack(id resultData, NSError *error) = x;&lt;/code&gt;来解加压缩变量(用词不准确见谅)&lt;/p&gt;

&lt;p&gt;在这里非常感谢&lt;a href=&quot;supermao.cn/zhe-yang-hao-yong-de-reactivecocoagen-ben-ting-bu-xia-lai/&quot;&gt;这样好用的ReactiveCocoa，根本停不下来&lt;/a&gt;这篇博客。看到了RACTuplePack这个宏定义。&lt;/p&gt;

&lt;h3 id=&quot;session&quot;&gt;问题二：如何在服务器返回session失效之后进行两次链接请求，一次后台自动登录，一次重新进行网络请求&lt;/h3&gt;

&lt;p&gt;在Coding的代码里，我看到如果未登录是会弹出登录界面。但是我们要求是后台登录然后重新请求。&lt;/p&gt;

&lt;p&gt;我开始是想在get请求那部分直接在此调get的网络请求。但是不会执行两次网络请求。&lt;/p&gt;

&lt;p&gt;之前的项目是在vc的界面判断没数据则在此调用函数。如果那样的话我不是白封装半天了…于是决定封装到network里，我就在重新登录后判断有无数据，有数据则意味着登录成功，登录成功，在此调一个登录的函数。&lt;/p&gt;

&lt;p&gt;虽然这样看上去就不合理，但是是我能尝试出来的一个办法了…尝试了好几天，查了半天也没有类似的解决方案。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;问题三：为什么有时候不会执行网络请求&lt;/h3&gt;

&lt;p&gt;我在解决问题二的时候就出现这种问题，不能进行网络请求，我只是一个简单的调函数。但是，但是，但是，在rac里必须要subscribeNext，如果不subscribeNext则不会调！这是需要记住的。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;4. 还存在的问题以及不足&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coding对于Get请求还做了缓存，我没做。后面会慢慢加上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RAC是对于很多东西的一个大集合，比如block比如KVO等等。所以需要对iOS的内存管理机制进行一个深入理解，这是我一直所欠缺的。这个问题在我解决问题二的时候出现了好几次报错，都是这个问题。但是我却无法解决。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding中还用到了很多显示错误的MBProgress等等，我在此都没写，如果想仔细研究去看Coding的源码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding的网络请求还有很多对文件的处理，post请求等等，我现在只改写了Get和Post请求。后面需要把Coding这一套都好好的研究一下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于RAC的理解还是不够，在整个过程中遇到很多问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;codingcoding&quot;&gt;最后的最后感谢Coding将他们的客户端开源出来，感谢为Coding贡献代码的工程师。是你们让我学到了更多的东西😘&lt;/h2&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 03 Oct 2015 18:35:01 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/10/03/network.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/10/03/network.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Mac安装Aircrack-ng</title>
        <description>&lt;p&gt;9.4号中午去外面吃完冒菜回来都快三点了，这个点尴尬的不行。于是就去工作室倒腾点东西。也不想写代码，就开始各种在mac下装软件。项目基本上暂时没有什么要特别忙的，我也不能总写，都写了慎哥就没得写了。今晚上就把之前做的东西来个小记。&lt;/p&gt;

&lt;p&gt;想到的是破译wifi，当然最终因为各种因素没破译成功。不过中间过程还是很享受的。下面开始。&lt;/p&gt;

&lt;p&gt;百度了一下。有一篇&lt;a href=&quot;http://www.yyker.com/20131109457.html]&quot;&gt;MACOS苹果系统下破解无线网WPA,WPA2密码&lt;/a&gt;。用到的主要工具是Aircrack。于是就开始倒腾了。&lt;/p&gt;

&lt;h2 id=&quot;macport&quot;&gt;安装macport&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;首先第一步要安装&lt;a href=&quot;https://www.macports.org/&quot;&gt;macport&lt;/a&gt;。macport据我理解，相当于homebrew，ubuntu下相当于apt-get install。根据官网来说，安装macport最简单的方法就是下载pkg文件直接安装，但是我在下载pkg安装过程中，会出现卡死的问题。google了半天没找到解决方法。于是就下载了源代码安装，这在官网上都有说明。前面什么安装xcode的command line tools那是装机必备我就不多说了。&lt;/p&gt;

&lt;p&gt;下载之后在官网上有说明，解压之后进入目录，进行&lt;code&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;
之后需要添加环境变量，我没看懂官网的说明，自行google了一下。看到很多人的博客都写过这个问题，我在此就摘录一下。&lt;/p&gt;

&lt;p&gt;需要将/opt/local/bin和/opt/local/sbin添加到$PATH搜索路径中。然后编辑/etc/profile，这里需要超级用户。如果用vim的话需要wq！在profile里加入下面两句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export PATH=/opt/local/bin:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export PATH=/opt/local/sbin:$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后就可以了，如果要立即生效，那么需要利用source命令&lt;code&gt;source /etc/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样就可以用了，执行&lt;code&gt;sudo port -v selfupdate&lt;/code&gt;更新。到这步会发现好像仿佛是被墙了。。。&lt;/p&gt;

&lt;h2 id=&quot;proxychains&quot;&gt;安装proxychains&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;然后我又陷入了难题，好不容易手动编译安装成功了。结果更新好像被墙了咋办。查查查，命令行下使用代理的方法。找到一个东西，叫做&lt;a href=&quot;https://github.com/rofl0r/proxychains-ng&quot;&gt;proxychains&lt;/a&gt;。搜这个用了好久，因为我用的是ss，ss支持的时socks5，而iterm支持http，这就麻烦了。后来在v2ex上发现hzlzh问了这个问题。我就安装这个了。&lt;/p&gt;

&lt;p&gt;安装proxychains4非常简单，直接用homebrew就可以了。&lt;code&gt;brew install proxychains-ng&lt;/code&gt;
安装完毕要设置代理&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;/usr/local/etc/proxychains.conf&lt;/code&gt; 最下面 
&lt;code&gt;[ProxyList]
socks5  127.0.0.1 1080&lt;/code&gt;
测试proxychain能不能用，&lt;code&gt;proxychains4 curl twitter.com&lt;/code&gt;会显示ok。我就不截图了。&lt;/p&gt;

&lt;p&gt;proxychain可以让它后面的命令行直接走代理的路线，而不用直接进行网络请求。
我刚刚用这个加上home cask装了macdown。还是很不错的。因为很多命令行是需要进行网络请求的。&lt;/p&gt;

&lt;p&gt;之后就可以&lt;code&gt;proxychains4 sudo port -v selfupdate&lt;/code&gt;了。可能有点慢，不过我这次可以正常了。&lt;/p&gt;

&lt;h2 id=&quot;aircrack-ng&quot;&gt;安装aircrack-ng&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;最后的最后，我们可以用&lt;code&gt;sudo port install aircrack-ng&lt;/code&gt;就可以安装aircrack了。&lt;/p&gt;

&lt;p&gt;好了，剩下的就是按照那个博客说的来破解了…到这的时候我试了一下，但是班长突然打电话然我去取自行车，我就去了~后面的就没有后面了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;后面的安排&lt;/h2&gt;
&lt;p&gt;最近项目差不多算是完成了，后面的计划可能要调整一下状态，把RAC再看看，想看看动画，然后，继续开发下一个项目了~&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 04:06:00 +0800</pubDate>
        <link>judi0713.github.io/free/2015/09/09/mac-aircrack.html</link>
        <guid isPermaLink="true">judi0713.github.io/free/2015/09/09/mac-aircrack.html</guid>
        
        
        <category>free</category>
        
      </item>
    
      <item>
        <title>大二下学期总结和后期计划</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;以后每学期都要写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先聊聊最近的生活吧。结束了北京的实践活动回到家，这次的寒假不是很想写代码，休息一下，早点回学校再写吧，欠的项目太多，一时半会不想写。打总就休息一下回去再干了。&lt;/p&gt;

&lt;p&gt;不过最近无聊的准备继续开始写代码了。&lt;/p&gt;

&lt;p&gt;感冒了，唯一的症状是鼻子不通气。&lt;/p&gt;

&lt;p&gt;开始正题吧废话差不多了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;大二下的学期总结&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我的大二下，依旧单身。总算算是开始新的生活，开始看上新的姑娘开始往前看了。什么，哪个姑娘？看上的姑娘比较多你说哪一个？不过可以比较淡定的面对过去的人了。以前会想，以后有钱了会有妹子看上我。现在会想，妹子到时候看上的是我的人还是我的钱？大学的妹子才是真爱。不过大学的妹子会看脸吧…好心酸。&lt;/p&gt;

&lt;p&gt;技术上，其实说实话没啥大的突破。iOS开发总算是会了数据库，然后把block看了一下写了一篇关于block的博客。在项目也开始逐步的使用RAC，mvvm模式比我想象中要难的多。唯一值得庆幸的是我上线了一个独立开发的app，在app store，下载量是2，我一个人下载了一次，班长下载了一次，我让班长下的。不过无所谓了…至少是我独立上线的一个应用。&lt;/p&gt;

&lt;p&gt;其他技术上的，计算机网络学的就考了六十多…学数据库的意义就在于我没有理由在开发的时候不写sql语句了…到现在就会一个create table和select from where，不是select语句。其他就没啥了。&lt;/p&gt;

&lt;p&gt;大二下特别充实，自从姜导周末去找嫂子我们周末打球计划挂了之后我就改到晚上打球了。白天早起看看英语，上课，没课就去工作室，晚上回寝室九点多，去操场打球，十点，然后上上网，做做仰卧起坐偶尔写写代码，洗澡的时候找光哥熊熊还有班长闲扯闲扯，偶尔找找情圣。这一天就过去了。&lt;/p&gt;

&lt;p&gt;学习上，总体来说，比较满意。我的G点终于到3.0了。。累死我了。好好学习绝对是大学最难的事情。我在逐步的改变，这学期至少没有上课睡觉了，这点已经进步了，而且每门课都会听一点，除了密码学和信息论。其他都听了。不过这两门课最后复习的都还好。&lt;/p&gt;

&lt;p&gt;最大的进步是开始坚持做一些事情，不找理由。比如我坚持做仰卧起坐，看开发的资讯，还有记日记。&lt;/p&gt;

&lt;p&gt;其他，其他没啥了，有如意的地方，有不如意的地方。发生了很多事情，也结束了很多事情。一学期不可能总一帆风顺，也会有迷茫啥的，不过很幸运我在学期刚开始的时候把这些问题都解决了。&lt;/p&gt;

&lt;p&gt;去了一趟北京让我又想明白很多事情，也让我成长了不少，这可能是后话了。&lt;/p&gt;

&lt;p&gt;给这学期总体打85分，我真的很满意这学期。技术上打分80，平平稳稳，按部就班，这事需要一个时间沉淀。生活和成长，90。确实学到了很多除了技术上之外的东西，开始固执，开始偏激，不过我不觉得这是坏事。我也在逐渐的接触更多的东西。成长，不只是写代码。即使写代码很重要。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;后期计划&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;后期的计划。必须要完成的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多读书，要在坚持的列表加上一个读书。除了技术上的书还要读其他的书。&lt;/li&gt;
  &lt;li&gt;多和别人交流。读书确实很重要，但是与人交流会能得到对你更客观的评价。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两个好像每学期都是这样。。都做不到。&lt;/p&gt;

&lt;p&gt;技术上写具体一点吧，因为都是细节上的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继续我的MVVM模式的研究，然后出文档，出demo。&lt;/li&gt;
  &lt;li&gt;规范后面的项目开发。包括整理完善的开发目录，形成文档给创萌工作室。&lt;/li&gt;
  &lt;li&gt;尝试阅读源码，比如MJ的extension还有refresh，这是可以尝试去模仿写的。还有RAC的源码。这是为了可以更好的使用的。还有一些开源的项目，比如coding等等。&lt;/li&gt;
  &lt;li&gt;时间允许的话，上线一个自己独立完成的app，到app store。&lt;/li&gt;
  &lt;li&gt;学习swift。同时对oc的一些内部机制深入理解，比如assign和weak，比如runtime，还有oc如何转换为c的struct。对照一些面试题然后更详细的在&lt;/li&gt;
  &lt;li&gt;复习c语言和数据结构，像block到最后就是c的函数指针。&lt;/li&gt;
  &lt;li&gt;学习其他的语言，我想尝试ruby on rails。haskell是我的业余爱好。&lt;/li&gt;
  &lt;li&gt;学好专业课。这学期的专业课总体情况还行，下学期继续这样就可以了。&lt;/li&gt;
  &lt;li&gt;坚持学英语。为了写代码也为了以后考虑出国。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生活和其他方面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑考虑找个女朋友？个子比我矮，长得不丑，不要好看的。能理解我偶尔的繁忙。&lt;/li&gt;
  &lt;li&gt;继续坚持做一些事情，坚持100天。&lt;/li&gt;
  &lt;li&gt;坚持锻炼，打球。什么时候单手虐姜导了什么时候就不打了。&lt;/li&gt;
  &lt;li&gt;下学期要多拍照，大学过一半了，再不拍照就没了。&lt;/li&gt;
  &lt;li&gt;没事出去走走玩玩，不能总窝在电脑跟前。也不能长时间写代码。&lt;/li&gt;
  &lt;li&gt;吃好喝好多睡觉。&lt;/li&gt;
  &lt;li&gt;好好学习，争取下学期G点能到3.5，我再重修点课就差不多了。&lt;/li&gt;
  &lt;li&gt;制定每天的计划，认真完成。&lt;/li&gt;
  &lt;li&gt;多出去和别的班人接触接触，信安计科是一家。&lt;/li&gt;
  &lt;li&gt;需要把以后出国还是工作这事提到日程了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;差不多就这些了。想到再补充了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;和大二说声再见，和大三说声你好。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 18:21:56 +0800</pubDate>
        <link>judi0713.github.io/life/2015/07/29/year2-second-term.html</link>
        <guid isPermaLink="true">judi0713.github.io/life/2015/07/29/year2-second-term.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>给萌萌哒的子渔酱</title>
        <description>&lt;p&gt;写点什么吧。&lt;/p&gt;

&lt;p&gt;不知道为什么一想到老大都会想到萌萌哒的子渔酱。&lt;/p&gt;

&lt;p&gt;对于老大的称呼总有很多，老大是华哥喊起来的，我们就跟着喊了。子渔是老大的笔名。当然还有喊识颖的，这是迪哥喊的。也有喊颖姐的，这是雨叔。&lt;/p&gt;

&lt;p&gt;第一次遇见老大当然是报道的时候了，白色的衣服，扎辫子。&lt;/p&gt;

&lt;p&gt;后来再见就是班里第一次自我介绍的时候，粉色衣服。&lt;/p&gt;

&lt;p&gt;再后来就慢慢熟起来了。&lt;/p&gt;

&lt;p&gt;大一的时候总有很多时间，没事喊着老大出来一起。班级第一次聚会了，篮球赛了，还有班级聚餐了，还有一帮人在寝室吃东西啃兔头。大二的时候就少了。&lt;/p&gt;

&lt;p&gt;还记得大一给老大录的生日视频，那是唯一送老大的东西吧。&lt;/p&gt;

&lt;p&gt;对老大的印象就是女神…那不完全，还有女汉子。&lt;/p&gt;

&lt;p&gt;前几天骑车去工作室的时候走路上看到老大回寝室。穿着毕业衫斜刘海长发飘飘，哇塞，真的，是女神！&lt;/p&gt;

&lt;p&gt;之前看老大打球的时候，那真是一点都不女神了…&lt;/p&gt;

&lt;p&gt;一个人同时兼有两种截然相反的属性也是不容易的吧。&lt;/p&gt;

&lt;p&gt;老大的感觉，真的是一个很有文化气息的妹子，改变了我对科大女生的看法。&lt;/p&gt;

&lt;p&gt;老大会穿着汉服到处逛悠，也会写出看不懂的文字发到空间。&lt;/p&gt;

&lt;p&gt;我总会想，老大的境界到底有多高，很高。&lt;/p&gt;

&lt;p&gt;你会很愿意和老大交流你遇到的问题，她会给你很好的意见，你也会得到很好的解答。&lt;/p&gt;

&lt;p&gt;以前觉得老大很厉害，什么都会，会自己搭一个网站会去绿盟实习。老大现在也很厉害，总能在和老大的交流上学到很多东西。以前总想，我要好好努力要成为像老大那样，什么都会。现在觉得，至少，搭个网站什么的已经不是很难了。但是要想像老大一样有很深的文化的底蕴，很高的境界，还是很难的。像老大那样可以把每件事情考虑的很好，想的很仔细，想的很明白想的很开还是很难的。&lt;/p&gt;

&lt;p&gt;至少，这两年和老大学到了很多东西。我曾经想像老大一样当上导生，去带一个班级。看样子是没机会了。这是后话。&lt;/p&gt;

&lt;p&gt;晚上聚餐，一群人和老大合了影，依然问了老大很多问题。&lt;/p&gt;

&lt;p&gt;很快啊，这两年。一瞬间就过完了。曾经偶像般存在的老大，现在依旧偶像般的存在。多了更多女神的感觉。和老大在一起大学生活的两年，至此，也算基本上画上了句号。&lt;/p&gt;

&lt;p&gt;也许过了一段时间之后，老大会发来消息，问问我们最近怎么样。我们也会反过去问问老大怎么样。希望我们都可以很好。&lt;/p&gt;

&lt;p&gt;上海，请你照顾好我们最爱最爱的老大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-1.JPG&quot; alt=&quot;班级合影&quot; /&gt;
班级合影&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/to-my-dear/to-my-dear-2.JPG&quot; alt=&quot;我和老大&quot; /&gt;
我和老大&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 06:35:00 +0800</pubDate>
        <link>judi0713.github.io/life/2015/06/30/to-my-dear.html</link>
        <guid isPermaLink="true">judi0713.github.io/life/2015/06/30/to-my-dear.html</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>ReactiveCocoa在UIView上的运用</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近项目非常繁忙…上星期本来想把和block内存管理有关的东西看一下再写一个有关block的博客的后来有关block内存管理的博客都找好了没时间实战也就没出。
写了有两周的项目，因为很多原因所以这近两周一直在写界面，但是在写界面的时候用到了ReactiveCocoa的东西，也是因为实践了所以写篇博客分享出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;ReactiveCocoa（下文统称为RAC）&lt;/code&gt;，具体我就不介绍了，可以去我的博客里那篇还没填完坑的  &lt;a href=&quot;http://walkginkgo.com/ios/2015/05/03/ios-mvvm-1.html&quot;&gt;mvvm开发模式&lt;/a&gt;  文章看一下。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;个人以为，RAC可以以信号的方式来触发各种动作，从而让代码更加精炼。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;下面上代码吧。&lt;/h2&gt;

&lt;h2 id=&quot;uibutton&quot;&gt;&lt;code&gt;在UIButton上的使用&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                            &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testVC&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这里，对uibutton添加了一个rac_signalForControlEvents的方式，就不用利用addtarget的方式来再写一个方法来进行对uibutton添加点击事件了。&lt;/p&gt;

&lt;h2 id=&quot;uialertview&quot;&gt;&lt;code&gt;在UIAlertView的使用&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;bp&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIAlertView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;选择图片上传&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;cancelButtonTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;取消&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;otherButtonTitles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;拍照上传&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;从相册选择&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chooseAlert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rac_buttonClickedSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseFromCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseFromAlbum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这两个是&lt;a href=&quot;http://limboy.me/&quot;&gt;limeboy&lt;/a&gt;在博客里提到的。因为有了RAC，所以我这次放弃使用blockskit和alertview的Categories。&lt;/p&gt;

&lt;p&gt;下面两个是我利用RAC的方式写的代码。&lt;/p&gt;

&lt;h2 id=&quot;uitextfield&quot;&gt;&lt;code&gt;在UITextfield的使用&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;第一个是我封装了一个安卓风格的输入框，就是下面一条线，当选择这个框的时候，线会加粗变黑。
我把中间的两句核心代码贴出来。self是因为我继承了一个textfield先进行功能添加和封装。所以self就是代指一个textfield了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidBegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blackColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_signalForControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventEditingDidEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                    &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottomBorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其实这两句是可以用addtarget的方式来添加的，但是我选择了用RAC的方式，更为简单也更为容易理解。当textfield被选中的时候，下面的borderline会变成黑色，当结束选择的时候，变成灰色。(其实当选择的时候borderline应该还要加粗)。&lt;/p&gt;

&lt;h2 id=&quot;uipagecontrol&quot;&gt;&lt;code&gt;监控UIPagecontrol改变&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;还有一个地方我利用到了RAC。因为我现在需要实现一个功能，图片轮播的时候，当图片切换，我需要相应的刷新下面的一个列表。因为我们的图片轮播是用到的一个开源控件，我实在是能力有限不知道怎么进一步修改这个控件来进一步封装从而实现新的功能，我就利用了RAC。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;refreshSlideContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imagePlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码将pageControl和它的currentPage属性相绑定，当currentPage改变的时候就会触发下面的函数。然后我传了一个currentPage的参数进去，从而下面的列表可以进一步更新。但是开始加载的时候会调用3次…我不知道我哪个地方写坑了我还在寻找。各位见谅…&lt;/p&gt;

&lt;p&gt;上面的几个代码片段就是我这两周在写纯界面的时候用到的一些和RAC有关的东西，因为本身就是写纯界面，所以没用到很多，也很简单，没有其他的功能。刚刚在查limeboy博客的时候看到NotificationCenter也可以利用RAC的方式写，我抽时间也会尝试，因为项目里没用到，所以就不贴代码了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BTW：最近有一大波考试，博客更新程度会大大降低…后面可能会一直做项目，等积累一部分才会继续写了。多谢各位的支持。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;Limboy &lt;a href=&quot;http://limboy.me/ios/2013/12/27/reactivecocoa-2.html&quot;&gt;说说ReactiveCocoa 2&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Jun 2015 01:02:33 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/06/13/rac_uiview.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/06/13/rac_uiview.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Block 我所理解的回调</title>
        <description>&lt;h2 id=&quot;for-cm-and-plusub&quot;&gt;FOR CM AND PLUSUB&lt;/h2&gt;

&lt;h2 id=&quot;section&quot;&gt;废话&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发iOS距离一年还有四个月。block的文章看了很多。也在项目中使用了，但是使用率很低，仅限于最最简单的界面传值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我最近处于一个深度学习和补作业做实验的阶段(重点是补作业和做实验)，而且经历了两个项目现在对于OC的理解又更进了一步。于是抽时间把之前下载的关于block的视频又翻出来看了一下。有一些感受写出来，以便CM和PLUSUB以后的iOSer可以很快的学习到关于block的使用。以后这样的文章都会在标题加一个FOR CM AND PLUSUB。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;概述&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;block就是闭包，可以用来回调。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;再简单一点，指向函数的指针。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我现在只会简单的使用block，下午写了个demo利用block封装了afnetworking然后在另一个界面调用afnetworking的请求。当然不复杂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;上代码吧，不然再废话都解释不清楚什么是block。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part1-block&quot;&gt;&lt;em&gt;part1 block的简单定义&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;我现在定义一个简单的block。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;---%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;11111&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Outputs:---11111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以这么理解，我定义了一个返回值为void类型的block。void后面跟了一个函数，但是这个函数函数名是以^开头的，需要用括号包起来，参数也需要用括号包起来。参数可以是一个int类型，可以是一个NSString类型，还可以是一个函数！可以是多个参数还可以是一个函数。当然如果是int类型的block就需要return一个返回值了。&lt;/p&gt;

&lt;p&gt;然后我们开始对这个void类型的函数进行定义。就是令它等于一个“^+参数”然后里面像定义一个函数一样就行了。
在调用这个block的时候就直接就myBlock加参数就可以了。&lt;/p&gt;

&lt;p&gt;我们可以打断点来看一下整个block的执行顺序。我在代码后面加了标示。&lt;/p&gt;

&lt;p&gt;执行顺序是1 3 2，可以看到myBlock没有按照程序执行的顺序来调用而是在调用之后执行了2的代码。这个例子可能不那么明显，但是可以开始初步理解回调。&lt;/p&gt;

&lt;h2 id=&quot;part2-block&quot;&gt;&lt;em&gt;part2 传参block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;下面把难度加大一点，我们把block当参数传。然后看一个block的例子。
首先来回顾一个c语言里伟大的typedef，我们开头会利用typedef定义一个block。如果不利用typedef定义一个block，那么函数传参的时候会写很多代码。一会我会详述。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//typedef定义一个block&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;-----%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testBlock:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mBlock&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果开始没有用typedef定义的话，此处的函数变为- (void)testBlock:(void(^)(NSString *str))myblock&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//简单的说格式就是 “返回值 + (^) + 参数 + 名字”&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;1111&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Outputs:-----1111&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码中，我们写了一个testBlock的函数，将我们的tblock作为参数传到了testBlock函数里面，然后再testBlock里用mBlock调用了我们所写的MyBlock这个函数。&lt;/p&gt;

&lt;p&gt;打断点看一下整体的运行流程，2 3 1。这里可以更加明显理解“回调”的含义。&lt;/p&gt;

&lt;h2 id=&quot;part3-buttonblock&quot;&gt;&lt;em&gt;part3 点击button触发block&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;经历了上面两个part基本上应该对block有个简单的理解。下面再加一点难度，用按钮触发一个回调来改变按钮的颜色。&lt;/p&gt;

&lt;p&gt;不多解释，直接上代码。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;ViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greenColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testfunc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testbtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;testBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testBlock:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;myBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;part4-afnetwork&quot;&gt;&lt;em&gt;part4 利用回调分离afnetwork的请求&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;直接上代码了。&lt;/p&gt;

&lt;p&gt;TestNetworkViewController是afnetwork使用的地方。
TestViewController是我们需要调用网络请求的地方。
SearchModel是一个model，我用来解析数据的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//  TestNetworkViewController.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//TestNetworkViewController.m&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestNetworkViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestNetworkViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getmodel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;http://xxx.xx.xxx.xx:xxxx/app/search_haosou&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;JSON: %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MTLJSONAdapter&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;modelOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fromJSONDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;getmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Error: %@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  TestViewController.h&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;TestNetworkViewController.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;SearchModel.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestViewController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do any additional setup after loading the view.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buttonWithType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIButtonTypeSystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;setTitleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getUrl&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestNetworkViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SearchModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;首先还是得说一下我这里只是演示了最最简单的block使用，因为作为一个iOS开发者不会block，那么有一大半的代码是看不懂的，在后面理解RAC的时候也会出现很大的问题。所以这里我只是做了简单的说明，至于在block里为什么不能调用self，自从segmentfault上有人问过之后我答错之后现在也算是理解了一部分了，但是牵扯到了内存回收的问题，我还需要一段时间来消化。消化完之后会继续写博客的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;总之，block非常的有用，初期写block非常的难过，但是难过过了也就慢慢会喜欢上block的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;post-credits-scene&quot;&gt;post-credits scene&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近实在是忙的不可开交，一星期两场考试四个实验。还欠了人jobdeer.com一篇博客还没写，人送的书都没时间看。抽时间还要补起来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近博客的更新频率也是大大降低…唉。都是泪。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;先写到这了。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 30 May 2015 04:02:33 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/05/30/my-understand-about-block.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/05/30/my-understand-about-block.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>iOS开发模式MVVM 1理解开发模式(占坑，未写完)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一些废话&lt;/h2&gt;
&lt;p&gt;距离下一个项目大概还有一个星期的时间，除去各种实验和上课还有期中考试的复习，加上一部分设计的任务，剩下的能学习的时间实在是少之又少。
五一三天看了三场球看了两场跑男，其他时间基本上都泡在电脑前研究了MVVM的开发模式。昨天看了一下午实在是没有任何起色，今天算是到了说好的五一两篇博客的DDL了。决定还是写点东西。&lt;/p&gt;

&lt;h2 id=&quot;racmvcmvvm&quot;&gt;RAC、MVC和MVVM&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RAC(ReactiveCocoa)&lt;/code&gt;里的东西实在是有点多，RAC本身就不好理解，这么几天，说RAC是FRP的思想。我倒是没有发现里面和函数式编程有关的东西（可能是我水平太低而且没有深入理解RAC和Haskell），但是响应式的编程方式确实有了一定的理解。我理解的响应式，就是这边动作出现更换，视图和其他的对应连接的东西也会随之改变。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MVC(Model View Controller)&lt;/code&gt;是Apple官方也给出的开发模式，但是实际开发中，View和Controller很多时候是绑定在一起的。我在之前的iOS开发小记中提到过对于model层的理解。在我的第一个项目里，甚至连网络请求也是写在Controller里的，这就导致了Controller里包含了大量的代码，从视图到网络请求。我在后期维护和添加内容的时候，变得非常非常的困难。
所以这就有我们开发模式逐渐改变的第一步，迪哥利用RAC将网络层单独分离出来的写法。而且我们不断的将控件抽象出来，减少Controller中的代码。虽然代码量增加，但是后期的维护会简单不少。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MVVM(Model ViewModel Model)&lt;/code&gt;是RAC出现后提出的iOS开发新模式，分离出一个ViewModel。View层中除了View，还有Controller。&lt;/p&gt;

&lt;h2 id=&quot;mvcmvvm&quot;&gt;MVC和MVVM的比较&lt;/h2&gt;
&lt;p&gt;其实我想贴图，但是资料太多，我还是先第一步用语言来解释我自身的理解。
MVC中，Controller是核心，Controller对View进行操作，Controller也对Model进行操作。但是View和Model是不相互进行通信。
MVVM中，我理解的ViewModel是一个过渡的层，首先Model层获取数据，在ViewModel里对Model层进行操作，操作出一个View出来，然后直接在View层显示。这就节省了Controller中View的代码。&lt;/p&gt;

&lt;h2 id=&quot;mvvm&quot;&gt;简单的MVVM实现&lt;/h2&gt;
&lt;p&gt;占坑，不是不写，实在是没有可以贴出来看的代码。而且只是大概理解了里面的传值方式，MVVM模式不贴代码实在是没有什么可写的。
明日下午敲几个代码然后接着更。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 06:04:12 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/05/04/ios-mvvm-1.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/05/04/ios-mvvm-1.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>利用XAMPP在Ubuntu下搭建渗透测试平台DVWA</title>
        <description>&lt;p&gt;很早以前在freebuf上看到一篇文章。&lt;a href=&quot;http://www.freebuf.com/tools/4708.html&quot;&gt;十大渗透测试演练系统&lt;/a&gt;。也给很多人推荐过。个人感觉刚开始做安全，不像我们做应用，很难找到实践的地方。所以这十个渗透系统在初期可能显得很有用。&lt;/p&gt;

&lt;p&gt;DVWA是freebuf上提到的第一个。因为最近得知一个朋友在学习web安全这一块，就想起来上次我尝试搭DVWA失败了，这次就正好就重新尝试搭建一下顺便出个博客，希望能给朋友和其他想学习安全的朋友提供一点点点帮助。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外，这次的博客命令部分我可能采用markdown的语法模式，这样方便拷贝代码。所以有的地方就不再像以前那样截图了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;用到的东西&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dvwa.co.uk/&quot;&gt;DVWA&lt;/a&gt;是用PHP+Mysql编写的一套用于常规WEB漏洞教学和检测的WEB脆弱性测试程序。包含了SQL注入、XSS、盲注等常见的一些安全漏洞。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apachefriends.org/zh_cn/index.html&quot;&gt;XAMPP&lt;/a&gt;，XAMPP是完全免费且易于安装的Apache发行版，其中包含MySQL、PHP和Perl。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-1.png&quot; alt=&quot;use-xampp-build-dvwa-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我把上面两个文件放在桌面了，DVWA我是解压好了的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;整个搭建过程&lt;/h2&gt;
&lt;p&gt;实际上如果利用XAMPP的话整个过程非常简单，我一开始搭建的时候没有使用XAMPP，走了很多弯路。后来才发现DVWA给的官方文档就是建议用XAMPP。我建议就是开一台虚拟机，然后专门运行XAMPP就可以。&lt;/p&gt;

&lt;p&gt;进入桌面之后
&lt;code&gt;sudo ./xampp-linux-x64-5.6.8-0-installer.run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记得要用sudo，因为是要安装在系统文件里的。&lt;/p&gt;

&lt;p&gt;![use-xampp-build-dvwa-3](\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-3.png
不停的next。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-4.png&quot; alt=&quot;use-xampp-build-dvwa-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-5.png&quot; alt=&quot;use-xampp-build-dvwa-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;会弹出很多页面，还有一个可视化的对话框，看着点。都不是很重要。
会有一个这个，点中文。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-6.png&quot; alt=&quot;use-xampp-build-dvwa-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在浏览器输入&lt;code&gt;http://127.0.0.1/&lt;/code&gt;也会进入这个页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-7.png&quot; alt=&quot;use-xampp-build-dvwa-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们点击右面的安全。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-8.png&quot; alt=&quot;use-xampp-build-dvwa-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到很多问题，安装下面说的我们一步一步解决，运行&lt;code&gt;sudo /opt/lamp/xampp security&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-9.png&quot; alt=&quot;use-xampp-build-dvwa-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前的终端会有这个，不管它，ctrl+c它然后我们运行上面的命令，记得要加sudo。&lt;/p&gt;

&lt;p&gt;跟着说明一步一步设置密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-10.png&quot; alt=&quot;use-xampp-build-dvwa-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的mysql没有运行，所以不能查看安全性，运行mysql。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo /opt/lamp/xampp start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-11.png&quot; alt=&quot;use-xampp-build-dvwa-11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个命令是运行所有的环境，单独运行的时候要进入xampp的安装环境单独启动。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo /opt/lamp/xampp security&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-12.png&quot; alt=&quot;use-xampp-build-dvwa-12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这下mysql的密码也设置Ok了~
这时候在进入之前的web页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-13.png&quot; alt=&quot;use-xampp-build-dvwa-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们的xampp的环境已经基本上配置好了。下面要配置DVWA了。
我们要将DVWA的目录文件改个简单的名字，我改成了dvwa，然后放到/opt/lamp/htdocs目录下。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mv /home/cd/Desktop/dvwa/ /opt/lampp/htdocs/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这时候我们在网址栏输入&lt;code&gt;127.0.0.1/dvwa&lt;/code&gt;已经有显示了。
显示的是&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-15.png&quot; alt=&quot;use-xampp-build-dvwa-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明我们没有连接数据库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-16.png&quot; alt=&quot;use-xampp-build-dvwa-16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击红线部分，会出现下面的字。
这时候我们要进入mysql设置DVWA的数据库。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/opt/lampp/bin/mysql -us root -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create database dvwa;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-17.png&quot; alt=&quot;use-xampp-build-dvwa-17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果直接运行mysql会显示没有相关的软件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-18.png&quot; alt=&quot;use-xampp-build-dvwa-18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后修改DVWA的配置文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vim config.inc.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-19.png&quot; alt=&quot;use-xampp-build-dvwa-19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改db_password为刚刚设置的mysql的root密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\images\use-xampp-build-dvwa\2015-5-1-use-xampp-build-dvwa-20.png&quot; alt=&quot;use-xampp-build-dvwa-20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后再进入&lt;code&gt;http://127.0.0.1/dvwa/setup.php&lt;/code&gt; create database&lt;/p&gt;

&lt;p&gt;然后把虚拟机的网络设置成桥接模式就可以进行局域网的访问了。&lt;/p&gt;

&lt;p&gt;记得如果ubuntu关机或者重启需要重新启动xampp的所有服务然后新建数据库。&lt;/p&gt;

&lt;p&gt;如果没错的话，按照之前我的博客里的远程ssh访问的方式，可以让全校都访问到这个网站。至此，搭建DVWA基本是结束。这样就有了一个渗透测试的平台了。&lt;/p&gt;

&lt;p&gt;好了，我是在linux环境下搭建的，我在网上看到了ubuntu server环境还有windows环境的教程。欢迎你们尝试在windows下和ubuntu server下搭建这个测试平台。如果还有问题可以留言和我交流。&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 03:33:42 +0800</pubDate>
        <link>judi0713.github.io/xampp/2015/05/02/use-xampp-build-dvwa.html</link>
        <guid isPermaLink="true">judi0713.github.io/xampp/2015/05/02/use-xampp-build-dvwa.html</guid>
        
        
        <category>xampp</category>
        
      </item>
    
      <item>
        <title>iOS近期开发小结Ⅱ</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;距离上次写博客有一段时间了。几次提笔想写都觉得没什么可写的，好玩的东西没倒腾，iOS又学的不彻底。最近把iOS又看了一段时间，而且基本上是把主要精力放在了iOS的基础知识学习上。这篇博客就写写在做最近这个app的时候一些小结。没有太多干货的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;因为最近钟徐琦智能搜索已经上线了各大安卓市场，我就想帮他上一个iOS版本然后借此机会熟悉一些iOS开发的新模式和一些新的开源组件。现在基本上算是完成了整个应用。也在近期准备上线了，有想法做出来之后开源出来，开源到我的github和coding。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;下面就是大概小结一下做这个应用的整个过程和最近看到的一些新的东西。&lt;/h3&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.网络层的分离&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS开发官方给出的开发模式是mvc模式，但是至少对我个人来说，我view和controller搞不清楚怎么划分，像coding开源的他们的应用，基本是view层就是cell。我在做的时候view曾也只有cell的存在。&lt;/p&gt;

&lt;p&gt;迪哥在做他的上一个项目的时候，利用rac，将网络层单独分离出来。这是我在做智能搜索里最大的变化。这样不算是完整的mvvm模式，但是已经初步有了mvvm模式的雏形。我下一步的计划是继续研究mvvm的模式。虽然mvvm是利用更多的代码来进行整个程序的操作，但是将网络层单独分离确实减少了代码的后期维护难度。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.cell和tableview的分离&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以前对于一个列表的操作总是在一个view里操作。所有的cell里，只是进行数据的加载和界面的布局，这样会导致viewcontroller里代码的冗余和不好管理。&lt;/p&gt;

&lt;p&gt;我在这次的app中，使用了block和通知的方式，在cell里修改tableview的界面。说句实话，这样的方式看上去代码量增多了，实际上代码量是减少的，而且更便于后期的维护。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.三种界面传值的方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS中有三种界面传值的方式，delegate，notice和block。我在这个app中，利用了notice和block。&lt;/p&gt;

&lt;p&gt;简单的说一下我个人对这三种方式的理解。&lt;/p&gt;

&lt;p&gt;我第一个接触的方法是delegate，delegate的代码量多，但是思路清晰。&lt;/p&gt;

&lt;p&gt;第二个是这次运用到的block，block相比较delegate来说，是自己研究出来的，代码量个人觉得相比较delegate来说，简单一些，但是说句实话，到现在为止我都没研究出来block到底是个什么，回调实在是让我觉得是iOS开发里最难理解的部分了。不过现在至少可以简单的使用了。&lt;/p&gt;

&lt;p&gt;第三是notice，notice写起来简单，而且全局性强。到现在为止我没有发现notice的不好之处在哪，不仅可以传值，还可以用来调用函数。&lt;/p&gt;

&lt;p&gt;在后面的开发中，我可能会尽量多的使用block和notice，逐渐摒弃利用delegate传值的方式，但是不是说以后就不用delegate了。我觉得delegate在更大程度上是在我们自定义控件的时候会大量使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;4.利用masonry进行纯代码布局&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在一开始是想尝试纯代码布局的，但是因为都用xib所以我大量的使用纯代码布局。
这次尝试了纯代码布局和手写的约束。&lt;/p&gt;

&lt;p&gt;没什么感觉…除了适配上更方便了其他暂时没有什么感觉。&lt;/p&gt;

&lt;p&gt;我在后期开发中，会采用xib混合纯代码的方式进行界面的布局，因为利用xib在某种程度上会加快开发的进度。在某些复杂的界面，我会考虑纯代码的布局。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5.利用blockskit简化代理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Blockskit是我这次用到的一个第三方库。简单的说，它是以block的方式封装了代理。这样就不用所有代理都实现，直接用回调的方式就可以了。&lt;/p&gt;

&lt;p&gt;个人的感觉是这种方法在写alert的代理的时候非常之方便。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;6.利用mantle进行model层的解析&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mantle是一款可以将json数据自动匹配到model层的开源组件，但是我觉得mantle的使用比我想象中要复杂一点。但是这种解析model的方式很好的防止了model层代码的冗余。唱吧是采用的mantle对model层进行的解析。&lt;/p&gt;

&lt;p&gt;后期可能我会尝试使用mj的mjextension来进行model层的解析。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;7.fmdb建立本地数据库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这学期也算是学了数据库了所以不能再有理由不去建立本地数据库了。&lt;/p&gt;

&lt;p&gt;因为在智能搜索中，我需要将用户收藏的新闻存储在本地，方便使用人下次使用。&lt;/p&gt;

&lt;p&gt;本着熟悉sql语句的想法我开始使用fmdb建立本地数据库。我看的fmdb的demo是唐巧开源在他github上的fmdb使用代码和在我第一个项目中迪哥写的代码。&lt;/p&gt;

&lt;p&gt;Fmdb在使用的时候是需要写sql语句，这确实对我一个挑战，不过在两份代码的协助下我基本上完成了建立本地数据库和插入数据和查找数据删除数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其实建立本地数据库没有我想象中那么难，但是人嘛，总是不想跨过那第一步。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我深刻的感受到了像qq微信这种应用是做了大量的本地数据存储的，这是一项很庞大的工程，后面还是需要将sql语句好好的在项目中再实践以下。对我来说，可能数据库这种课考个八九十没那么重要，但是我得熟悉它的用法，如果我能很好的使用，那60分我也能接受。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;8.对model层的理解&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说句实话，我到现在都不知道model层是干啥的，但是在建立本地数据库的时候我对model层的理解又更加的不同了。&lt;/p&gt;

&lt;p&gt;一开始model层对我来说，就是进行json数据的解析。但是在从本地数据库获取信息解析的时候，我发现model的作用不仅是解析json数据，model层更是像一个大集合里的集合。它就像把一群人的共同属性抽象出来成为一个普遍的人，然后一群人里存储了不同属性的普通人。有点解释的抽象了。举个例子，{[1,2],[2,4],[4,8]},在这里，我把[2^n,2^(n+1)]可以当作一个model，然后在集合里存储了很多这种model。&lt;/p&gt;

&lt;p&gt;这样是很方便的，这种方式很大程度上代码的可读性变高，而且节约了很多不必要的代码。相当于抽象出了一个类。&lt;/p&gt;

&lt;p&gt;只是个人对model层做了那么久iOS开发的理解，暂时的理解。可能还不够准确，但是现在仿佛逐渐有了一个model层的概念，不再像以前那样，model层就是单纯的解析json数据。&lt;/p&gt;

&lt;p&gt;因为只用了大概两周的时间，有很多东西熟悉的还不是很彻底，但是总某种程度上来说已经将一些基础的东西进行了整理和复习。
各种英文官方文档看的我是欲哭无泪。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下一步的学习重点在以下几点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进一步的熟悉rac和研究mvvm模式的代码。&lt;/p&gt;

&lt;p&gt;Masonry自动布局更复杂的情况。&lt;/p&gt;

&lt;p&gt;Sql语句的更进一步使用。&lt;/p&gt;

&lt;p&gt;还需要我自己去更多探索的是mjextension和blockskit。&lt;/p&gt;

&lt;p&gt;另外还有想法看一些开源的代码和博客。不仅是开源控件的代码，还有开源的项目的代码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外，最近还在segmentfault上答题了，到不是为了找工作啥的，就像迪哥说的，这是一个很好的总结以前学过的东西的方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;希望我亲爱的姐姐一直幸福。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他没做什么了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;欢迎给我留言我们互相交流。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;以上。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 01:16:24 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/04/21/ios-sumup-2.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/04/21/ios-sumup-2.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
      <item>
        <title>Jekyll问题解答和iOS开发小结Ⅰ</title>
        <description>&lt;p&gt;从这篇开始起，会写两到三篇iOS方面的文章。可能是一些感受，可能是一些干货，欢迎你的阅读。&lt;/p&gt;

&lt;p&gt;今天这篇博客主要分两个部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一部分是对之前Jekyll博客搭建中未解释清楚的地方重新解释一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二部分是iOS开发的一个总结和iOS后期学习的一个安排。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;第一部分 Jekyll搭建博客中的问题解答&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;因为好友许总最近在看我的博客然后进行Jekyll环境的搭建遇到了一些问题。我在此做一个解答。&lt;/p&gt;

&lt;h3 id=&quot;ruby-gemjekylltime-out&quot;&gt;第一个问题是用ruby gem下载Jekyll时存在time out，及超时无法下载的情况。&lt;/h3&gt;

&lt;p&gt;这个问题主要是因为“ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了”&lt;a href=&quot;http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/&quot;&gt;（摘自唐巧的博客）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以我们只要在命令行下更换ruby的源就可以了。具体的点击巧大的博客进去看一下就可以了。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;第二个问题是上传代码的问题。&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://walkginkgo.com/git/2015/03/07/git-easyuse.html&quot;&gt;命令行git简单使用&lt;/a&gt;具体的操作可以参考这篇博客。另外解释一下这篇博客里少写的一些内容。&lt;/p&gt;

&lt;p&gt;git上传代码是需要你的身份的，所以下面两个命令是需要提前输入的。&lt;/p&gt;

&lt;p&gt;git config –global user.name “Your Name”&lt;/p&gt;

&lt;p&gt;git config –global user.email “you@email.com”&lt;/p&gt;

&lt;p&gt;git上传代码时候首先要先git clone下来，比如clone下来的文件夹叫做test。然后你在这个目录的上层目录运用jekyll new test，就会在你clone的目录下面创建jekyll了。然后就可以上传了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果后面对我的博客里的一些东西不明白的可以直接留言，或者联系我我会把我的qq或者微信给你。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ios&quot;&gt;第二部分 iOS开发小结Ⅰ&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;part--ios&quot;&gt;Part Ⅰ iOS开发总结&lt;/h3&gt;

&lt;p&gt;说着讲着做iOS开发也有快到半年了。从去年的九月份到现在的三月份，去了中间的寒假，差不多也就半年了。&lt;/p&gt;

&lt;p&gt;这半年来有苦也有乐，除了技术上的提升之外。更多的是收获了一群很好的亦师亦友的朋友。&lt;/p&gt;

&lt;p&gt;昨天迪哥和我说了一下之前代码里存在的思路和方法上的问题之后，他说我可以写几篇博客了。想想确实也该写写陪伴我那么久的iOS开发了。&lt;/p&gt;

&lt;p&gt;首先谈一点个人的感受。&lt;/p&gt;

&lt;p&gt;因为我们的开发用了cocoapods做的程序的依赖管理。所以对于github的感受颇深。我之所以开始写博客，很大程度上是因为github这个”开源大社区“。我水平有限，不能很好的为这个大社区贡献我的issue或者发起一个大的项目。所以我现在决定开始写博客，来分享我在成长过程中的点点滴滴，希望我的分享可以帮到别人。&lt;/p&gt;

&lt;p&gt;可能我iOS开发的目标就是有朝一日可以像巧大或者MJ那样可以开源一个或者几个start过百过千的项目。&lt;/p&gt;

&lt;h3 id=&quot;ios-1&quot;&gt;下面是最近做项目过程中获得的一些东西。我会分块来叙述，因为iOS这个系列会出不止一篇文章。所以这一篇现大概叙述。&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 对于面向对象的理解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我在刚使用object-c时的时候，只具备c基础，了解简单的面向对象的概念。对于继承重写这些东西理解不是很清楚。而且在第一个项目的时候几乎没有用到面向对象，但是确实在使用oc的过程中，包括和他们做安卓的交流过程中，对于面向对象的理解更加深刻了。&lt;/p&gt;

&lt;p&gt;在第二个项目中，在迪哥的指导下。对于具有相同属性的button进行继承。大大简化了管理的成本和代码量。&lt;/p&gt;

&lt;p&gt;包括在使用巧大的YTK进行网络请求时，对于有相同参数的api进行继承和重写，这样只需要重写url就可以了，节省了很多代码。&lt;/p&gt;

&lt;p&gt;因为对于oc语言的理解还不是很深刻，具体点是对c++不够熟悉，所以对于公有私有的概念不是很清楚。包括在oc中。但是现在可以简单的将一个属性暴露出来然后通过另一个界面传参的方式进行操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 函数的封装。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;简单的说，以前用一个函数用了就用了，甚至在所有界面里都写那一个函数，这样是极其不合理的。&lt;/p&gt;

&lt;p&gt;在第二个项目中，我开始进行简单的函数封装，这样简化了很多代码。比如我在设置图片背景色的时候，进行了封装，只留了一个颜色的接口。这样每次调用的时候只需要一个函数就可以对图片的背景进行上色。&lt;/p&gt;

&lt;p&gt;毅哥和我说，如果一个函数用了两次以上，那么就可以对这个函数进行封装了。&lt;/p&gt;

&lt;p&gt;后期又封装了label根据文字宽度自适应高度函数的封装等等。学会函数的封装很大程度上减少了代码量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 界面传参。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是昨天迪哥和我说的很重要的一个问题。&lt;/p&gt;

&lt;p&gt;开发程序就必然会在两个界面之间进行参数的传递。&lt;/p&gt;

&lt;p&gt;举个例子，现在有A,B两个界面。我每次都想尽可能多的把B界面里的东西由A界面传进去，这样A界面就会有很多代码。但实际上这样是有问题的。&lt;/p&gt;

&lt;p&gt;这样会造成B界面会有很多冗余的代码，正确的是应该传最少的参数获取最多的东西。这是后期开发中需要重视的一部分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 宏定义的使用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在第一个项目中，其实已经用到了宏定义，但是宏定义没有很好的使用。&lt;/p&gt;

&lt;p&gt;在第二个项目中，逐步将色彩，url等等放在了宏定义中。&lt;/p&gt;

&lt;p&gt;宏定义会很大程度上方便项目的管理。所以后面还是要对宏定义做一些更好的优化，增加一些其他的东西。方便后期的开发。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 界面的分离和开源组件的使用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;举个简单的例子来说明这个问题。&lt;/p&gt;

&lt;p&gt;在一个有上部tabbar的地方，我是用了一个tableview来不停的重绘cell。这是极其不合理的。&lt;/p&gt;

&lt;p&gt;应该将这几个部分分为不同的tableview来写，虽然这样会增加代码量，但是这样方便后期的管理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 屏幕适配。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一点对于iOS开发者永远是一个头疼的问题。&lt;/p&gt;

&lt;p&gt;因为后期我们可能采用纯代码开发，减少xib的使用。所以不对xib进行赘述。&lt;/p&gt;

&lt;p&gt;毅哥对我函数的封装提出了一个问题，就是我在封装控件的时候，总是喜欢将尺寸固定。后期我在封装的时候要更多的注意center属性和屏幕尺寸，还有就是留出尺寸的接口来方便屏幕适配。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 基本概念的理解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实在刚开始的时候我无法理解nsmutablearray和nsarray有什么区别。直到毅哥和我解释两者区别之后。&lt;/p&gt;

&lt;p&gt;这对我在做第二个项目的时候提供了很多方便。&lt;/p&gt;

&lt;p&gt;因为本身oc里的变量属性比较多。所以后期还需要对这些基本的变量进行一个熟悉，方便后期使用。&lt;/p&gt;

&lt;p&gt;因为苹果现在要求支持64位操作系统，所以对于变量的取值范围更加的规范起来，这是后期需要注意的一个地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. 界面通信。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为iOS开发的时候经常需要界面传参，所以对于delegate或者block需要有一个更好的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. 命名。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我之所以写这点是为了表达我下次做项目一定好好起变量名字。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他存在的问题我就留着自己消化不发出来了。因为后期的项目可能会采用很多其他的开源组件，会解决很多我现在开发存在的问题。包括json数据解析等等。会逐渐将这些问题和解决方法依次叙述出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;part--ios-1&quot;&gt;Part Ⅱ iOS开发后期学习安排&lt;/h2&gt;
&lt;p&gt;现在对于什么是编程，怎么做开发有了大概的概念了，一个好的程序员得写十万行代码，我估计我现在也就千行出头没多少。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;后期iOS开发的学习安排大概集中于以下几点。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.fmdb进行本地数据库的建立。这是寒假安排任务的时候就安排了的。&lt;/p&gt;

&lt;p&gt;2.delegate和block的使用，主要是block的使用。&lt;/p&gt;

&lt;p&gt;3.还需要大量阅读别人开源的代码还有迪哥的代码。这是作为一个初学者提升很好的一个办法，而且我现在基本上具备看懂别人开源代码的能力了。最近任务量不是很繁重，所以更多的需要学习。&lt;/p&gt;

&lt;p&gt;4.RAC的理解和使用。不详细叙述。&lt;/p&gt;

&lt;p&gt;5.对于之前用到的函数再次封装，对于能重复使用的函数要接着用。&lt;/p&gt;

&lt;p&gt;6.整理之前用到的方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大概就想到这些，后期重点还是阅读迪哥写的代码，自己尝试写一些东西。后面会有一段时间时间比较充裕，是一个重新回顾，学新东西，然后提升的好阶段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;基本内容就是这些，谢谢你的阅读，有什么问题尽管留言。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 19:39:16 +0800</pubDate>
        <link>judi0713.github.io/ios/2015/03/22/ios-sumup-1.html</link>
        <guid isPermaLink="true">judi0713.github.io/ios/2015/03/22/ios-sumup-1.html</guid>
        
        
        <category>ios</category>
        
      </item>
    
  </channel>
</rss>
